// Generated from EveryGrammar.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';
import EveryGrammarListener from './EveryGrammarListener.js';

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0089\u0361\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004A\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005H\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006O\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007V\n\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b^\n\b\f\b\u000e\ba\u000b\b",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\ty\n\t\f\t\u000e\t|\u000b\t",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u008d\n\n",
    "\f\n\u000e\n\u0090\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0098\n\u000b\f\u000b\u000e",
    "\u000b\u009b\u000b\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0007\f\u00a3\n\f\f\f\u000e\f\u00a6\u000b\f\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u00b1\n\r",
    "\f\r\u000e\r\u00b4\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u00ce\n\u000e\f\u000e\u000e",
    "\u000e\u00d1\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u00f0\n\u000f\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u011a\n\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u0144\n\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0186\n\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u01b8\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u01de\n\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0226\n\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u0326\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u0350\n\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0357\n\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u035f\n\u0019\u0003\u0019\u0002\t\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001a\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.0\u0002\u0002\u0002\u03e5\u00022\u0003\u0002",
    "\u0002\u0002\u00044\u0003\u0002\u0002\u0002\u0006@\u0003\u0002\u0002",
    "\u0002\bG\u0003\u0002\u0002\u0002\nN\u0003\u0002\u0002\u0002\fU\u0003",
    "\u0002\u0002\u0002\u000eW\u0003\u0002\u0002\u0002\u0010b\u0003\u0002",
    "\u0002\u0002\u0012}\u0003\u0002\u0002\u0002\u0014\u0091\u0003\u0002",
    "\u0002\u0002\u0016\u009c\u0003\u0002\u0002\u0002\u0018\u00a7\u0003\u0002",
    "\u0002\u0002\u001a\u00b5\u0003\u0002\u0002\u0002\u001c\u00ef\u0003\u0002",
    "\u0002\u0002\u001e\u0119\u0003\u0002\u0002\u0002 \u0143\u0003\u0002",
    "\u0002\u0002\"\u0185\u0003\u0002\u0002\u0002$\u01b7\u0003\u0002\u0002",
    "\u0002&\u01dd\u0003\u0002\u0002\u0002(\u0225\u0003\u0002\u0002\u0002",
    "*\u0325\u0003\u0002\u0002\u0002,\u034f\u0003\u0002\u0002\u0002.\u0356",
    "\u0003\u0002\u0002\u00020\u035e\u0003\u0002\u0002\u000223\u0005\u0004",
    "\u0003\u00023\u0003\u0003\u0002\u0002\u000245\u0005\u0006\u0004\u0002",
    "5\u0005\u0003\u0002\u0002\u00026A\u0005\b\u0005\u000278\u0005\b\u0005",
    "\u000289\u0005$\u0013\u00029A\u0003\u0002\u0002\u0002:;\u0005\b\u0005",
    "\u0002;<\u0007\u0019\u0002\u0002<=\u0005\b\u0005\u0002=>\u0007\u0018",
    "\u0002\u0002>?\u0005\b\u0005\u0002?A\u0003\u0002\u0002\u0002@6\u0003",
    "\u0002\u0002\u0002@7\u0003\u0002\u0002\u0002@:\u0003\u0002\u0002\u0002",
    "A\u0007\u0003\u0002\u0002\u0002BH\u0005\n\u0006\u0002CD\u0007\"\u0002",
    "\u0002DE\u0005\u0006\u0004\u0002EF\u0007#\u0002\u0002FH\u0003\u0002",
    "\u0002\u0002GB\u0003\u0002\u0002\u0002GC\u0003\u0002\u0002\u0002H\t",
    "\u0003\u0002\u0002\u0002IO\u0005\f\u0007\u0002JK\u0005\f\u0007\u0002",
    "KL\u0007\u000f\u0002\u0002LM\u0005\f\u0007\u0002MO\u0003\u0002\u0002",
    "\u0002NI\u0003\u0002\u0002\u0002NJ\u0003\u0002\u0002\u0002O\u000b\u0003",
    "\u0002\u0002\u0002PV\u0005\u000e\b\u0002QR\u0005\u000e\b\u0002RS\u0007",
    "\t\u0002\u0002ST\u0005\u000e\b\u0002TV\u0003\u0002\u0002\u0002UP\u0003",
    "\u0002\u0002\u0002UQ\u0003\u0002\u0002\u0002V\r\u0003\u0002\u0002\u0002",
    "WX\b\b\u0001\u0002XY\u0005\u0010\t\u0002Y_\u0003\u0002\u0002\u0002Z",
    "[\f\u0003\u0002\u0002[\\\u0007\u0010\u0002\u0002\\^\u0005\u0010\t\u0002",
    "]Z\u0003\u0002\u0002\u0002^a\u0003\u0002\u0002\u0002_]\u0003\u0002\u0002",
    "\u0002_`\u0003\u0002\u0002\u0002`\u000f\u0003\u0002\u0002\u0002a_\u0003",
    "\u0002\u0002\u0002bc\b\t\u0001\u0002cd\u0005\u0012\n\u0002dz\u0003\u0002",
    "\u0002\u0002ef\f\b\u0002\u0002fg\u0007\n\u0002\u0002gy\u0005\u0012\n",
    "\u0002hi\f\u0007\u0002\u0002ij\u0007\r\u0002\u0002jy\u0005\u0012\n\u0002",
    "kl\f\u0006\u0002\u0002lm\u0007\u000b\u0002\u0002my\u0005\u0012\n\u0002",
    "no\f\u0005\u0002\u0002op\u0007\u000e\u0002\u0002py\u0005\u0012\n\u0002",
    "qr\f\u0004\u0002\u0002rs\u0007\u001d\u0002\u0002sy\u0005\u0012\n\u0002",
    "tu\f\u0003\u0002\u0002uv\u0007\f\u0002\u0002vw\u0007\u001d\u0002\u0002",
    "wy\u0005\u0012\n\u0002xe\u0003\u0002\u0002\u0002xh\u0003\u0002\u0002",
    "\u0002xk\u0003\u0002\u0002\u0002xn\u0003\u0002\u0002\u0002xq\u0003\u0002",
    "\u0002\u0002xt\u0003\u0002\u0002\u0002y|\u0003\u0002\u0002\u0002zx\u0003",
    "\u0002\u0002\u0002z{\u0003\u0002\u0002\u0002{\u0011\u0003\u0002\u0002",
    "\u0002|z\u0003\u0002\u0002\u0002}~\b\n\u0001\u0002~\u007f\u0005\u0014",
    "\u000b\u0002\u007f\u008e\u0003\u0002\u0002\u0002\u0080\u0081\f\u0006",
    "\u0002\u0002\u0081\u0082\u0007\u0015\u0002\u0002\u0082\u008d\u0005\u0014",
    "\u000b\u0002\u0083\u0084\f\u0005\u0002\u0002\u0084\u0085\u0007\u0013",
    "\u0002\u0002\u0085\u008d\u0005\u0014\u000b\u0002\u0086\u0087\f\u0004",
    "\u0002\u0002\u0087\u0088\u0007\u0016\u0002\u0002\u0088\u008d\u0005\u0014",
    "\u000b\u0002\u0089\u008a\f\u0003\u0002\u0002\u008a\u008b\u0007\u0014",
    "\u0002\u0002\u008b\u008d\u0005\u0014\u000b\u0002\u008c\u0080\u0003\u0002",
    "\u0002\u0002\u008c\u0083\u0003\u0002\u0002\u0002\u008c\u0086\u0003\u0002",
    "\u0002\u0002\u008c\u0089\u0003\u0002\u0002\u0002\u008d\u0090\u0003\u0002",
    "\u0002\u0002\u008e\u008c\u0003\u0002\u0002\u0002\u008e\u008f\u0003\u0002",
    "\u0002\u0002\u008f\u0013\u0003\u0002\u0002\u0002\u0090\u008e\u0003\u0002",
    "\u0002\u0002\u0091\u0092\b\u000b\u0001\u0002\u0092\u0093\u0005\u0016",
    "\f\u0002\u0093\u0099\u0003\u0002\u0002\u0002\u0094\u0095\f\u0003\u0002",
    "\u0002\u0095\u0096\u0007\u0011\u0002\u0002\u0096\u0098\u0005\u0016\f",
    "\u0002\u0097\u0094\u0003\u0002\u0002\u0002\u0098\u009b\u0003\u0002\u0002",
    "\u0002\u0099\u0097\u0003\u0002\u0002\u0002\u0099\u009a\u0003\u0002\u0002",
    "\u0002\u009a\u0015\u0003\u0002\u0002\u0002\u009b\u0099\u0003\u0002\u0002",
    "\u0002\u009c\u009d\b\f\u0001\u0002\u009d\u009e\u0005\u0018\r\u0002\u009e",
    "\u00a4\u0003\u0002\u0002\u0002\u009f\u00a0\f\u0003\u0002\u0002\u00a0",
    "\u00a1\u0007\u0012\u0002\u0002\u00a1\u00a3\u0005\u0018\r\u0002\u00a2",
    "\u009f\u0003\u0002\u0002\u0002\u00a3\u00a6\u0003\u0002\u0002\u0002\u00a4",
    "\u00a2\u0003\u0002\u0002\u0002\u00a4\u00a5\u0003\u0002\u0002\u0002\u00a5",
    "\u0017\u0003\u0002\u0002\u0002\u00a6\u00a4\u0003\u0002\u0002\u0002\u00a7",
    "\u00a8\b\r\u0001\u0002\u00a8\u00a9\u0005\u001a\u000e\u0002\u00a9\u00b2",
    "\u0003\u0002\u0002\u0002\u00aa\u00ab\f\u0004\u0002\u0002\u00ab\u00ac",
    "\u0007\u0003\u0002\u0002\u00ac\u00b1\u0005\u001a\u000e\u0002\u00ad\u00ae",
    "\f\u0003\u0002\u0002\u00ae\u00af\u0007\u0004\u0002\u0002\u00af\u00b1",
    "\u0005\u001a\u000e\u0002\u00b0\u00aa\u0003\u0002\u0002\u0002\u00b0\u00ad",
    "\u0003\u0002\u0002\u0002\u00b1\u00b4\u0003\u0002\u0002\u0002\u00b2\u00b0",
    "\u0003\u0002\u0002\u0002\u00b2\u00b3\u0003\u0002\u0002\u0002\u00b3\u0019",
    "\u0003\u0002\u0002\u0002\u00b4\u00b2\u0003\u0002\u0002\u0002\u00b5\u00b6",
    "\b\u000e\u0001\u0002\u00b6\u00b7\u0005\u001c\u000f\u0002\u00b7\u00cf",
    "\u0003\u0002\u0002\u0002\u00b8\u00b9\f\t\u0002\u0002\u00b9\u00ba\u0007",
    "\u0005\u0002\u0002\u00ba\u00ce\u0005\u001c\u000f\u0002\u00bb\u00bc\f",
    "\b\u0002\u0002\u00bc\u00bd\u0007\b\u0002\u0002\u00bd\u00ce\u0005\u001c",
    "\u000f\u0002\u00be\u00bf\f\u0007\u0002\u0002\u00bf\u00c0\u0007\u0007",
    "\u0002\u0002\u00c0\u00ce\u0005\u001c\u000f\u0002\u00c1\u00c2\f\u0006",
    "\u0002\u0002\u00c2\u00c3\u0007\u001b\u0002\u0002\u00c3\u00ce\u0005\u001c",
    "\u000f\u0002\u00c4\u00c5\f\u0005\u0002\u0002\u00c5\u00c6\u0007\u001c",
    "\u0002\u0002\u00c6\u00ce\u0005\u001c\u000f\u0002\u00c7\u00c8\f\u0004",
    "\u0002\u0002\u00c8\u00c9\u0007\u0006\u0002\u0002\u00c9\u00ce\u0005\u001c",
    "\u000f\u0002\u00ca\u00cb\f\u0003\u0002\u0002\u00cb\u00cc\u0007\u001a",
    "\u0002\u0002\u00cc\u00ce\u0005\u001c\u000f\u0002\u00cd\u00b8\u0003\u0002",
    "\u0002\u0002\u00cd\u00bb\u0003\u0002\u0002\u0002\u00cd\u00be\u0003\u0002",
    "\u0002\u0002\u00cd\u00c1\u0003\u0002\u0002\u0002\u00cd\u00c4\u0003\u0002",
    "\u0002\u0002\u00cd\u00c7\u0003\u0002\u0002\u0002\u00cd\u00ca\u0003\u0002",
    "\u0002\u0002\u00ce\u00d1\u0003\u0002\u0002\u0002\u00cf\u00cd\u0003\u0002",
    "\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u001b\u0003\u0002",
    "\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d2\u00d3\u0007\f",
    "\u0002\u0002\u00d3\u00f0\u0005\u001c\u000f\u0002\u00d4\u00d5\u0007\u0004",
    "\u0002\u0002\u00d5\u00f0\u0005\u001c\u000f\u0002\u00d6\u00d7\u0007\u0003",
    "\u0002\u0002\u00d7\u00f0\u0005\u001c\u000f\u0002\u00d8\u00d9\u0007\u0017",
    "\u0002\u0002\u00d9\u00f0\u0005\u001c\u000f\u0002\u00da\u00db\u0007\u001e",
    "\u0002\u0002\u00db\u00f0\u0005\u001c\u000f\u0002\u00dc\u00dd\u0007\"",
    "\u0002\u0002\u00dd\u00de\u0005\u0004\u0003\u0002\u00de\u00df\u0007#",
    "\u0002\u0002\u00df\u00f0\u0003\u0002\u0002\u0002\u00e0\u00f0\u0007 ",
    "\u0002\u0002\u00e1\u00f0\u0007!\u0002\u0002\u00e2\u00f0\u0007*\u0002",
    "\u0002\u00e3\u00f0\u0007&\u0002\u0002\u00e4\u00f0\u0007(\u0002\u0002",
    "\u00e5\u00f0\u0007)\u0002\u0002\u00e6\u00f0\u0007\'\u0002\u0002\u00e7",
    "\u00f0\u0005\"\u0012\u0002\u00e8\u00f0\u00050\u0019\u0002\u00e9\u00f0",
    "\u0005(\u0015\u0002\u00ea\u00f0\u0005&\u0014\u0002\u00eb\u00f0\u0005",
    " \u0011\u0002\u00ec\u00f0\u0005*\u0016\u0002\u00ed\u00f0\u0005\u001e",
    "\u0010\u0002\u00ee\u00f0\u0005,\u0017\u0002\u00ef\u00d2\u0003\u0002",
    "\u0002\u0002\u00ef\u00d4\u0003\u0002\u0002\u0002\u00ef\u00d6\u0003\u0002",
    "\u0002\u0002\u00ef\u00d8\u0003\u0002\u0002\u0002\u00ef\u00da\u0003\u0002",
    "\u0002\u0002\u00ef\u00dc\u0003\u0002\u0002\u0002\u00ef\u00e0\u0003\u0002",
    "\u0002\u0002\u00ef\u00e1\u0003\u0002\u0002\u0002\u00ef\u00e2\u0003\u0002",
    "\u0002\u0002\u00ef\u00e3\u0003\u0002\u0002\u0002\u00ef\u00e4\u0003\u0002",
    "\u0002\u0002\u00ef\u00e5\u0003\u0002\u0002\u0002\u00ef\u00e6\u0003\u0002",
    "\u0002\u0002\u00ef\u00e7\u0003\u0002\u0002\u0002\u00ef\u00e8\u0003\u0002",
    "\u0002\u0002\u00ef\u00e9\u0003\u0002\u0002\u0002\u00ef\u00ea\u0003\u0002",
    "\u0002\u0002\u00ef\u00eb\u0003\u0002\u0002\u0002\u00ef\u00ec\u0003\u0002",
    "\u0002\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00ef\u00ee\u0003\u0002",
    "\u0002\u0002\u00f0\u001d\u0003\u0002\u0002\u0002\u00f1\u00f2\u0007\u0088",
    "\u0002\u0002\u00f2\u011a\u0007#\u0002\u0002\u00f3\u00f4\u0007\u0088",
    "\u0002\u0002\u00f4\u00f5\u0005\u0004\u0003\u0002\u00f5\u00f6\u0007#",
    "\u0002\u0002\u00f6\u011a\u0003\u0002\u0002\u0002\u00f7\u00f8\u0007\u0088",
    "\u0002\u0002\u00f8\u00f9\u0005\u0004\u0003\u0002\u00f9\u00fa\u0007\u001f",
    "\u0002\u0002\u00fa\u00fb\u0005\u0004\u0003\u0002\u00fb\u00fc\u0007#",
    "\u0002\u0002\u00fc\u011a\u0003\u0002\u0002\u0002\u00fd\u00fe\u0007\u0088",
    "\u0002\u0002\u00fe\u00ff\u0005\u0004\u0003\u0002\u00ff\u0100\u0007\u001f",
    "\u0002\u0002\u0100\u0101\u0005\u0004\u0003\u0002\u0101\u0102\u0007\u001f",
    "\u0002\u0002\u0102\u0103\u0005\u0004\u0003\u0002\u0103\u0104\u0007#",
    "\u0002\u0002\u0104\u011a\u0003\u0002\u0002\u0002\u0105\u0106\u0007\u0089",
    "\u0002\u0002\u0106\u011a\u0007#\u0002\u0002\u0107\u0108\u0007\u0089",
    "\u0002\u0002\u0108\u0109\u0005\u0004\u0003\u0002\u0109\u010a\u0007#",
    "\u0002\u0002\u010a\u011a\u0003\u0002\u0002\u0002\u010b\u010c\u0007\u0089",
    "\u0002\u0002\u010c\u010d\u0005\u0004\u0003\u0002\u010d\u010e\u0007\u001f",
    "\u0002\u0002\u010e\u010f\u0005\u0004\u0003\u0002\u010f\u0110\u0007#",
    "\u0002\u0002\u0110\u011a\u0003\u0002\u0002\u0002\u0111\u0112\u0007\u0089",
    "\u0002\u0002\u0112\u0113\u0005\u0004\u0003\u0002\u0113\u0114\u0007\u001f",
    "\u0002\u0002\u0114\u0115\u0005\u0004\u0003\u0002\u0115\u0116\u0007\u001f",
    "\u0002\u0002\u0116\u0117\u0005\u0004\u0003\u0002\u0117\u0118\u0007#",
    "\u0002\u0002\u0118\u011a\u0003\u0002\u0002\u0002\u0119\u00f1\u0003\u0002",
    "\u0002\u0002\u0119\u00f3\u0003\u0002\u0002\u0002\u0119\u00f7\u0003\u0002",
    "\u0002\u0002\u0119\u00fd\u0003\u0002\u0002\u0002\u0119\u0105\u0003\u0002",
    "\u0002\u0002\u0119\u0107\u0003\u0002\u0002\u0002\u0119\u010b\u0003\u0002",
    "\u0002\u0002\u0119\u0111\u0003\u0002\u0002\u0002\u011a\u001f\u0003\u0002",
    "\u0002\u0002\u011b\u011c\u0007\u0081\u0002\u0002\u011c\u011d\u0005.",
    "\u0018\u0002\u011d\u011e\u0007#\u0002\u0002\u011e\u0144\u0003\u0002",
    "\u0002\u0002\u011f\u0120\u0007\u0080\u0002\u0002\u0120\u0121\u0005\u0004",
    "\u0003\u0002\u0121\u0122\u0007#\u0002\u0002\u0122\u0144\u0003\u0002",
    "\u0002\u0002\u0123\u0124\u0007~\u0002\u0002\u0124\u0125\u0005\u0004",
    "\u0003\u0002\u0125\u0126\u0007#\u0002\u0002\u0126\u0144\u0003\u0002",
    "\u0002\u0002\u0127\u0128\u0007\u007f\u0002\u0002\u0128\u0129\u0005\u0004",
    "\u0003\u0002\u0129\u012a\u0007#\u0002\u0002\u012a\u0144\u0003\u0002",
    "\u0002\u0002\u012b\u012c\u0007\u0082\u0002\u0002\u012c\u012d\u0005\u0004",
    "\u0003\u0002\u012d\u012e\u0007#\u0002\u0002\u012e\u0144\u0003\u0002",
    "\u0002\u0002\u012f\u0130\u0007\u0083\u0002\u0002\u0130\u0131\u0005\u0004",
    "\u0003\u0002\u0131\u0132\u0007#\u0002\u0002\u0132\u0144\u0003\u0002",
    "\u0002\u0002\u0133\u0134\u0007\u0084\u0002\u0002\u0134\u0135\u0005\u0004",
    "\u0003\u0002\u0135\u0136\u0007#\u0002\u0002\u0136\u0144\u0003\u0002",
    "\u0002\u0002\u0137\u0138\u0007\u0085\u0002\u0002\u0138\u0139\u0005\u0004",
    "\u0003\u0002\u0139\u013a\u0007#\u0002\u0002\u013a\u0144\u0003\u0002",
    "\u0002\u0002\u013b\u013c\u0007\u0086\u0002\u0002\u013c\u013d\u0005\u0004",
    "\u0003\u0002\u013d\u013e\u0007#\u0002\u0002\u013e\u0144\u0003\u0002",
    "\u0002\u0002\u013f\u0140\u0007\u0087\u0002\u0002\u0140\u0141\u0005\u0004",
    "\u0003\u0002\u0141\u0142\u0007#\u0002\u0002\u0142\u0144\u0003\u0002",
    "\u0002\u0002\u0143\u011b\u0003\u0002\u0002\u0002\u0143\u011f\u0003\u0002",
    "\u0002\u0002\u0143\u0123\u0003\u0002\u0002\u0002\u0143\u0127\u0003\u0002",
    "\u0002\u0002\u0143\u012b\u0003\u0002\u0002\u0002\u0143\u012f\u0003\u0002",
    "\u0002\u0002\u0143\u0133\u0003\u0002\u0002\u0002\u0143\u0137\u0003\u0002",
    "\u0002\u0002\u0143\u013b\u0003\u0002\u0002\u0002\u0143\u013f\u0003\u0002",
    "\u0002\u0002\u0144!\u0003\u0002\u0002\u0002\u0145\u0146\u0007n\u0002",
    "\u0002\u0146\u0147\u0005\u0004\u0003\u0002\u0147\u0148\u0007#\u0002",
    "\u0002\u0148\u0186\u0003\u0002\u0002\u0002\u0149\u014a\u0007n\u0002",
    "\u0002\u014a\u014b\u0005\u0004\u0003\u0002\u014b\u014c\u0007\u001f\u0002",
    "\u0002\u014c\u014d\u0005\u0004\u0003\u0002\u014d\u014e\u0007\u001f\u0002",
    "\u0002\u014e\u014f\u0005\u0004\u0003\u0002\u014f\u0150\u0007#\u0002",
    "\u0002\u0150\u0186\u0003\u0002\u0002\u0002\u0151\u0152\u0007n\u0002",
    "\u0002\u0152\u0153\u0005\u0004\u0003\u0002\u0153\u0154\u0007\u001f\u0002",
    "\u0002\u0154\u0155\u0005\u0004\u0003\u0002\u0155\u0156\u0007\u001f\u0002",
    "\u0002\u0156\u0157\u0005\u0004\u0003\u0002\u0157\u0158\u0007\u001f\u0002",
    "\u0002\u0158\u0159\u0005\u0004\u0003\u0002\u0159\u015a\u0007#\u0002",
    "\u0002\u015a\u0186\u0003\u0002\u0002\u0002\u015b\u015c\u0007n\u0002",
    "\u0002\u015c\u015d\u0005\u0004\u0003\u0002\u015d\u015e\u0007\u001f\u0002",
    "\u0002\u015e\u015f\u0005\u0004\u0003\u0002\u015f\u0160\u0007\u001f\u0002",
    "\u0002\u0160\u0161\u0005\u0004\u0003\u0002\u0161\u0162\u0007\u001f\u0002",
    "\u0002\u0162\u0163\u0005\u0004\u0003\u0002\u0163\u0164\u0007\u001f\u0002",
    "\u0002\u0164\u0165\u0005\u0004\u0003\u0002\u0165\u0166\u0007#\u0002",
    "\u0002\u0166\u0186\u0003\u0002\u0002\u0002\u0167\u0168\u0007n\u0002",
    "\u0002\u0168\u0169\u0005\u0004\u0003\u0002\u0169\u016a\u0007\u001f\u0002",
    "\u0002\u016a\u016b\u0005\u0004\u0003\u0002\u016b\u016c\u0007\u001f\u0002",
    "\u0002\u016c\u016d\u0005\u0004\u0003\u0002\u016d\u016e\u0007\u001f\u0002",
    "\u0002\u016e\u016f\u0005\u0004\u0003\u0002\u016f\u0170\u0007\u001f\u0002",
    "\u0002\u0170\u0171\u0005\u0004\u0003\u0002\u0171\u0172\u0007\u001f\u0002",
    "\u0002\u0172\u0173\u0005\u0004\u0003\u0002\u0173\u0174\u0007#\u0002",
    "\u0002\u0174\u0186\u0003\u0002\u0002\u0002\u0175\u0176\u0007n\u0002",
    "\u0002\u0176\u0177\u0005\u0004\u0003\u0002\u0177\u0178\u0007\u001f\u0002",
    "\u0002\u0178\u0179\u0005\u0004\u0003\u0002\u0179\u017a\u0007\u001f\u0002",
    "\u0002\u017a\u017b\u0005\u0004\u0003\u0002\u017b\u017c\u0007\u001f\u0002",
    "\u0002\u017c\u017d\u0005\u0004\u0003\u0002\u017d\u017e\u0007\u001f\u0002",
    "\u0002\u017e\u017f\u0005\u0004\u0003\u0002\u017f\u0180\u0007\u001f\u0002",
    "\u0002\u0180\u0181\u0005\u0004\u0003\u0002\u0181\u0182\u0007\u001f\u0002",
    "\u0002\u0182\u0183\u0005\u0004\u0003\u0002\u0183\u0184\u0007#\u0002",
    "\u0002\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u0145\u0003\u0002\u0002",
    "\u0002\u0185\u0149\u0003\u0002\u0002\u0002\u0185\u0151\u0003\u0002\u0002",
    "\u0002\u0185\u015b\u0003\u0002\u0002\u0002\u0185\u0167\u0003\u0002\u0002",
    "\u0002\u0185\u0175\u0003\u0002\u0002\u0002\u0186#\u0003\u0002\u0002",
    "\u0002\u0187\u0188\u0007$\u0002\u0002\u0188\u0189\u0005\u0004\u0003",
    "\u0002\u0189\u018a\u0007%\u0002\u0002\u018a\u01b8\u0003\u0002\u0002",
    "\u0002\u018b\u018c\u0007$\u0002\u0002\u018c\u018d\u0005\u0004\u0003",
    "\u0002\u018d\u018e\u0007\u0018\u0002\u0002\u018e\u018f\u0005\u0004\u0003",
    "\u0002\u018f\u0190\u0007%\u0002\u0002\u0190\u01b8\u0003\u0002\u0002",
    "\u0002\u0191\u0192\u0007$\u0002\u0002\u0192\u0193\u0005\u0004\u0003",
    "\u0002\u0193\u0194\u0007\u0018\u0002\u0002\u0194\u0195\u0005\u0004\u0003",
    "\u0002\u0195\u0196\u0007\u0018\u0002\u0002\u0196\u0197\u0005\u0004\u0003",
    "\u0002\u0197\u0198\u0007%\u0002\u0002\u0198\u01b8\u0003\u0002\u0002",
    "\u0002\u0199\u019a\u0007$\u0002\u0002\u019a\u019b\u0005\u0004\u0003",
    "\u0002\u019b\u019c\u0007\u0018\u0002\u0002\u019c\u019d\u0007%\u0002",
    "\u0002\u019d\u01b8\u0003\u0002\u0002\u0002\u019e\u019f\u0007$\u0002",
    "\u0002\u019f\u01a0\u0005\u0004\u0003\u0002\u01a0\u01a1\u0007\u0018\u0002",
    "\u0002\u01a1\u01a2\u0007\u0018\u0002\u0002\u01a2\u01a3\u0005\u0004\u0003",
    "\u0002\u01a3\u01a4\u0007%\u0002\u0002\u01a4\u01b8\u0003\u0002\u0002",
    "\u0002\u01a5\u01a6\u0007$\u0002\u0002\u01a6\u01a7\u0007\u0018\u0002",
    "\u0002\u01a7\u01a8\u0005\u0004\u0003\u0002\u01a8\u01a9\u0007%\u0002",
    "\u0002\u01a9\u01b8\u0003\u0002\u0002\u0002\u01aa\u01ab\u0007$\u0002",
    "\u0002\u01ab\u01ac\u0007\u0018\u0002\u0002\u01ac\u01ad\u0005\u0004\u0003",
    "\u0002\u01ad\u01ae\u0007\u0018\u0002\u0002\u01ae\u01af\u0005\u0004\u0003",
    "\u0002\u01af\u01b0\u0007%\u0002\u0002\u01b0\u01b8\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u0007$\u0002\u0002\u01b2\u01b3\u0007\u0018\u0002",
    "\u0002\u01b3\u01b4\u0007\u0018\u0002\u0002\u01b4\u01b5\u0005\u0004\u0003",
    "\u0002\u01b5\u01b6\u0007%\u0002\u0002\u01b6\u01b8\u0003\u0002\u0002",
    "\u0002\u01b7\u0187\u0003\u0002\u0002\u0002\u01b7\u018b\u0003\u0002\u0002",
    "\u0002\u01b7\u0191\u0003\u0002\u0002\u0002\u01b7\u0199\u0003\u0002\u0002",
    "\u0002\u01b7\u019e\u0003\u0002\u0002\u0002\u01b7\u01a5\u0003\u0002\u0002",
    "\u0002\u01b7\u01aa\u0003\u0002\u0002\u0002\u01b7\u01b1\u0003\u0002\u0002",
    "\u0002\u01b8%\u0003\u0002\u0002\u0002\u01b9\u01ba\u0007{\u0002\u0002",
    "\u01ba\u01bb\u0005\u0004\u0003\u0002\u01bb\u01bc\u0007#\u0002\u0002",
    "\u01bc\u01de\u0003\u0002\u0002\u0002\u01bd\u01be\u0007y\u0002\u0002",
    "\u01be\u01bf\u0005\u0004\u0003\u0002\u01bf\u01c0\u0007#\u0002\u0002",
    "\u01c0\u01de\u0003\u0002\u0002\u0002\u01c1\u01c2\u0007z\u0002\u0002",
    "\u01c2\u01c3\u0005\u0004\u0003\u0002\u01c3\u01c4\u0007#\u0002\u0002",
    "\u01c4\u01de\u0003\u0002\u0002\u0002\u01c5\u01c6\u0007|\u0002\u0002",
    "\u01c6\u01c7\u0005\u0004\u0003\u0002\u01c7\u01c8\u0007#\u0002\u0002",
    "\u01c8\u01de\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007x\u0002\u0002",
    "\u01ca\u01cb\u0005\u0004\u0003\u0002\u01cb\u01cc\u0007#\u0002\u0002",
    "\u01cc\u01de\u0003\u0002\u0002\u0002\u01cd\u01ce\u0007w\u0002\u0002",
    "\u01ce\u01cf\u0005\u0004\u0003\u0002\u01cf\u01d0\u0007#\u0002\u0002",
    "\u01d0\u01de\u0003\u0002\u0002\u0002\u01d1\u01d2\u0007}\u0002\u0002",
    "\u01d2\u01d3\u0005\u0004\u0003\u0002\u01d3\u01d4\u0007#\u0002\u0002",
    "\u01d4\u01de\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007t\u0002\u0002",
    "\u01d6\u01d7\u0005\u0004\u0003\u0002\u01d7\u01d8\u0007#\u0002\u0002",
    "\u01d8\u01de\u0003\u0002\u0002\u0002\u01d9\u01da\u0007m\u0002\u0002",
    "\u01da\u01db\u0005\u0004\u0003\u0002\u01db\u01dc\u0007#\u0002\u0002",
    "\u01dc\u01de\u0003\u0002\u0002\u0002\u01dd\u01b9\u0003\u0002\u0002\u0002",
    "\u01dd\u01bd\u0003\u0002\u0002\u0002\u01dd\u01c1\u0003\u0002\u0002\u0002",
    "\u01dd\u01c5\u0003\u0002\u0002\u0002\u01dd\u01c9\u0003\u0002\u0002\u0002",
    "\u01dd\u01cd\u0003\u0002\u0002\u0002\u01dd\u01d1\u0003\u0002\u0002\u0002",
    "\u01dd\u01d5\u0003\u0002\u0002\u0002\u01dd\u01d9\u0003\u0002\u0002\u0002",
    "\u01de\'\u0003\u0002\u0002\u0002\u01df\u01e0\u0007i\u0002\u0002\u01e0",
    "\u01e1\u0005\u0004\u0003\u0002\u01e1\u01e2\u0007\u001f\u0002\u0002\u01e2",
    "\u01e3\u0005\u0004\u0003\u0002\u01e3\u01e4\u0007#\u0002\u0002\u01e4",
    "\u0226\u0003\u0002\u0002\u0002\u01e5\u01e6\u0007j\u0002\u0002\u01e6",
    "\u01e7\u0005\u0004\u0003\u0002\u01e7\u01e8\u0007#\u0002\u0002\u01e8",
    "\u0226\u0003\u0002\u0002\u0002\u01e9\u01ea\u0007k\u0002\u0002\u01ea",
    "\u01eb\u0005\u0004\u0003\u0002\u01eb\u01ec\u0007#\u0002\u0002\u01ec",
    "\u0226\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007l\u0002\u0002\u01ee",
    "\u01ef\u0005\u0004\u0003\u0002\u01ef\u01f0\u0007\u001f\u0002\u0002\u01f0",
    "\u01f1\u0005\u0004\u0003\u0002\u01f1\u01f2\u0007#\u0002\u0002\u01f2",
    "\u0226\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007o\u0002\u0002\u01f4",
    "\u01f5\u0005\u0004\u0003\u0002\u01f5\u01f6\u0007\u001f\u0002\u0002\u01f6",
    "\u01f7\u0005\u0004\u0003\u0002\u01f7\u01f8\u0007#\u0002\u0002\u01f8",
    "\u0226\u0003\u0002\u0002\u0002\u01f9\u01fa\u0007p\u0002\u0002\u01fa",
    "\u01fb\u0005\u0004\u0003\u0002\u01fb\u01fc\u0007\u001f\u0002\u0002\u01fc",
    "\u01fd\u0005\u0004\u0003\u0002\u01fd\u01fe\u0007#\u0002\u0002\u01fe",
    "\u0226\u0003\u0002\u0002\u0002\u01ff\u0200\u0007p\u0002\u0002\u0200",
    "\u0201\u0005\u0004\u0003\u0002\u0201\u0202\u0007\u001f\u0002\u0002\u0202",
    "\u0203\u0005\u0004\u0003\u0002\u0203\u0204\u0007\u001f\u0002\u0002\u0204",
    "\u0205\u0005\u0004\u0003\u0002\u0205\u0206\u0007#\u0002\u0002\u0206",
    "\u0226\u0003\u0002\u0002\u0002\u0207\u0208\u0007p\u0002\u0002\u0208",
    "\u0209\u0005\u0004\u0003\u0002\u0209\u020a\u0007\u001f\u0002\u0002\u020a",
    "\u020b\u0005\u0004\u0003\u0002\u020b\u020c\u0007\u001f\u0002\u0002\u020c",
    "\u020d\u0005\u0004\u0003\u0002\u020d\u020e\u0007\u001f\u0002\u0002\u020e",
    "\u020f\u0005\u0004\u0003\u0002\u020f\u0210\u0007#\u0002\u0002\u0210",
    "\u0226\u0003\u0002\u0002\u0002\u0211\u0212\u0007q\u0002\u0002\u0212",
    "\u0213\u0005\u0004\u0003\u0002\u0213\u0214\u0007#\u0002\u0002\u0214",
    "\u0226\u0003\u0002\u0002\u0002\u0215\u0216\u0007r\u0002\u0002\u0216",
    "\u0217\u0005\u0004\u0003\u0002\u0217\u0218\u0007#\u0002\u0002\u0218",
    "\u0226\u0003\u0002\u0002\u0002\u0219\u021a\u0007s\u0002\u0002\u021a",
    "\u021b\u0005\u0004\u0003\u0002\u021b\u021c\u0007#\u0002\u0002\u021c",
    "\u0226\u0003\u0002\u0002\u0002\u021d\u021e\u0007u\u0002\u0002\u021e",
    "\u021f\u0005\u0004\u0003\u0002\u021f\u0220\u0007#\u0002\u0002\u0220",
    "\u0226\u0003\u0002\u0002\u0002\u0221\u0222\u0007v\u0002\u0002\u0222",
    "\u0223\u0005\u0004\u0003\u0002\u0223\u0224\u0007#\u0002\u0002\u0224",
    "\u0226\u0003\u0002\u0002\u0002\u0225\u01df\u0003\u0002\u0002\u0002\u0225",
    "\u01e5\u0003\u0002\u0002\u0002\u0225\u01e9\u0003\u0002\u0002\u0002\u0225",
    "\u01ed\u0003\u0002\u0002\u0002\u0225\u01f3\u0003\u0002\u0002\u0002\u0225",
    "\u01f9\u0003\u0002\u0002\u0002\u0225\u01ff\u0003\u0002\u0002\u0002\u0225",
    "\u0207\u0003\u0002\u0002\u0002\u0225\u0211\u0003\u0002\u0002\u0002\u0225",
    "\u0215\u0003\u0002\u0002\u0002\u0225\u0219\u0003\u0002\u0002\u0002\u0225",
    "\u021d\u0003\u0002\u0002\u0002\u0225\u0221\u0003\u0002\u0002\u0002\u0226",
    ")\u0003\u0002\u0002\u0002\u0227\u0228\u0007.\u0002\u0002\u0228\u0229",
    "\u0005\u0004\u0003\u0002\u0229\u022a\u0007#\u0002\u0002\u022a\u0326",
    "\u0003\u0002\u0002\u0002\u022b\u022c\u0007/\u0002\u0002\u022c\u022d",
    "\u0005\u0004\u0003\u0002\u022d\u022e\u0007#\u0002\u0002\u022e\u0326",
    "\u0003\u0002\u0002\u0002\u022f\u0230\u00070\u0002\u0002\u0230\u0231",
    "\u0005\u0004\u0003\u0002\u0231\u0232\u0007#\u0002\u0002\u0232\u0326",
    "\u0003\u0002\u0002\u0002\u0233\u0234\u00071\u0002\u0002\u0234\u0235",
    "\u0005\u0004\u0003\u0002\u0235\u0236\u0007#\u0002\u0002\u0236\u0326",
    "\u0003\u0002\u0002\u0002\u0237\u0238\u00072\u0002\u0002\u0238\u0239",
    "\u0005\u0004\u0003\u0002\u0239\u023a\u0007#\u0002\u0002\u023a\u0326",
    "\u0003\u0002\u0002\u0002\u023b\u023c\u00073\u0002\u0002\u023c\u023d",
    "\u0005\u0004\u0003\u0002\u023d\u023e\u0007#\u0002\u0002\u023e\u0326",
    "\u0003\u0002\u0002\u0002\u023f\u0240\u00074\u0002\u0002\u0240\u0241",
    "\u0005\u0004\u0003\u0002\u0241\u0242\u0007\u001f\u0002\u0002\u0242\u0243",
    "\u0005\u0004\u0003\u0002\u0243\u0244\u0007#\u0002\u0002\u0244\u0326",
    "\u0003\u0002\u0002\u0002\u0245\u0246\u00075\u0002\u0002\u0246\u0247",
    "\u0005\u0004\u0003\u0002\u0247\u0248\u0007#\u0002\u0002\u0248\u0326",
    "\u0003\u0002\u0002\u0002\u0249\u024a\u00076\u0002\u0002\u024a\u024b",
    "\u0005\u0004\u0003\u0002\u024b\u024c\u0007#\u0002\u0002\u024c\u0326",
    "\u0003\u0002\u0002\u0002\u024d\u024e\u00077\u0002\u0002\u024e\u024f",
    "\u0005\u0004\u0003\u0002\u024f\u0250\u0007#\u0002\u0002\u0250\u0326",
    "\u0003\u0002\u0002\u0002\u0251\u0252\u00078\u0002\u0002\u0252\u0253",
    "\u0005\u0004\u0003\u0002\u0253\u0254\u0007#\u0002\u0002\u0254\u0326",
    "\u0003\u0002\u0002\u0002\u0255\u0256\u00079\u0002\u0002\u0256\u0257",
    "\u0005\u0004\u0003\u0002\u0257\u0258\u0007#\u0002\u0002\u0258\u0326",
    "\u0003\u0002\u0002\u0002\u0259\u025a\u0007:\u0002\u0002\u025a\u025b",
    "\u0005\u0004\u0003\u0002\u025b\u025c\u0007\u001f\u0002\u0002\u025c\u025d",
    "\u0005\u0004\u0003\u0002\u025d\u025e\u0007\u001f\u0002\u0002\u025e\u025f",
    "\u0005\u0004\u0003\u0002\u025f\u0260\u0007#\u0002\u0002\u0260\u0326",
    "\u0003\u0002\u0002\u0002\u0261\u0262\u0007;\u0002\u0002\u0262\u0263",
    "\u0005\u0004\u0003\u0002\u0263\u0264\u0007#\u0002\u0002\u0264\u0326",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0007<\u0002\u0002\u0266\u0267",
    "\u0005\u0004\u0003\u0002\u0267\u0268\u0007\u001f\u0002\u0002\u0268\u0269",
    "\u0005\u0004\u0003\u0002\u0269\u026a\u0007\u001f\u0002\u0002\u026a\u026b",
    "\u0005\u0004\u0003\u0002\u026b\u026c\u0007#\u0002\u0002\u026c\u0326",
    "\u0003\u0002\u0002\u0002\u026d\u026e\u0007=\u0002\u0002\u026e\u026f",
    "\u0005\u0004\u0003\u0002\u026f\u0270\u0007#\u0002\u0002\u0270\u0326",
    "\u0003\u0002\u0002\u0002\u0271\u0272\u0007>\u0002\u0002\u0272\u0273",
    "\u0005\u0004\u0003\u0002\u0273\u0274\u0007#\u0002\u0002\u0274\u0326",
    "\u0003\u0002\u0002\u0002\u0275\u0276\u0007?\u0002\u0002\u0276\u0277",
    "\u0005\u0004\u0003\u0002\u0277\u0278\u0007\u001f\u0002\u0002\u0278\u0279",
    "\u0005\u0004\u0003\u0002\u0279\u027a\u0007\u001f\u0002\u0002\u027a\u027b",
    "\u0005\u0004\u0003\u0002\u027b\u027c\u0007\u001f\u0002\u0002\u027c\u027d",
    "\u0005\u0004\u0003\u0002\u027d\u027e\u0007#\u0002\u0002\u027e\u0326",
    "\u0003\u0002\u0002\u0002\u027f\u0280\u0007@\u0002\u0002\u0280\u0281",
    "\u0005\u0004\u0003\u0002\u0281\u0282\u0007\u001f\u0002\u0002\u0282\u0283",
    "\u0005\u0004\u0003\u0002\u0283\u0284\u0007#\u0002\u0002\u0284\u0326",
    "\u0003\u0002\u0002\u0002\u0285\u0286\u0007A\u0002\u0002\u0286\u0287",
    "\u0005\u0004\u0003\u0002\u0287\u0288\u0007#\u0002\u0002\u0288\u0326",
    "\u0003\u0002\u0002\u0002\u0289\u028a\u0007B\u0002\u0002\u028a\u028b",
    "\u0005\u0004\u0003\u0002\u028b\u028c\u0007#\u0002\u0002\u028c\u0326",
    "\u0003\u0002\u0002\u0002\u028d\u028e\u0007C\u0002\u0002\u028e\u028f",
    "\u0005\u0004\u0003\u0002\u028f\u0290\u0007#\u0002\u0002\u0290\u0326",
    "\u0003\u0002\u0002\u0002\u0291\u0292\u0007C\u0002\u0002\u0292\u0293",
    "\u0005\u0004\u0003\u0002\u0293\u0294\u0007\u001f\u0002\u0002\u0294\u0295",
    "\u0005\u0004\u0003\u0002\u0295\u0296\u0007#\u0002\u0002\u0296\u0326",
    "\u0003\u0002\u0002\u0002\u0297\u0298\u0007D\u0002\u0002\u0298\u0299",
    "\u0005\u0004\u0003\u0002\u0299\u029a\u0007#\u0002\u0002\u029a\u0326",
    "\u0003\u0002\u0002\u0002\u029b\u029c\u0007D\u0002\u0002\u029c\u029d",
    "\u0005\u0004\u0003\u0002\u029d\u029e\u0007\u001f\u0002\u0002\u029e\u029f",
    "\u0005\u0004\u0003\u0002\u029f\u02a0\u0007#\u0002\u0002\u02a0\u0326",
    "\u0003\u0002\u0002\u0002\u02a1\u02a2\u0007E\u0002\u0002\u02a2\u02a3",
    "\u0005\u0004\u0003\u0002\u02a3\u02a4\u0007\u001f\u0002\u0002\u02a4\u02a5",
    "\u0005\u0004\u0003\u0002\u02a5\u02a6\u0007#\u0002\u0002\u02a6\u0326",
    "\u0003\u0002\u0002\u0002\u02a7\u02a8\u0007F\u0002\u0002\u02a8\u02a9",
    "\u0005\u0004\u0003\u0002\u02a9\u02aa\u0007#\u0002\u0002\u02aa\u0326",
    "\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007F\u0002\u0002\u02ac\u02ad",
    "\u0005\u0004\u0003\u0002\u02ad\u02ae\u0007\u001f\u0002\u0002\u02ae\u02af",
    "\u0005\u0004\u0003\u0002\u02af\u02b0\u0007#\u0002\u0002\u02b0\u0326",
    "\u0003\u0002\u0002\u0002\u02b1\u02b2\u0007G\u0002\u0002\u02b2\u02b3",
    "\u0005\u0004\u0003\u0002\u02b3\u02b4\u0007\u001f\u0002\u0002\u02b4\u02b5",
    "\u0005\u0004\u0003\u0002\u02b5\u02b6\u0007#\u0002\u0002\u02b6\u0326",
    "\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007H\u0002\u0002\u02b8\u02b9",
    "\u0005\u0004\u0003\u0002\u02b9\u02ba\u0007#\u0002\u0002\u02ba\u0326",
    "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0007I\u0002\u0002\u02bc\u02bd",
    "\u0005\u0004\u0003\u0002\u02bd\u02be\u0007#\u0002\u0002\u02be\u0326",
    "\u0003\u0002\u0002\u0002\u02bf\u02c0\u0007J\u0002\u0002\u02c0\u02c1",
    "\u0005\u0004\u0003\u0002\u02c1\u02c2\u0007#\u0002\u0002\u02c2\u0326",
    "\u0003\u0002\u0002\u0002\u02c3\u02c4\u0007K\u0002\u0002\u02c4\u02c5",
    "\u0005\u0004\u0003\u0002\u02c5\u02c6\u0007#\u0002\u0002\u02c6\u0326",
    "\u0003\u0002\u0002\u0002\u02c7\u02c8\u0007L\u0002\u0002\u02c8\u02c9",
    "\u0005\u0004\u0003\u0002\u02c9\u02ca\u0007#\u0002\u0002\u02ca\u0326",
    "\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007M\u0002\u0002\u02cc\u02cd",
    "\u0005\u0004\u0003\u0002\u02cd\u02ce\u0007#\u0002\u0002\u02ce\u0326",
    "\u0003\u0002\u0002\u0002\u02cf\u02d0\u0007N\u0002\u0002\u02d0\u02d1",
    "\u0005\u0004\u0003\u0002\u02d1\u02d2\u0007\u001f\u0002\u0002\u02d2\u02d3",
    "\u0005\u0004\u0003\u0002\u02d3\u02d4\u0007#\u0002\u0002\u02d4\u0326",
    "\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007O\u0002\u0002\u02d6\u02d7",
    "\u0005\u0004\u0003\u0002\u02d7\u02d8\u0007#\u0002\u0002\u02d8\u0326",
    "\u0003\u0002\u0002\u0002\u02d9\u02da\u0007P\u0002\u0002\u02da\u02db",
    "\u0005\u0004\u0003\u0002\u02db\u02dc\u0007#\u0002\u0002\u02dc\u0326",
    "\u0003\u0002\u0002\u0002\u02dd\u02de\u0007Q\u0002\u0002\u02de\u02df",
    "\u0005\u0004\u0003\u0002\u02df\u02e0\u0007\u001f\u0002\u0002\u02e0\u02e1",
    "\u0005\u0004\u0003\u0002\u02e1\u02e2\u0007#\u0002\u0002\u02e2\u0326",
    "\u0003\u0002\u0002\u0002\u02e3\u02e4\u0007R\u0002\u0002\u02e4\u02e5",
    "\u0005\u0004\u0003\u0002\u02e5\u02e6\u0007\u001f\u0002\u0002\u02e6\u02e7",
    "\u0005\u0004\u0003\u0002\u02e7\u02e8\u0007#\u0002\u0002\u02e8\u0326",
    "\u0003\u0002\u0002\u0002\u02e9\u02ea\u0007S\u0002\u0002\u02ea\u02eb",
    "\u0005\u0004\u0003\u0002\u02eb\u02ec\u0007\u001f\u0002\u0002\u02ec\u02ed",
    "\u0005\u0004\u0003\u0002\u02ed\u02ee\u0007#\u0002\u0002\u02ee\u0326",
    "\u0003\u0002\u0002\u0002\u02ef\u02f0\u0007T\u0002\u0002\u02f0\u02f1",
    "\u0005\u0004\u0003\u0002\u02f1\u02f2\u0007\u001f\u0002\u0002\u02f2\u02f3",
    "\u0005\u0004\u0003\u0002\u02f3\u02f4\u0007#\u0002\u0002\u02f4\u0326",
    "\u0003\u0002\u0002\u0002\u02f5\u02f6\u0007U\u0002\u0002\u02f6\u02f7",
    "\u0005\u0004\u0003\u0002\u02f7\u02f8\u0007#\u0002\u0002\u02f8\u0326",
    "\u0003\u0002\u0002\u0002\u02f9\u02fa\u0007V\u0002\u0002\u02fa\u02fb",
    "\u0005\u0004\u0003\u0002\u02fb\u02fc\u0007#\u0002\u0002\u02fc\u0326",
    "\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007W\u0002\u0002\u02fe\u02ff",
    "\u0005\u0004\u0003\u0002\u02ff\u0300\u0007#\u0002\u0002\u0300\u0326",
    "\u0003\u0002\u0002\u0002\u0301\u0302\u0007X\u0002\u0002\u0302\u0303",
    "\u0005\u0004\u0003\u0002\u0303\u0304\u0007#\u0002\u0002\u0304\u0326",
    "\u0003\u0002\u0002\u0002\u0305\u0306\u0007Y\u0002\u0002\u0306\u0307",
    "\u0005\u0004\u0003\u0002\u0307\u0308\u0007#\u0002\u0002\u0308\u0326",
    "\u0003\u0002\u0002\u0002\u0309\u030a\u0007Z\u0002\u0002\u030a\u030b",
    "\u0005\u0004\u0003\u0002\u030b\u030c\u0007#\u0002\u0002\u030c\u0326",
    "\u0003\u0002\u0002\u0002\u030d\u030e\u0007[\u0002\u0002\u030e\u030f",
    "\u0005\u0004\u0003\u0002\u030f\u0310\u0007#\u0002\u0002\u0310\u0326",
    "\u0003\u0002\u0002\u0002\u0311\u0312\u0007\\\u0002\u0002\u0312\u0313",
    "\u0005\u0004\u0003\u0002\u0313\u0314\u0007#\u0002\u0002\u0314\u0326",
    "\u0003\u0002\u0002\u0002\u0315\u0316\u0007]\u0002\u0002\u0316\u0317",
    "\u0005\u0004\u0003\u0002\u0317\u0318\u0007#\u0002\u0002\u0318\u0326",
    "\u0003\u0002\u0002\u0002\u0319\u031a\u0007^\u0002\u0002\u031a\u031b",
    "\u0005\u0004\u0003\u0002\u031b\u031c\u0007#\u0002\u0002\u031c\u0326",
    "\u0003\u0002\u0002\u0002\u031d\u031e\u0007_\u0002\u0002\u031e\u031f",
    "\u0005\u0004\u0003\u0002\u031f\u0320\u0007#\u0002\u0002\u0320\u0326",
    "\u0003\u0002\u0002\u0002\u0321\u0322\u0007`\u0002\u0002\u0322\u0323",
    "\u0005\u0004\u0003\u0002\u0323\u0324\u0007#\u0002\u0002\u0324\u0326",
    "\u0003\u0002\u0002\u0002\u0325\u0227\u0003\u0002\u0002\u0002\u0325\u022b",
    "\u0003\u0002\u0002\u0002\u0325\u022f\u0003\u0002\u0002\u0002\u0325\u0233",
    "\u0003\u0002\u0002\u0002\u0325\u0237\u0003\u0002\u0002\u0002\u0325\u023b",
    "\u0003\u0002\u0002\u0002\u0325\u023f\u0003\u0002\u0002\u0002\u0325\u0245",
    "\u0003\u0002\u0002\u0002\u0325\u0249\u0003\u0002\u0002\u0002\u0325\u024d",
    "\u0003\u0002\u0002\u0002\u0325\u0251\u0003\u0002\u0002\u0002\u0325\u0255",
    "\u0003\u0002\u0002\u0002\u0325\u0259\u0003\u0002\u0002\u0002\u0325\u0261",
    "\u0003\u0002\u0002\u0002\u0325\u0265\u0003\u0002\u0002\u0002\u0325\u026d",
    "\u0003\u0002\u0002\u0002\u0325\u0271\u0003\u0002\u0002\u0002\u0325\u0275",
    "\u0003\u0002\u0002\u0002\u0325\u027f\u0003\u0002\u0002\u0002\u0325\u0285",
    "\u0003\u0002\u0002\u0002\u0325\u0289\u0003\u0002\u0002\u0002\u0325\u028d",
    "\u0003\u0002\u0002\u0002\u0325\u0291\u0003\u0002\u0002\u0002\u0325\u0297",
    "\u0003\u0002\u0002\u0002\u0325\u029b\u0003\u0002\u0002\u0002\u0325\u02a1",
    "\u0003\u0002\u0002\u0002\u0325\u02a7\u0003\u0002\u0002\u0002\u0325\u02ab",
    "\u0003\u0002\u0002\u0002\u0325\u02b1\u0003\u0002\u0002\u0002\u0325\u02b7",
    "\u0003\u0002\u0002\u0002\u0325\u02bb\u0003\u0002\u0002\u0002\u0325\u02bf",
    "\u0003\u0002\u0002\u0002\u0325\u02c3\u0003\u0002\u0002\u0002\u0325\u02c7",
    "\u0003\u0002\u0002\u0002\u0325\u02cb\u0003\u0002\u0002\u0002\u0325\u02cf",
    "\u0003\u0002\u0002\u0002\u0325\u02d5\u0003\u0002\u0002\u0002\u0325\u02d9",
    "\u0003\u0002\u0002\u0002\u0325\u02dd\u0003\u0002\u0002\u0002\u0325\u02e3",
    "\u0003\u0002\u0002\u0002\u0325\u02e9\u0003\u0002\u0002\u0002\u0325\u02ef",
    "\u0003\u0002\u0002\u0002\u0325\u02f5\u0003\u0002\u0002\u0002\u0325\u02f9",
    "\u0003\u0002\u0002\u0002\u0325\u02fd\u0003\u0002\u0002\u0002\u0325\u0301",
    "\u0003\u0002\u0002\u0002\u0325\u0305\u0003\u0002\u0002\u0002\u0325\u0309",
    "\u0003\u0002\u0002\u0002\u0325\u030d\u0003\u0002\u0002\u0002\u0325\u0311",
    "\u0003\u0002\u0002\u0002\u0325\u0315\u0003\u0002\u0002\u0002\u0325\u0319",
    "\u0003\u0002\u0002\u0002\u0325\u031d\u0003\u0002\u0002\u0002\u0325\u0321",
    "\u0003\u0002\u0002\u0002\u0326+\u0003\u0002\u0002\u0002\u0327\u0328",
    "\u0007a\u0002\u0002\u0328\u0329\u0005\u0004\u0003\u0002\u0329\u032a",
    "\u0007\u001f\u0002\u0002\u032a\u032b\u0005\u0004\u0003\u0002\u032b\u032c",
    "\u0007#\u0002\u0002\u032c\u0350\u0003\u0002\u0002\u0002\u032d\u032e",
    "\u0007b\u0002\u0002\u032e\u032f\u0005\u0004\u0003\u0002\u032f\u0330",
    "\u0007#\u0002\u0002\u0330\u0350\u0003\u0002\u0002\u0002\u0331\u0332",
    "\u0007c\u0002\u0002\u0332\u0333\u0005\u0004\u0003\u0002\u0333\u0334",
    "\u0007#\u0002\u0002\u0334\u0350\u0003\u0002\u0002\u0002\u0335\u0336",
    "\u0007d\u0002\u0002\u0336\u0337\u0005\u0004\u0003\u0002\u0337\u0338",
    "\u0007\u001f\u0002\u0002\u0338\u0339\u0005\u0004\u0003\u0002\u0339\u033a",
    "\u0007#\u0002\u0002\u033a\u0350\u0003\u0002\u0002\u0002\u033b\u033c",
    "\u0007e\u0002\u0002\u033c\u033d\u0005\u0004\u0003\u0002\u033d\u033e",
    "\u0007\u001f\u0002\u0002\u033e\u033f\u0005\u0004\u0003\u0002\u033f\u0340",
    "\u0007#\u0002\u0002\u0340\u0350\u0003\u0002\u0002\u0002\u0341\u0342",
    "\u0007f\u0002\u0002\u0342\u0343\u0005\u0004\u0003\u0002\u0343\u0344",
    "\u0007\u001f\u0002\u0002\u0344\u0345\u0005\u0004\u0003\u0002\u0345\u0346",
    "\u0007#\u0002\u0002\u0346\u0350\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0007g\u0002\u0002\u0348\u0349\u0005\u0004\u0003\u0002\u0349\u034a",
    "\u0007#\u0002\u0002\u034a\u0350\u0003\u0002\u0002\u0002\u034b\u034c",
    "\u0007h\u0002\u0002\u034c\u034d\u0005\u0004\u0003\u0002\u034d\u034e",
    "\u0007#\u0002\u0002\u034e\u0350\u0003\u0002\u0002\u0002\u034f\u0327",
    "\u0003\u0002\u0002\u0002\u034f\u032d\u0003\u0002\u0002\u0002\u034f\u0331",
    "\u0003\u0002\u0002\u0002\u034f\u0335\u0003\u0002\u0002\u0002\u034f\u033b",
    "\u0003\u0002\u0002\u0002\u034f\u0341\u0003\u0002\u0002\u0002\u034f\u0347",
    "\u0003\u0002\u0002\u0002\u034f\u034b\u0003\u0002\u0002\u0002\u0350-",
    "\u0003\u0002\u0002\u0002\u0351\u0357\u0005\u0004\u0003\u0002\u0352\u0353",
    "\u0005\u0004\u0003\u0002\u0353\u0354\u0007\u001f\u0002\u0002\u0354\u0355",
    "\u0005.\u0018\u0002\u0355\u0357\u0003\u0002\u0002\u0002\u0356\u0351",
    "\u0003\u0002\u0002\u0002\u0356\u0352\u0003\u0002\u0002\u0002\u0357/",
    "\u0003\u0002\u0002\u0002\u0358\u0359\u0007$\u0002\u0002\u0359\u035f",
    "\u0007%\u0002\u0002\u035a\u035b\u0007$\u0002\u0002\u035b\u035c\u0005",
    ".\u0018\u0002\u035c\u035d\u0007%\u0002\u0002\u035d\u035f\u0003\u0002",
    "\u0002\u0002\u035e\u0358\u0003\u0002\u0002\u0002\u035e\u035a\u0003\u0002",
    "\u0002\u0002\u035f1\u0003\u0002\u0002\u0002\u001c@GNU_xz\u008c\u008e",
    "\u0099\u00a4\u00b0\u00b2\u00cd\u00cf\u00ef\u0119\u0143\u0185\u01b7\u01dd",
    "\u0225\u0325\u034f\u0356\u035e"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class EveryGrammarParser extends antlr4.Parser {

    static grammarFileName = "EveryGrammar.g4";
    static literalNames = [ null, "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", 
                            "'^'", "'=='", "'=i'", "'not'", "'!='", "'!=i'", 
                            "'||'", "'&&'", "'|'", "'&'", "'>'", "'>='", 
                            "'<'", "'<='", "'~'", "':'", "'?'", "'//'", 
                            "'<<'", "'>>'", "'in'", "'!'", "','", "'true'", 
                            "'false'", "'('", "')'", "'['", "']'", null, 
                            null, null, null, null, null, "'e'", "'pi'", 
                            "'Abs('", "'ACos('", "'ACosH('", "'ASin('", 
                            "'ASinH('", "'ATan('", "'ATan2('", "'ATanH('", 
                            "'Cbrt('", "'Cos('", "'CosH('", "'Ceilling('", 
                            "'Clamp('", "'CrossSum('", "'Derivative('", 
                            "'Exp('", "'Floor('", "'Integration('", "'Log('", 
                            "'Log2('", "'Log10('", "'Max('", "'Min('", "'Pow('", 
                            "'Round('", "'Root('", "'Sin('", "'SinH('", 
                            "'Sqrt('", "'Tan('", "'TanH('", "'Truncate('", 
                            "'Norm('", "'EulerNorm('", "'MaxNorm('", "'Gcd('", 
                            "'Lcm('", "'DotProduct('", "'Binomial('", "'ACot('", 
                            "'ACotH('", "'ACsc('", "'ACscH('", "'ASec('", 
                            "'ASecH('", "'Cot('", "'CotH('", "'Csc('", "'CscH('", 
                            "'Sec('", "'SecH('", "'CoVariance('", "'Mean('", 
                            "'Median('", "'Pearson('", "'Quantil('", "'Spearman('", 
                            "'Std('", "'Variance('", "'Concat('", "'Count('", 
                            "'Distinct('", "'Difference('", "'HasDuplicates('", 
                            "'DateTime('", "'Except('", "'IndexOf('", "'Lower('", 
                            "'Reverse('", "'Upper('", "'HasAny('", "'Sort('", 
                            "'Trim('", "'IsString('", "'IsNumber('", "'IsBoolean('", 
                            "'IsDatetime('", "'IsArray('", "'IsNull('", 
                            "'IsWhitespace('", "'ToNumber('", "'ToString('", 
                            "'ToBoolean('", "'ToArray('", "'DegreeToGrad('", 
                            "'DegreeToRadian('", "'GradToDegree('", "'GradToRadian('", 
                            "'RadianToDegree('", "'RadianToGrad('", "'RndDecimal('", 
                            "'RndInteger('" ];
    static symbolicNames = [ null, "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
                             "MODULO", "POWEROPERATOR", "BOOLXOR", "EQUAL", 
                             "EQUAL_IGNORECASE", "NOT", "NOTEQUAL", "NOTEQUAL_IGNORECASE", 
                             "BOOLOR", "BOOLAND", "BITOR", "BITAND", "GREATER", 
                             "GREATEREQUAL", "LOWER", "LOWEREQUAL", "TILDE", 
                             "COLON", "QUESTIONMARK", "INTEGERDIVISION", 
                             "BITSHIFTLEFT", "BITSHIFTRIGHT", "CONTAINS", 
                             "FACTORIAL", "KOMMA", "TRUE", "FALSE", "ROUNDBRACKETOPEN", 
                             "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", "EDGEBRACKETCLOSED", 
                             "DOUBLE", "STRING", "VARIABLE", "OBJECTSVARIABLE", 
                             "INT", "ALPHA", "E", "PI", "Abs", "ACos", "ACosH", 
                             "ASin", "ASinH", "ATan", "ATan2", "ATanH", 
                             "Cbrt", "Cos", "CosH", "Ceilling", "Clamp", 
                             "CrossSum", "Derivative", "Exp", "Floor", "Integration", 
                             "Log", "Log2", "Log10", "Max", "Min", "Power", 
                             "Round", "Root", "Sin", "SinH", "Sqrt", "Tan", 
                             "TanH", "Truncate", "Norm", "EulerNorm", "MaxNorm", 
                             "GreatestCommonDivisor", "LeastCommonMultiple", 
                             "DotProduct", "Binomial", "ACot", "ACotH", 
                             "ACsc", "ACscH", "ASec", "ASecH", "Cot", "CotH", 
                             "Csc", "CscH", "Sec", "SecH", "CoVariance", 
                             "Mean", "Median", "Pearson", "Quantil", "Spearman", 
                             "Std", "Variance", "Concat", "Count", "Distinct", 
                             "Difference", "HasDuplicates", "DateTime", 
                             "Except", "IndexOf", "LowerCase", "Reverse", 
                             "UpperCase", "HasAny", "Sort", "Trim", "IsString", 
                             "IsNumber", "IsBoolean", "IsDateTime", "IsArray", 
                             "IsNull", "IsWhitespace", "ToNumber", "ToString", 
                             "ToBoolean", "ToArray", "DegreeToGrad", "DegreeToRadian", 
                             "GradToDegree", "GradToRadian", "RadianToDegree", 
                             "RadianToGrad", "RndDecimal", "RndInteger" ];
    static ruleNames = [ "startRule", "expression", "if_else", "inner_if_else", 
                         "bool_or_term", "bool_xor_term", "bool_and_term", 
                         "equality", "check", "bit_or_term", "bit_and_term", 
                         "line_term", "point_term", "factor", "random_function_term", 
                         "convert_function_term", "datetime_term", "array_slicing_term", 
                         "check_function_term", "default_function_term", 
                         "math_function_term", "statistic_math_function_term", 
                         "expr_args", "array_expr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = EveryGrammarParser.ruleNames;
        this.literalNames = EveryGrammarParser.literalNames;
        this.symbolicNames = EveryGrammarParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 6:
    	    		return this.bool_and_term_sempred(localctx, predIndex);
    	case 7:
    	    		return this.equality_sempred(localctx, predIndex);
    	case 8:
    	    		return this.check_sempred(localctx, predIndex);
    	case 9:
    	    		return this.bit_or_term_sempred(localctx, predIndex);
    	case 10:
    	    		return this.bit_and_term_sempred(localctx, predIndex);
    	case 11:
    	    		return this.line_term_sempred(localctx, predIndex);
    	case 12:
    	    		return this.point_term_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    bool_and_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    equality_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 6);
    		case 2:
    			return this.precpred(this._ctx, 5);
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    check_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 4);
    		case 8:
    			return this.precpred(this._ctx, 3);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bit_or_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bit_and_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 12:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    line_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    point_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 7);
    		case 16:
    			return this.precpred(this._ctx, 6);
    		case 17:
    			return this.precpred(this._ctx, 5);
    		case 18:
    			return this.precpred(this._ctx, 4);
    		case 19:
    			return this.precpred(this._ctx, 3);
    		case 20:
    			return this.precpred(this._ctx, 2);
    		case 21:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	startRule() {
	    let localctx = new StartRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, EveryGrammarParser.RULE_startRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 48;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, EveryGrammarParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 50;
	        this.if_else();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_else() {
	    let localctx = new If_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, EveryGrammarParser.RULE_if_else);
	    try {
	        this.state = 62;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new IfElse_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 52;
	            this.inner_if_else();
	            break;

	        case 2:
	            localctx = new ArraySlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 53;
	            this.inner_if_else();
	            this.state = 54;
	            this.array_slicing_term();
	            break;

	        case 3:
	            localctx = new IfElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 56;
	            this.inner_if_else();
	            this.state = 57;
	            this.match(EveryGrammarParser.QUESTIONMARK);
	            this.state = 58;
	            this.inner_if_else();
	            this.state = 59;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 60;
	            this.inner_if_else();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inner_if_else() {
	    let localctx = new Inner_if_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, EveryGrammarParser.RULE_inner_if_else);
	    try {
	        this.state = 69;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InnerIfElse_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 64;
	            this.bool_or_term();
	            break;

	        case 2:
	            localctx = new InnerIfElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 65;
	            this.match(EveryGrammarParser.ROUNDBRACKETOPEN);
	            this.state = 66;
	            this.if_else();
	            this.state = 67;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool_or_term() {
	    let localctx = new Bool_or_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, EveryGrammarParser.RULE_bool_or_term);
	    try {
	        this.state = 76;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new BoolOr_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 71;
	            this.bool_xor_term();
	            break;

	        case 2:
	            localctx = new BoolOrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 72;
	            this.bool_xor_term();
	            this.state = 73;
	            this.match(EveryGrammarParser.BOOLOR);
	            this.state = 74;
	            this.bool_xor_term();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool_xor_term() {
	    let localctx = new Bool_xor_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, EveryGrammarParser.RULE_bool_xor_term);
	    try {
	        this.state = 83;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new BoolXOr_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 78;
	            this.bool_and_term(0);
	            break;

	        case 2:
	            localctx = new BoolXOrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 79;
	            this.bool_and_term(0);
	            this.state = 80;
	            this.match(EveryGrammarParser.BOOLXOR);
	            this.state = 81;
	            this.bool_and_term(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bool_and_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bool_and_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 12;
	    this.enterRecursionRule(localctx, 12, EveryGrammarParser.RULE_bool_and_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BoolAnd_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 86;
	        this.equality(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 93;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BoolAndContext(this, new Bool_and_termContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_bool_and_term);
	                this.state = 88;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 89;
	                this.match(EveryGrammarParser.BOOLAND);
	                this.state = 90;
	                this.equality(0); 
	            }
	            this.state = 95;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	equality(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new EqualityContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 14;
	    this.enterRecursionRule(localctx, 14, EveryGrammarParser.RULE_equality, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Equality_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 97;
	        this.check(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 120;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 118;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Equality_EqualContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 99;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 100;
	                    this.match(EveryGrammarParser.EQUAL);
	                    this.state = 101;
	                    this.check(0);
	                    break;

	                case 2:
	                    localctx = new Equality_NotEqualContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 102;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 103;
	                    this.match(EveryGrammarParser.NOTEQUAL);
	                    this.state = 104;
	                    this.check(0);
	                    break;

	                case 3:
	                    localctx = new Equality_EqualIgnoreCaseContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 105;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 106;
	                    this.match(EveryGrammarParser.EQUAL_IGNORECASE);
	                    this.state = 107;
	                    this.check(0);
	                    break;

	                case 4:
	                    localctx = new Equality_NotEqualIgnoreCaseContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 108;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 109;
	                    this.match(EveryGrammarParser.NOTEQUAL_IGNORECASE);
	                    this.state = 110;
	                    this.check(0);
	                    break;

	                case 5:
	                    localctx = new Equality_ContainsContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 111;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 112;
	                    this.match(EveryGrammarParser.CONTAINS);
	                    this.state = 113;
	                    this.check(0);
	                    break;

	                case 6:
	                    localctx = new Equality_NotContainsContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 114;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 115;
	                    this.match(EveryGrammarParser.NOT);
	                    this.state = 116;
	                    this.match(EveryGrammarParser.CONTAINS);
	                    this.state = 117;
	                    this.check(0);
	                    break;

	                } 
	            }
	            this.state = 122;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	check(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CheckContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 16;
	    this.enterRecursionRule(localctx, 16, EveryGrammarParser.RULE_check, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Check_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 124;
	        this.bit_or_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 140;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 138;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Check_LowerContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 126;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 127;
	                    this.match(EveryGrammarParser.LOWER);
	                    this.state = 128;
	                    this.bit_or_term(0);
	                    break;

	                case 2:
	                    localctx = new Check_GreaterContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 129;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 130;
	                    this.match(EveryGrammarParser.GREATER);
	                    this.state = 131;
	                    this.bit_or_term(0);
	                    break;

	                case 3:
	                    localctx = new Check_LowerEqualContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 132;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 133;
	                    this.match(EveryGrammarParser.LOWEREQUAL);
	                    this.state = 134;
	                    this.bit_or_term(0);
	                    break;

	                case 4:
	                    localctx = new Check_GreaterEqualContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 135;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 136;
	                    this.match(EveryGrammarParser.GREATEREQUAL);
	                    this.state = 137;
	                    this.bit_or_term(0);
	                    break;

	                } 
	            }
	            this.state = 142;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bit_or_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bit_or_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 18;
	    this.enterRecursionRule(localctx, 18, EveryGrammarParser.RULE_bit_or_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BitOr_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 144;
	        this.bit_and_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 151;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BitORContext(this, new Bit_or_termContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_bit_or_term);
	                this.state = 146;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 147;
	                this.match(EveryGrammarParser.BITOR);
	                this.state = 148;
	                this.bit_and_term(0); 
	            }
	            this.state = 153;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bit_and_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bit_and_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 20;
	    this.enterRecursionRule(localctx, 20, EveryGrammarParser.RULE_bit_and_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BitAnd_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 155;
	        this.line_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 162;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BitAndContext(this, new Bit_and_termContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_bit_and_term);
	                this.state = 157;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 158;
	                this.match(EveryGrammarParser.BITAND);
	                this.state = 159;
	                this.line_term(0); 
	            }
	            this.state = 164;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	line_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Line_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 22;
	    this.enterRecursionRule(localctx, 22, EveryGrammarParser.RULE_line_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Line_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 166;
	        this.point_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 176;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 174;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Line_AdditionContext(this, new Line_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_line_term);
	                    this.state = 168;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 169;
	                    this.match(EveryGrammarParser.ADD);
	                    this.state = 170;
	                    this.point_term(0);
	                    break;

	                case 2:
	                    localctx = new Line_SubtractionContext(this, new Line_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_line_term);
	                    this.state = 171;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 172;
	                    this.match(EveryGrammarParser.SUBTRACT);
	                    this.state = 173;
	                    this.point_term(0);
	                    break;

	                } 
	            }
	            this.state = 178;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	point_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Point_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 24;
	    this.enterRecursionRule(localctx, 24, EveryGrammarParser.RULE_point_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PointTerm_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 180;
	        this.factor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 205;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 203;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PointTerm_MultiplyContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 182;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 183;
	                    this.match(EveryGrammarParser.MULTIPLY);
	                    this.state = 184;
	                    this.factor();
	                    break;

	                case 2:
	                    localctx = new PointTerm_PowerOperatorContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 185;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 186;
	                    this.match(EveryGrammarParser.POWEROPERATOR);
	                    this.state = 187;
	                    this.factor();
	                    break;

	                case 3:
	                    localctx = new PointTerm_ModuloContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 188;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 189;
	                    this.match(EveryGrammarParser.MODULO);
	                    this.state = 190;
	                    this.factor();
	                    break;

	                case 4:
	                    localctx = new PointTerm_BitShiftLeftContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 191;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 192;
	                    this.match(EveryGrammarParser.BITSHIFTLEFT);
	                    this.state = 193;
	                    this.factor();
	                    break;

	                case 5:
	                    localctx = new PointTerm_BitShiftRightContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 194;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 195;
	                    this.match(EveryGrammarParser.BITSHIFTRIGHT);
	                    this.state = 196;
	                    this.factor();
	                    break;

	                case 6:
	                    localctx = new PointTerm_DivideContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 197;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 198;
	                    this.match(EveryGrammarParser.DIVIDE);
	                    this.state = 199;
	                    this.factor();
	                    break;

	                case 7:
	                    localctx = new PointTerm_IntegerDivisionContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 200;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 201;
	                    this.match(EveryGrammarParser.INTEGERDIVISION);
	                    this.state = 202;
	                    this.factor();
	                    break;

	                } 
	            }
	            this.state = 207;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, EveryGrammarParser.RULE_factor);
	    try {
	        this.state = 237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.NOT:
	            localctx = new Factor_NotContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 208;
	            this.match(EveryGrammarParser.NOT);
	            this.state = 209;
	            this.factor();
	            break;
	        case EveryGrammarParser.SUBTRACT:
	            localctx = new Factor_MinusContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.match(EveryGrammarParser.SUBTRACT);
	            this.state = 211;
	            this.factor();
	            break;
	        case EveryGrammarParser.ADD:
	            localctx = new Factor_PlusContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 212;
	            this.match(EveryGrammarParser.ADD);
	            this.state = 213;
	            this.factor();
	            break;
	        case EveryGrammarParser.TILDE:
	            localctx = new Factor_TildeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 214;
	            this.match(EveryGrammarParser.TILDE);
	            this.state = 215;
	            this.factor();
	            break;
	        case EveryGrammarParser.FACTORIAL:
	            localctx = new Factor_FactorialContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 216;
	            this.match(EveryGrammarParser.FACTORIAL);
	            this.state = 217;
	            this.factor();
	            break;
	        case EveryGrammarParser.ROUNDBRACKETOPEN:
	            localctx = new Factor_BracketsContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 218;
	            this.match(EveryGrammarParser.ROUNDBRACKETOPEN);
	            this.state = 219;
	            this.expression();
	            this.state = 220;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.TRUE:
	            localctx = new Factor_TrueContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 222;
	            this.match(EveryGrammarParser.TRUE);
	            break;
	        case EveryGrammarParser.FALSE:
	            localctx = new Factor_FalseContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 223;
	            this.match(EveryGrammarParser.FALSE);
	            break;
	        case EveryGrammarParser.INT:
	            localctx = new Factor_IntegerContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 224;
	            this.match(EveryGrammarParser.INT);
	            break;
	        case EveryGrammarParser.DOUBLE:
	            localctx = new Factor_DoubleContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 225;
	            this.match(EveryGrammarParser.DOUBLE);
	            break;
	        case EveryGrammarParser.VARIABLE:
	            localctx = new Factor_VariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 226;
	            this.match(EveryGrammarParser.VARIABLE);
	            break;
	        case EveryGrammarParser.OBJECTSVARIABLE:
	            localctx = new Factor_ObjectVariablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 227;
	            this.match(EveryGrammarParser.OBJECTSVARIABLE);
	            break;
	        case EveryGrammarParser.STRING:
	            localctx = new Factor_StringContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 228;
	            this.match(EveryGrammarParser.STRING);
	            break;
	        case EveryGrammarParser.DateTime:
	            localctx = new Factor_DateTimeTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 229;
	            this.datetime_term();
	            break;
	        case EveryGrammarParser.EDGEBRACKETOPEN:
	            localctx = new Factor_ArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 230;
	            this.array_expr();
	            break;
	        case EveryGrammarParser.Concat:
	        case EveryGrammarParser.Count:
	        case EveryGrammarParser.Distinct:
	        case EveryGrammarParser.Difference:
	        case EveryGrammarParser.Except:
	        case EveryGrammarParser.IndexOf:
	        case EveryGrammarParser.LowerCase:
	        case EveryGrammarParser.Reverse:
	        case EveryGrammarParser.UpperCase:
	        case EveryGrammarParser.Sort:
	        case EveryGrammarParser.Trim:
	            localctx = new Factor_DefaultFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 231;
	            this.default_function_term();
	            break;
	        case EveryGrammarParser.HasDuplicates:
	        case EveryGrammarParser.HasAny:
	        case EveryGrammarParser.IsString:
	        case EveryGrammarParser.IsNumber:
	        case EveryGrammarParser.IsBoolean:
	        case EveryGrammarParser.IsDateTime:
	        case EveryGrammarParser.IsArray:
	        case EveryGrammarParser.IsNull:
	        case EveryGrammarParser.IsWhitespace:
	            localctx = new Factor_CheckFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 232;
	            this.check_function_term();
	            break;
	        case EveryGrammarParser.ToNumber:
	        case EveryGrammarParser.ToString:
	        case EveryGrammarParser.ToBoolean:
	        case EveryGrammarParser.ToArray:
	        case EveryGrammarParser.DegreeToGrad:
	        case EveryGrammarParser.DegreeToRadian:
	        case EveryGrammarParser.GradToDegree:
	        case EveryGrammarParser.GradToRadian:
	        case EveryGrammarParser.RadianToDegree:
	        case EveryGrammarParser.RadianToGrad:
	            localctx = new Factor_ConvertFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 233;
	            this.convert_function_term();
	            break;
	        case EveryGrammarParser.Abs:
	        case EveryGrammarParser.ACos:
	        case EveryGrammarParser.ACosH:
	        case EveryGrammarParser.ASin:
	        case EveryGrammarParser.ASinH:
	        case EveryGrammarParser.ATan:
	        case EveryGrammarParser.ATan2:
	        case EveryGrammarParser.ATanH:
	        case EveryGrammarParser.Cbrt:
	        case EveryGrammarParser.Cos:
	        case EveryGrammarParser.CosH:
	        case EveryGrammarParser.Ceilling:
	        case EveryGrammarParser.Clamp:
	        case EveryGrammarParser.CrossSum:
	        case EveryGrammarParser.Derivative:
	        case EveryGrammarParser.Exp:
	        case EveryGrammarParser.Floor:
	        case EveryGrammarParser.Integration:
	        case EveryGrammarParser.Log:
	        case EveryGrammarParser.Log2:
	        case EveryGrammarParser.Log10:
	        case EveryGrammarParser.Max:
	        case EveryGrammarParser.Min:
	        case EveryGrammarParser.Power:
	        case EveryGrammarParser.Round:
	        case EveryGrammarParser.Root:
	        case EveryGrammarParser.Sin:
	        case EveryGrammarParser.SinH:
	        case EveryGrammarParser.Sqrt:
	        case EveryGrammarParser.Tan:
	        case EveryGrammarParser.TanH:
	        case EveryGrammarParser.Truncate:
	        case EveryGrammarParser.Norm:
	        case EveryGrammarParser.EulerNorm:
	        case EveryGrammarParser.MaxNorm:
	        case EveryGrammarParser.GreatestCommonDivisor:
	        case EveryGrammarParser.LeastCommonMultiple:
	        case EveryGrammarParser.DotProduct:
	        case EveryGrammarParser.Binomial:
	        case EveryGrammarParser.ACot:
	        case EveryGrammarParser.ACotH:
	        case EveryGrammarParser.ACsc:
	        case EveryGrammarParser.ACscH:
	        case EveryGrammarParser.ASec:
	        case EveryGrammarParser.ASecH:
	        case EveryGrammarParser.Cot:
	        case EveryGrammarParser.CotH:
	        case EveryGrammarParser.Csc:
	        case EveryGrammarParser.CscH:
	        case EveryGrammarParser.Sec:
	        case EveryGrammarParser.SecH:
	            localctx = new Factor_MathFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 234;
	            this.math_function_term();
	            break;
	        case EveryGrammarParser.RndDecimal:
	        case EveryGrammarParser.RndInteger:
	            localctx = new Factor_RandomFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 235;
	            this.random_function_term();
	            break;
	        case EveryGrammarParser.CoVariance:
	        case EveryGrammarParser.Mean:
	        case EveryGrammarParser.Median:
	        case EveryGrammarParser.Pearson:
	        case EveryGrammarParser.Quantil:
	        case EveryGrammarParser.Spearman:
	        case EveryGrammarParser.Std:
	        case EveryGrammarParser.Variance:
	            localctx = new Factor_StatisticMathFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 236;
	            this.statistic_math_function_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	random_function_term() {
	    let localctx = new Random_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, EveryGrammarParser.RULE_random_function_term);
	    try {
	        this.state = 279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Random_DecimalContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 239;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 240;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new Random_DecimalArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 241;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 242;
	            this.expression();
	            this.state = 243;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new Random_DecimalMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 245;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 246;
	            this.expression();
	            this.state = 247;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 248;
	            this.expression();
	            this.state = 249;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new Random_DecimalArrayMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 251;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 252;
	            this.expression();
	            this.state = 253;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 254;
	            this.expression();
	            this.state = 255;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 256;
	            this.expression();
	            this.state = 257;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new Random_IntegerContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 259;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 260;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new Random_IntegerArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 261;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 262;
	            this.expression();
	            this.state = 263;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new Random_IntegerMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 265;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 266;
	            this.expression();
	            this.state = 267;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 268;
	            this.expression();
	            this.state = 269;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new Random_IntegerArrayMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 271;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 272;
	            this.expression();
	            this.state = 273;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 274;
	            this.expression();
	            this.state = 275;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 276;
	            this.expression();
	            this.state = 277;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	convert_function_term() {
	    let localctx = new Convert_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, EveryGrammarParser.RULE_convert_function_term);
	    try {
	        this.state = 321;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.ToArray:
	            localctx = new Convert_ToArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 281;
	            this.match(EveryGrammarParser.ToArray);
	            this.state = 282;
	            this.expr_args();
	            this.state = 283;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.ToBoolean:
	            localctx = new Convert_ToBooleanContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 285;
	            this.match(EveryGrammarParser.ToBoolean);
	            this.state = 286;
	            this.expression();
	            this.state = 287;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.ToNumber:
	            localctx = new Convert_ToNumberContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 289;
	            this.match(EveryGrammarParser.ToNumber);
	            this.state = 290;
	            this.expression();
	            this.state = 291;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.ToString:
	            localctx = new Convert_ToStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 293;
	            this.match(EveryGrammarParser.ToString);
	            this.state = 294;
	            this.expression();
	            this.state = 295;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.DegreeToGrad:
	            localctx = new Convert_DegreeToGradContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 297;
	            this.match(EveryGrammarParser.DegreeToGrad);
	            this.state = 298;
	            this.expression();
	            this.state = 299;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.DegreeToRadian:
	            localctx = new Convert_DegreeToRadianContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 301;
	            this.match(EveryGrammarParser.DegreeToRadian);
	            this.state = 302;
	            this.expression();
	            this.state = 303;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.GradToDegree:
	            localctx = new Convert_GradToDegreeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 305;
	            this.match(EveryGrammarParser.GradToDegree);
	            this.state = 306;
	            this.expression();
	            this.state = 307;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.GradToRadian:
	            localctx = new Convert_GradToRadianContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 309;
	            this.match(EveryGrammarParser.GradToRadian);
	            this.state = 310;
	            this.expression();
	            this.state = 311;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.RadianToDegree:
	            localctx = new Convert_RadianToDegreeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 313;
	            this.match(EveryGrammarParser.RadianToDegree);
	            this.state = 314;
	            this.expression();
	            this.state = 315;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.RadianToGrad:
	            localctx = new Convert_RadianToGradContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 317;
	            this.match(EveryGrammarParser.RadianToGrad);
	            this.state = 318;
	            this.expression();
	            this.state = 319;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetime_term() {
	    let localctx = new Datetime_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, EveryGrammarParser.RULE_datetime_term);
	    try {
	        this.state = 387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DateTime_ExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 323;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 324;
	            this.expression();
	            this.state = 325;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new DateTime_DateEntryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 327;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 328;
	            this.expression();
	            this.state = 329;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 330;
	            this.expression();
	            this.state = 331;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 332;
	            this.expression();
	            this.state = 333;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new DateTime_DateHourContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 335;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 336;
	            this.expression();
	            this.state = 337;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 338;
	            this.expression();
	            this.state = 339;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 340;
	            this.expression();
	            this.state = 341;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 342;
	            this.expression();
	            this.state = 343;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new DateTime_DateHourMinuteContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 345;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 346;
	            this.expression();
	            this.state = 347;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 348;
	            this.expression();
	            this.state = 349;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 350;
	            this.expression();
	            this.state = 351;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 352;
	            this.expression();
	            this.state = 353;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 354;
	            this.expression();
	            this.state = 355;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new DateTime_DateHourMinuteSecondsContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 357;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 358;
	            this.expression();
	            this.state = 359;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 360;
	            this.expression();
	            this.state = 361;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 362;
	            this.expression();
	            this.state = 363;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 364;
	            this.expression();
	            this.state = 365;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 366;
	            this.expression();
	            this.state = 367;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 368;
	            this.expression();
	            this.state = 369;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new DateTime_FullContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 371;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 372;
	            this.expression();
	            this.state = 373;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 374;
	            this.expression();
	            this.state = 375;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 376;
	            this.expression();
	            this.state = 377;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 378;
	            this.expression();
	            this.state = 379;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 380;
	            this.expression();
	            this.state = 381;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 382;
	            this.expression();
	            this.state = 383;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 384;
	            this.expression();
	            this.state = 385;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_slicing_term() {
	    let localctx = new Array_slicing_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, EveryGrammarParser.RULE_array_slicing_term);
	    try {
	        this.state = 437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArraySlicing_IndexingContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 389;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 390;
	            this.expression();
	            this.state = 391;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new ArraySlicing_SlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 393;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 394;
	            this.expression();
	            this.state = 395;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 396;
	            this.expression();
	            this.state = 397;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new ArraySlicing_StepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 399;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 400;
	            this.expression();
	            this.state = 401;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 402;
	            this.expression();
	            this.state = 403;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 404;
	            this.expression();
	            this.state = 405;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new ArraySlicing_StartSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 407;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 408;
	            this.expression();
	            this.state = 409;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 410;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new ArraySlicing_StartStepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 412;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 413;
	            this.expression();
	            this.state = 414;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 415;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 416;
	            this.expression();
	            this.state = 417;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new ArraySlicing_EndSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 419;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 420;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 421;
	            this.expression();
	            this.state = 422;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new ArraySlicing_EndStepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 424;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 425;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 426;
	            this.expression();
	            this.state = 427;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 428;
	            this.expression();
	            this.state = 429;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new ArraySlicing_AllStepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 431;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 432;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 433;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 434;
	            this.expression();
	            this.state = 435;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	check_function_term() {
	    let localctx = new Check_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, EveryGrammarParser.RULE_check_function_term);
	    try {
	        this.state = 475;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.IsArray:
	            localctx = new CheckFunction_IsArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 439;
	            this.match(EveryGrammarParser.IsArray);
	            this.state = 440;
	            this.expression();
	            this.state = 441;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsBoolean:
	            localctx = new CheckFunction_IsBooleanContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 443;
	            this.match(EveryGrammarParser.IsBoolean);
	            this.state = 444;
	            this.expression();
	            this.state = 445;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsDateTime:
	            localctx = new CheckFunction_IsDateTimeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 447;
	            this.match(EveryGrammarParser.IsDateTime);
	            this.state = 448;
	            this.expression();
	            this.state = 449;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsNull:
	            localctx = new CheckFunction_IsNullContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 451;
	            this.match(EveryGrammarParser.IsNull);
	            this.state = 452;
	            this.expression();
	            this.state = 453;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsNumber:
	            localctx = new CheckFunction_IsNumberContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 455;
	            this.match(EveryGrammarParser.IsNumber);
	            this.state = 456;
	            this.expression();
	            this.state = 457;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsString:
	            localctx = new CheckFunction_IsStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 459;
	            this.match(EveryGrammarParser.IsString);
	            this.state = 460;
	            this.expression();
	            this.state = 461;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsWhitespace:
	            localctx = new CheckFunction_IsWhitespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 463;
	            this.match(EveryGrammarParser.IsWhitespace);
	            this.state = 464;
	            this.expression();
	            this.state = 465;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.HasAny:
	            localctx = new CheckFunction_HasAnyContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 467;
	            this.match(EveryGrammarParser.HasAny);
	            this.state = 468;
	            this.expression();
	            this.state = 469;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.HasDuplicates:
	            localctx = new CheckFunction_HasDuplicatesContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 471;
	            this.match(EveryGrammarParser.HasDuplicates);
	            this.state = 472;
	            this.expression();
	            this.state = 473;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_function_term() {
	    let localctx = new Default_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, EveryGrammarParser.RULE_default_function_term);
	    try {
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Function_ConcatContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 477;
	            this.match(EveryGrammarParser.Concat);
	            this.state = 478;
	            this.expression();
	            this.state = 479;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 480;
	            this.expression();
	            this.state = 481;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new Function_CountContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 483;
	            this.match(EveryGrammarParser.Count);
	            this.state = 484;
	            this.expression();
	            this.state = 485;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new Function_DistincContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 487;
	            this.match(EveryGrammarParser.Distinct);
	            this.state = 488;
	            this.expression();
	            this.state = 489;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new Function_DifferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 491;
	            this.match(EveryGrammarParser.Difference);
	            this.state = 492;
	            this.expression();
	            this.state = 493;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 494;
	            this.expression();
	            this.state = 495;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new Function_ExceptContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 497;
	            this.match(EveryGrammarParser.Except);
	            this.state = 498;
	            this.expression();
	            this.state = 499;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 500;
	            this.expression();
	            this.state = 501;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new Function_IndexOfContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 503;
	            this.match(EveryGrammarParser.IndexOf);
	            this.state = 504;
	            this.expression();
	            this.state = 505;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 506;
	            this.expression();
	            this.state = 507;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new Function_IndexOfStartContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 509;
	            this.match(EveryGrammarParser.IndexOf);
	            this.state = 510;
	            this.expression();
	            this.state = 511;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 512;
	            this.expression();
	            this.state = 513;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 514;
	            this.expression();
	            this.state = 515;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new Function_IndexOfStartEndContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 517;
	            this.match(EveryGrammarParser.IndexOf);
	            this.state = 518;
	            this.expression();
	            this.state = 519;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 520;
	            this.expression();
	            this.state = 521;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 522;
	            this.expression();
	            this.state = 523;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 524;
	            this.expression();
	            this.state = 525;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 9:
	            localctx = new Function_LowerContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 527;
	            this.match(EveryGrammarParser.LowerCase);
	            this.state = 528;
	            this.expression();
	            this.state = 529;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 10:
	            localctx = new Function_ReverseContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 531;
	            this.match(EveryGrammarParser.Reverse);
	            this.state = 532;
	            this.expression();
	            this.state = 533;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 11:
	            localctx = new Function_UpperContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 535;
	            this.match(EveryGrammarParser.UpperCase);
	            this.state = 536;
	            this.expression();
	            this.state = 537;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 12:
	            localctx = new Function_SortContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 539;
	            this.match(EveryGrammarParser.Sort);
	            this.state = 540;
	            this.expression();
	            this.state = 541;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 13:
	            localctx = new Function_TrimContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 543;
	            this.match(EveryGrammarParser.Trim);
	            this.state = 544;
	            this.expression();
	            this.state = 545;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	math_function_term() {
	    let localctx = new Math_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, EveryGrammarParser.RULE_math_function_term);
	    try {
	        this.state = 803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Math_AbsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 549;
	            this.match(EveryGrammarParser.Abs);
	            this.state = 550;
	            this.expression();
	            this.state = 551;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new Math_ACosContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 553;
	            this.match(EveryGrammarParser.ACos);
	            this.state = 554;
	            this.expression();
	            this.state = 555;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new Math_ACosHContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 557;
	            this.match(EveryGrammarParser.ACosH);
	            this.state = 558;
	            this.expression();
	            this.state = 559;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new Math_ASinContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 561;
	            this.match(EveryGrammarParser.ASin);
	            this.state = 562;
	            this.expression();
	            this.state = 563;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new Math_ASinHContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 565;
	            this.match(EveryGrammarParser.ASinH);
	            this.state = 566;
	            this.expression();
	            this.state = 567;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new Math_ATanContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 569;
	            this.match(EveryGrammarParser.ATan);
	            this.state = 570;
	            this.expression();
	            this.state = 571;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new Math_ATan2Context(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 573;
	            this.match(EveryGrammarParser.ATan2);
	            this.state = 574;
	            this.expression();
	            this.state = 575;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 576;
	            this.expression();
	            this.state = 577;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new Math_ATanHContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 579;
	            this.match(EveryGrammarParser.ATanH);
	            this.state = 580;
	            this.expression();
	            this.state = 581;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 9:
	            localctx = new Math_CbrtContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 583;
	            this.match(EveryGrammarParser.Cbrt);
	            this.state = 584;
	            this.expression();
	            this.state = 585;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 10:
	            localctx = new Math_CosContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 587;
	            this.match(EveryGrammarParser.Cos);
	            this.state = 588;
	            this.expression();
	            this.state = 589;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 11:
	            localctx = new Math_CosHContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 591;
	            this.match(EveryGrammarParser.CosH);
	            this.state = 592;
	            this.expression();
	            this.state = 593;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 12:
	            localctx = new Math_CeillingContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 595;
	            this.match(EveryGrammarParser.Ceilling);
	            this.state = 596;
	            this.expression();
	            this.state = 597;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 13:
	            localctx = new Math_ClampContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 599;
	            this.match(EveryGrammarParser.Clamp);
	            this.state = 600;
	            this.expression();
	            this.state = 601;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 602;
	            this.expression();
	            this.state = 603;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 604;
	            this.expression();
	            this.state = 605;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 14:
	            localctx = new Math_CrossSumContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 607;
	            this.match(EveryGrammarParser.CrossSum);
	            this.state = 608;
	            this.expression();
	            this.state = 609;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 15:
	            localctx = new Math_DerivativeContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 611;
	            this.match(EveryGrammarParser.Derivative);
	            this.state = 612;
	            this.expression();
	            this.state = 613;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 614;
	            this.expression();
	            this.state = 615;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 616;
	            this.expression();
	            this.state = 617;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 16:
	            localctx = new Math_ExpContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 619;
	            this.match(EveryGrammarParser.Exp);
	            this.state = 620;
	            this.expression();
	            this.state = 621;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 17:
	            localctx = new Math_FloorContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 623;
	            this.match(EveryGrammarParser.Floor);
	            this.state = 624;
	            this.expression();
	            this.state = 625;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 18:
	            localctx = new Math_IntegrationContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 627;
	            this.match(EveryGrammarParser.Integration);
	            this.state = 628;
	            this.expression();
	            this.state = 629;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 630;
	            this.expression();
	            this.state = 631;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 632;
	            this.expression();
	            this.state = 633;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 634;
	            this.expression();
	            this.state = 635;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 19:
	            localctx = new Math_LogContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 637;
	            this.match(EveryGrammarParser.Log);
	            this.state = 638;
	            this.expression();
	            this.state = 639;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 640;
	            this.expression();
	            this.state = 641;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 20:
	            localctx = new Math_Log2Context(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 643;
	            this.match(EveryGrammarParser.Log2);
	            this.state = 644;
	            this.expression();
	            this.state = 645;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 21:
	            localctx = new Math_Log10Context(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 647;
	            this.match(EveryGrammarParser.Log10);
	            this.state = 648;
	            this.expression();
	            this.state = 649;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 22:
	            localctx = new Math_Max_ArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 651;
	            this.match(EveryGrammarParser.Max);
	            this.state = 652;
	            this.expression();
	            this.state = 653;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 23:
	            localctx = new Math_Max_TwoContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 655;
	            this.match(EveryGrammarParser.Max);
	            this.state = 656;
	            this.expression();
	            this.state = 657;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 658;
	            this.expression();
	            this.state = 659;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 24:
	            localctx = new Math_Min_ArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 661;
	            this.match(EveryGrammarParser.Min);
	            this.state = 662;
	            this.expression();
	            this.state = 663;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 25:
	            localctx = new Math_Min_TwoContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 665;
	            this.match(EveryGrammarParser.Min);
	            this.state = 666;
	            this.expression();
	            this.state = 667;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 668;
	            this.expression();
	            this.state = 669;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 26:
	            localctx = new Math_PowerContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 671;
	            this.match(EveryGrammarParser.Power);
	            this.state = 672;
	            this.expression();
	            this.state = 673;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 674;
	            this.expression();
	            this.state = 675;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 27:
	            localctx = new Math_Round_Not_DecimalContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 677;
	            this.match(EveryGrammarParser.Round);
	            this.state = 678;
	            this.expression();
	            this.state = 679;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 28:
	            localctx = new Math_Round_DecimalContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 681;
	            this.match(EveryGrammarParser.Round);
	            this.state = 682;
	            this.expression();
	            this.state = 683;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 684;
	            this.expression();
	            this.state = 685;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 29:
	            localctx = new Math_RootContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 687;
	            this.match(EveryGrammarParser.Root);
	            this.state = 688;
	            this.expression();
	            this.state = 689;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 690;
	            this.expression();
	            this.state = 691;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 30:
	            localctx = new Math_SinContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 693;
	            this.match(EveryGrammarParser.Sin);
	            this.state = 694;
	            this.expression();
	            this.state = 695;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 31:
	            localctx = new Math_SinHContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 697;
	            this.match(EveryGrammarParser.SinH);
	            this.state = 698;
	            this.expression();
	            this.state = 699;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 32:
	            localctx = new Math_SqrtContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 701;
	            this.match(EveryGrammarParser.Sqrt);
	            this.state = 702;
	            this.expression();
	            this.state = 703;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 33:
	            localctx = new Math_TanContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 705;
	            this.match(EveryGrammarParser.Tan);
	            this.state = 706;
	            this.expression();
	            this.state = 707;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 34:
	            localctx = new Math_TanHContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 709;
	            this.match(EveryGrammarParser.TanH);
	            this.state = 710;
	            this.expression();
	            this.state = 711;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 35:
	            localctx = new Math_TruncateContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 713;
	            this.match(EveryGrammarParser.Truncate);
	            this.state = 714;
	            this.expression();
	            this.state = 715;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 36:
	            localctx = new Math_NormContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 717;
	            this.match(EveryGrammarParser.Norm);
	            this.state = 718;
	            this.expression();
	            this.state = 719;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 720;
	            this.expression();
	            this.state = 721;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 37:
	            localctx = new Math_EulerNormContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 723;
	            this.match(EveryGrammarParser.EulerNorm);
	            this.state = 724;
	            this.expression();
	            this.state = 725;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 38:
	            localctx = new Math_MaxNormContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 727;
	            this.match(EveryGrammarParser.MaxNorm);
	            this.state = 728;
	            this.expression();
	            this.state = 729;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 39:
	            localctx = new Math_GreatesCommonDivisorContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 731;
	            this.match(EveryGrammarParser.GreatestCommonDivisor);
	            this.state = 732;
	            this.expression();
	            this.state = 733;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 734;
	            this.expression();
	            this.state = 735;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 40:
	            localctx = new Math_LeastCommonMultipleContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 737;
	            this.match(EveryGrammarParser.LeastCommonMultiple);
	            this.state = 738;
	            this.expression();
	            this.state = 739;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 740;
	            this.expression();
	            this.state = 741;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 41:
	            localctx = new Math_DotProductContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 743;
	            this.match(EveryGrammarParser.DotProduct);
	            this.state = 744;
	            this.expression();
	            this.state = 745;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 746;
	            this.expression();
	            this.state = 747;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 42:
	            localctx = new Math_BinomilaContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 749;
	            this.match(EveryGrammarParser.Binomial);
	            this.state = 750;
	            this.expression();
	            this.state = 751;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 752;
	            this.expression();
	            this.state = 753;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 43:
	            localctx = new Math_ACotContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 755;
	            this.match(EveryGrammarParser.ACot);
	            this.state = 756;
	            this.expression();
	            this.state = 757;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 44:
	            localctx = new Math_ACotHContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 759;
	            this.match(EveryGrammarParser.ACotH);
	            this.state = 760;
	            this.expression();
	            this.state = 761;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 45:
	            localctx = new Math_ACscContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 763;
	            this.match(EveryGrammarParser.ACsc);
	            this.state = 764;
	            this.expression();
	            this.state = 765;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 46:
	            localctx = new Math_ACscHContext(this, localctx);
	            this.enterOuterAlt(localctx, 46);
	            this.state = 767;
	            this.match(EveryGrammarParser.ACscH);
	            this.state = 768;
	            this.expression();
	            this.state = 769;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 47:
	            localctx = new Math_ASecContext(this, localctx);
	            this.enterOuterAlt(localctx, 47);
	            this.state = 771;
	            this.match(EveryGrammarParser.ASec);
	            this.state = 772;
	            this.expression();
	            this.state = 773;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 48:
	            localctx = new Math_ASecHContext(this, localctx);
	            this.enterOuterAlt(localctx, 48);
	            this.state = 775;
	            this.match(EveryGrammarParser.ASecH);
	            this.state = 776;
	            this.expression();
	            this.state = 777;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 49:
	            localctx = new Math_CotContext(this, localctx);
	            this.enterOuterAlt(localctx, 49);
	            this.state = 779;
	            this.match(EveryGrammarParser.Cot);
	            this.state = 780;
	            this.expression();
	            this.state = 781;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 50:
	            localctx = new Math_CotHContext(this, localctx);
	            this.enterOuterAlt(localctx, 50);
	            this.state = 783;
	            this.match(EveryGrammarParser.CotH);
	            this.state = 784;
	            this.expression();
	            this.state = 785;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 51:
	            localctx = new Math_CscContext(this, localctx);
	            this.enterOuterAlt(localctx, 51);
	            this.state = 787;
	            this.match(EveryGrammarParser.Csc);
	            this.state = 788;
	            this.expression();
	            this.state = 789;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 52:
	            localctx = new Math_CscHContext(this, localctx);
	            this.enterOuterAlt(localctx, 52);
	            this.state = 791;
	            this.match(EveryGrammarParser.CscH);
	            this.state = 792;
	            this.expression();
	            this.state = 793;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 53:
	            localctx = new Math_SecContext(this, localctx);
	            this.enterOuterAlt(localctx, 53);
	            this.state = 795;
	            this.match(EveryGrammarParser.Sec);
	            this.state = 796;
	            this.expression();
	            this.state = 797;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 54:
	            localctx = new Math_SecHContext(this, localctx);
	            this.enterOuterAlt(localctx, 54);
	            this.state = 799;
	            this.match(EveryGrammarParser.SecH);
	            this.state = 800;
	            this.expression();
	            this.state = 801;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statistic_math_function_term() {
	    let localctx = new Statistic_math_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, EveryGrammarParser.RULE_statistic_math_function_term);
	    try {
	        this.state = 845;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.CoVariance:
	            localctx = new MathStatistic_CoVarianceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 805;
	            this.match(EveryGrammarParser.CoVariance);
	            this.state = 806;
	            this.expression();
	            this.state = 807;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 808;
	            this.expression();
	            this.state = 809;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Mean:
	            localctx = new MathStatistic_MeanContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 811;
	            this.match(EveryGrammarParser.Mean);
	            this.state = 812;
	            this.expression();
	            this.state = 813;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Median:
	            localctx = new MathStatistic_MedianContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 815;
	            this.match(EveryGrammarParser.Median);
	            this.state = 816;
	            this.expression();
	            this.state = 817;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Pearson:
	            localctx = new MathStatistic_PearsonContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 819;
	            this.match(EveryGrammarParser.Pearson);
	            this.state = 820;
	            this.expression();
	            this.state = 821;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 822;
	            this.expression();
	            this.state = 823;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Quantil:
	            localctx = new MathStatistic_QuantilContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 825;
	            this.match(EveryGrammarParser.Quantil);
	            this.state = 826;
	            this.expression();
	            this.state = 827;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 828;
	            this.expression();
	            this.state = 829;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Spearman:
	            localctx = new MathStatistic_SpearmanContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 831;
	            this.match(EveryGrammarParser.Spearman);
	            this.state = 832;
	            this.expression();
	            this.state = 833;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 834;
	            this.expression();
	            this.state = 835;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Std:
	            localctx = new MathStatistic_StDContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 837;
	            this.match(EveryGrammarParser.Std);
	            this.state = 838;
	            this.expression();
	            this.state = 839;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Variance:
	            localctx = new MathStatistic_VarianceContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 841;
	            this.match(EveryGrammarParser.Variance);
	            this.state = 842;
	            this.expression();
	            this.state = 843;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_args() {
	    let localctx = new Expr_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, EveryGrammarParser.RULE_expr_args);
	    try {
	        this.state = 852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 847;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.expression();
	            this.state = 849;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 850;
	            this.expr_args();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_expr() {
	    let localctx = new Array_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, EveryGrammarParser.RULE_array_expr);
	    try {
	        this.state = 860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrayCreation_EmptyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 854;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 855;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new ArrayCreationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 857;
	            this.expr_args();
	            this.state = 858;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

EveryGrammarParser.EOF = antlr4.Token.EOF;
EveryGrammarParser.ADD = 1;
EveryGrammarParser.SUBTRACT = 2;
EveryGrammarParser.MULTIPLY = 3;
EveryGrammarParser.DIVIDE = 4;
EveryGrammarParser.MODULO = 5;
EveryGrammarParser.POWEROPERATOR = 6;
EveryGrammarParser.BOOLXOR = 7;
EveryGrammarParser.EQUAL = 8;
EveryGrammarParser.EQUAL_IGNORECASE = 9;
EveryGrammarParser.NOT = 10;
EveryGrammarParser.NOTEQUAL = 11;
EveryGrammarParser.NOTEQUAL_IGNORECASE = 12;
EveryGrammarParser.BOOLOR = 13;
EveryGrammarParser.BOOLAND = 14;
EveryGrammarParser.BITOR = 15;
EveryGrammarParser.BITAND = 16;
EveryGrammarParser.GREATER = 17;
EveryGrammarParser.GREATEREQUAL = 18;
EveryGrammarParser.LOWER = 19;
EveryGrammarParser.LOWEREQUAL = 20;
EveryGrammarParser.TILDE = 21;
EveryGrammarParser.COLON = 22;
EveryGrammarParser.QUESTIONMARK = 23;
EveryGrammarParser.INTEGERDIVISION = 24;
EveryGrammarParser.BITSHIFTLEFT = 25;
EveryGrammarParser.BITSHIFTRIGHT = 26;
EveryGrammarParser.CONTAINS = 27;
EveryGrammarParser.FACTORIAL = 28;
EveryGrammarParser.KOMMA = 29;
EveryGrammarParser.TRUE = 30;
EveryGrammarParser.FALSE = 31;
EveryGrammarParser.ROUNDBRACKETOPEN = 32;
EveryGrammarParser.ROUNDBRACKETCLOSED = 33;
EveryGrammarParser.EDGEBRACKETOPEN = 34;
EveryGrammarParser.EDGEBRACKETCLOSED = 35;
EveryGrammarParser.DOUBLE = 36;
EveryGrammarParser.STRING = 37;
EveryGrammarParser.VARIABLE = 38;
EveryGrammarParser.OBJECTSVARIABLE = 39;
EveryGrammarParser.INT = 40;
EveryGrammarParser.ALPHA = 41;
EveryGrammarParser.E = 42;
EveryGrammarParser.PI = 43;
EveryGrammarParser.Abs = 44;
EveryGrammarParser.ACos = 45;
EveryGrammarParser.ACosH = 46;
EveryGrammarParser.ASin = 47;
EveryGrammarParser.ASinH = 48;
EveryGrammarParser.ATan = 49;
EveryGrammarParser.ATan2 = 50;
EveryGrammarParser.ATanH = 51;
EveryGrammarParser.Cbrt = 52;
EveryGrammarParser.Cos = 53;
EveryGrammarParser.CosH = 54;
EveryGrammarParser.Ceilling = 55;
EveryGrammarParser.Clamp = 56;
EveryGrammarParser.CrossSum = 57;
EveryGrammarParser.Derivative = 58;
EveryGrammarParser.Exp = 59;
EveryGrammarParser.Floor = 60;
EveryGrammarParser.Integration = 61;
EveryGrammarParser.Log = 62;
EveryGrammarParser.Log2 = 63;
EveryGrammarParser.Log10 = 64;
EveryGrammarParser.Max = 65;
EveryGrammarParser.Min = 66;
EveryGrammarParser.Power = 67;
EveryGrammarParser.Round = 68;
EveryGrammarParser.Root = 69;
EveryGrammarParser.Sin = 70;
EveryGrammarParser.SinH = 71;
EveryGrammarParser.Sqrt = 72;
EveryGrammarParser.Tan = 73;
EveryGrammarParser.TanH = 74;
EveryGrammarParser.Truncate = 75;
EveryGrammarParser.Norm = 76;
EveryGrammarParser.EulerNorm = 77;
EveryGrammarParser.MaxNorm = 78;
EveryGrammarParser.GreatestCommonDivisor = 79;
EveryGrammarParser.LeastCommonMultiple = 80;
EveryGrammarParser.DotProduct = 81;
EveryGrammarParser.Binomial = 82;
EveryGrammarParser.ACot = 83;
EveryGrammarParser.ACotH = 84;
EveryGrammarParser.ACsc = 85;
EveryGrammarParser.ACscH = 86;
EveryGrammarParser.ASec = 87;
EveryGrammarParser.ASecH = 88;
EveryGrammarParser.Cot = 89;
EveryGrammarParser.CotH = 90;
EveryGrammarParser.Csc = 91;
EveryGrammarParser.CscH = 92;
EveryGrammarParser.Sec = 93;
EveryGrammarParser.SecH = 94;
EveryGrammarParser.CoVariance = 95;
EveryGrammarParser.Mean = 96;
EveryGrammarParser.Median = 97;
EveryGrammarParser.Pearson = 98;
EveryGrammarParser.Quantil = 99;
EveryGrammarParser.Spearman = 100;
EveryGrammarParser.Std = 101;
EveryGrammarParser.Variance = 102;
EveryGrammarParser.Concat = 103;
EveryGrammarParser.Count = 104;
EveryGrammarParser.Distinct = 105;
EveryGrammarParser.Difference = 106;
EveryGrammarParser.HasDuplicates = 107;
EveryGrammarParser.DateTime = 108;
EveryGrammarParser.Except = 109;
EveryGrammarParser.IndexOf = 110;
EveryGrammarParser.LowerCase = 111;
EveryGrammarParser.Reverse = 112;
EveryGrammarParser.UpperCase = 113;
EveryGrammarParser.HasAny = 114;
EveryGrammarParser.Sort = 115;
EveryGrammarParser.Trim = 116;
EveryGrammarParser.IsString = 117;
EveryGrammarParser.IsNumber = 118;
EveryGrammarParser.IsBoolean = 119;
EveryGrammarParser.IsDateTime = 120;
EveryGrammarParser.IsArray = 121;
EveryGrammarParser.IsNull = 122;
EveryGrammarParser.IsWhitespace = 123;
EveryGrammarParser.ToNumber = 124;
EveryGrammarParser.ToString = 125;
EveryGrammarParser.ToBoolean = 126;
EveryGrammarParser.ToArray = 127;
EveryGrammarParser.DegreeToGrad = 128;
EveryGrammarParser.DegreeToRadian = 129;
EveryGrammarParser.GradToDegree = 130;
EveryGrammarParser.GradToRadian = 131;
EveryGrammarParser.RadianToDegree = 132;
EveryGrammarParser.RadianToGrad = 133;
EveryGrammarParser.RndDecimal = 134;
EveryGrammarParser.RndInteger = 135;

EveryGrammarParser.RULE_startRule = 0;
EveryGrammarParser.RULE_expression = 1;
EveryGrammarParser.RULE_if_else = 2;
EveryGrammarParser.RULE_inner_if_else = 3;
EveryGrammarParser.RULE_bool_or_term = 4;
EveryGrammarParser.RULE_bool_xor_term = 5;
EveryGrammarParser.RULE_bool_and_term = 6;
EveryGrammarParser.RULE_equality = 7;
EveryGrammarParser.RULE_check = 8;
EveryGrammarParser.RULE_bit_or_term = 9;
EveryGrammarParser.RULE_bit_and_term = 10;
EveryGrammarParser.RULE_line_term = 11;
EveryGrammarParser.RULE_point_term = 12;
EveryGrammarParser.RULE_factor = 13;
EveryGrammarParser.RULE_random_function_term = 14;
EveryGrammarParser.RULE_convert_function_term = 15;
EveryGrammarParser.RULE_datetime_term = 16;
EveryGrammarParser.RULE_array_slicing_term = 17;
EveryGrammarParser.RULE_check_function_term = 18;
EveryGrammarParser.RULE_default_function_term = 19;
EveryGrammarParser.RULE_math_function_term = 20;
EveryGrammarParser.RULE_statistic_math_function_term = 21;
EveryGrammarParser.RULE_expr_args = 22;
EveryGrammarParser.RULE_array_expr = 23;

class StartRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_startRule;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterStartRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitStartRule(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_expression;
    }

	if_else() {
	    return this.getTypedRuleContext(If_elseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitExpression(this);
		}
	}


}



class If_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_if_else;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IfElseContext extends If_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_if_else = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inner_if_elseContext);
	    } else {
	        return this.getTypedRuleContext(Inner_if_elseContext,i);
	    }
	};

	QUESTIONMARK() {
	    return this.getToken(EveryGrammarParser.QUESTIONMARK, 0);
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterIfElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitIfElse(this);
		}
	}


}

EveryGrammarParser.IfElseContext = IfElseContext;

class IfElse_NextContext extends If_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_if_else() {
	    return this.getTypedRuleContext(Inner_if_elseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterIfElse_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitIfElse_Next(this);
		}
	}


}

EveryGrammarParser.IfElse_NextContext = IfElse_NextContext;

class ArraySlicingContext extends If_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_if_else() {
	    return this.getTypedRuleContext(Inner_if_elseContext,0);
	};

	array_slicing_term() {
	    return this.getTypedRuleContext(Array_slicing_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicingContext = ArraySlicingContext;

class Inner_if_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_inner_if_else;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InnerIfElseContext extends Inner_if_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROUNDBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0);
	};

	if_else() {
	    return this.getTypedRuleContext(If_elseContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterInnerIfElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitInnerIfElse(this);
		}
	}


}

EveryGrammarParser.InnerIfElseContext = InnerIfElseContext;

class InnerIfElse_NextContext extends Inner_if_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_or_term() {
	    return this.getTypedRuleContext(Bool_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterInnerIfElse_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitInnerIfElse_Next(this);
		}
	}


}

EveryGrammarParser.InnerIfElse_NextContext = InnerIfElse_NextContext;

class Bool_or_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bool_or_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoolOr_NextContext extends Bool_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_xor_term() {
	    return this.getTypedRuleContext(Bool_xor_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolOr_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolOr_Next(this);
		}
	}


}

EveryGrammarParser.BoolOr_NextContext = BoolOr_NextContext;

class BoolOrContext extends Bool_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_xor_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bool_xor_termContext);
	    } else {
	        return this.getTypedRuleContext(Bool_xor_termContext,i);
	    }
	};

	BOOLOR() {
	    return this.getToken(EveryGrammarParser.BOOLOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolOr(this);
		}
	}


}

EveryGrammarParser.BoolOrContext = BoolOrContext;

class Bool_xor_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bool_xor_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoolXOrContext extends Bool_xor_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_and_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bool_and_termContext);
	    } else {
	        return this.getTypedRuleContext(Bool_and_termContext,i);
	    }
	};

	BOOLXOR() {
	    return this.getToken(EveryGrammarParser.BOOLXOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolXOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolXOr(this);
		}
	}


}

EveryGrammarParser.BoolXOrContext = BoolXOrContext;

class BoolXOr_NextContext extends Bool_xor_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_and_term() {
	    return this.getTypedRuleContext(Bool_and_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolXOr_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolXOr_Next(this);
		}
	}


}

EveryGrammarParser.BoolXOr_NextContext = BoolXOr_NextContext;

class Bool_and_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bool_and_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoolAnd_NextContext extends Bool_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolAnd_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolAnd_Next(this);
		}
	}


}

EveryGrammarParser.BoolAnd_NextContext = BoolAnd_NextContext;

class BoolAndContext extends Bool_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_and_term() {
	    return this.getTypedRuleContext(Bool_and_termContext,0);
	};

	BOOLAND() {
	    return this.getToken(EveryGrammarParser.BOOLAND, 0);
	};

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolAnd(this);
		}
	}


}

EveryGrammarParser.BoolAndContext = BoolAndContext;

class EqualityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_equality;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Equality_ContainsContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	CONTAINS() {
	    return this.getToken(EveryGrammarParser.CONTAINS, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_Contains(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_Contains(this);
		}
	}


}

EveryGrammarParser.Equality_ContainsContext = Equality_ContainsContext;

class Equality_NextContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_Next(this);
		}
	}


}

EveryGrammarParser.Equality_NextContext = Equality_NextContext;

class Equality_EqualContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	EQUAL() {
	    return this.getToken(EveryGrammarParser.EQUAL, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_Equal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_Equal(this);
		}
	}


}

EveryGrammarParser.Equality_EqualContext = Equality_EqualContext;

class Equality_NotEqualIgnoreCaseContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	NOTEQUAL_IGNORECASE() {
	    return this.getToken(EveryGrammarParser.NOTEQUAL_IGNORECASE, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_NotEqualIgnoreCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_NotEqualIgnoreCase(this);
		}
	}


}

EveryGrammarParser.Equality_NotEqualIgnoreCaseContext = Equality_NotEqualIgnoreCaseContext;

class Equality_NotEqualContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	NOTEQUAL() {
	    return this.getToken(EveryGrammarParser.NOTEQUAL, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_NotEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_NotEqual(this);
		}
	}


}

EveryGrammarParser.Equality_NotEqualContext = Equality_NotEqualContext;

class Equality_NotContainsContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	NOT() {
	    return this.getToken(EveryGrammarParser.NOT, 0);
	};

	CONTAINS() {
	    return this.getToken(EveryGrammarParser.CONTAINS, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_NotContains(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_NotContains(this);
		}
	}


}

EveryGrammarParser.Equality_NotContainsContext = Equality_NotContainsContext;

class Equality_EqualIgnoreCaseContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	EQUAL_IGNORECASE() {
	    return this.getToken(EveryGrammarParser.EQUAL_IGNORECASE, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_EqualIgnoreCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_EqualIgnoreCase(this);
		}
	}


}

EveryGrammarParser.Equality_EqualIgnoreCaseContext = Equality_EqualIgnoreCaseContext;

class CheckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_check;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Check_NextContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_Next(this);
		}
	}


}

EveryGrammarParser.Check_NextContext = Check_NextContext;

class Check_GreaterContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	GREATER() {
	    return this.getToken(EveryGrammarParser.GREATER, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_Greater(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_Greater(this);
		}
	}


}

EveryGrammarParser.Check_GreaterContext = Check_GreaterContext;

class Check_GreaterEqualContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	GREATEREQUAL() {
	    return this.getToken(EveryGrammarParser.GREATEREQUAL, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_GreaterEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_GreaterEqual(this);
		}
	}


}

EveryGrammarParser.Check_GreaterEqualContext = Check_GreaterEqualContext;

class Check_LowerContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	LOWER() {
	    return this.getToken(EveryGrammarParser.LOWER, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_Lower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_Lower(this);
		}
	}


}

EveryGrammarParser.Check_LowerContext = Check_LowerContext;

class Check_LowerEqualContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	LOWEREQUAL() {
	    return this.getToken(EveryGrammarParser.LOWEREQUAL, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_LowerEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_LowerEqual(this);
		}
	}


}

EveryGrammarParser.Check_LowerEqualContext = Check_LowerEqualContext;

class Bit_or_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bit_or_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitORContext extends Bit_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	BITOR() {
	    return this.getToken(EveryGrammarParser.BITOR, 0);
	};

	bit_and_term() {
	    return this.getTypedRuleContext(Bit_and_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitOR(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitOR(this);
		}
	}


}

EveryGrammarParser.BitORContext = BitORContext;

class BitOr_NextContext extends Bit_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_and_term() {
	    return this.getTypedRuleContext(Bit_and_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitOr_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitOr_Next(this);
		}
	}


}

EveryGrammarParser.BitOr_NextContext = BitOr_NextContext;

class Bit_and_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bit_and_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitAndContext extends Bit_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_and_term() {
	    return this.getTypedRuleContext(Bit_and_termContext,0);
	};

	BITAND() {
	    return this.getToken(EveryGrammarParser.BITAND, 0);
	};

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitAnd(this);
		}
	}


}

EveryGrammarParser.BitAndContext = BitAndContext;

class BitAnd_NextContext extends Bit_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitAnd_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitAnd_Next(this);
		}
	}


}

EveryGrammarParser.BitAnd_NextContext = BitAnd_NextContext;

class Line_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_line_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Line_AdditionContext extends Line_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	ADD() {
	    return this.getToken(EveryGrammarParser.ADD, 0);
	};

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterLine_Addition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitLine_Addition(this);
		}
	}


}

EveryGrammarParser.Line_AdditionContext = Line_AdditionContext;

class Line_SubtractionContext extends Line_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	SUBTRACT() {
	    return this.getToken(EveryGrammarParser.SUBTRACT, 0);
	};

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterLine_Subtraction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitLine_Subtraction(this);
		}
	}


}

EveryGrammarParser.Line_SubtractionContext = Line_SubtractionContext;

class Line_NextContext extends Line_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterLine_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitLine_Next(this);
		}
	}


}

EveryGrammarParser.Line_NextContext = Line_NextContext;

class Point_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_point_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PointTerm_PowerOperatorContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	POWEROPERATOR() {
	    return this.getToken(EveryGrammarParser.POWEROPERATOR, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_PowerOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_PowerOperator(this);
		}
	}


}

EveryGrammarParser.PointTerm_PowerOperatorContext = PointTerm_PowerOperatorContext;

class PointTerm_ModuloContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	MODULO() {
	    return this.getToken(EveryGrammarParser.MODULO, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Modulo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Modulo(this);
		}
	}


}

EveryGrammarParser.PointTerm_ModuloContext = PointTerm_ModuloContext;

class PointTerm_MultiplyContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	MULTIPLY() {
	    return this.getToken(EveryGrammarParser.MULTIPLY, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Multiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Multiply(this);
		}
	}


}

EveryGrammarParser.PointTerm_MultiplyContext = PointTerm_MultiplyContext;

class PointTerm_BitShiftLeftContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	BITSHIFTLEFT() {
	    return this.getToken(EveryGrammarParser.BITSHIFTLEFT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_BitShiftLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_BitShiftLeft(this);
		}
	}


}

EveryGrammarParser.PointTerm_BitShiftLeftContext = PointTerm_BitShiftLeftContext;

class PointTerm_IntegerDivisionContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	INTEGERDIVISION() {
	    return this.getToken(EveryGrammarParser.INTEGERDIVISION, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_IntegerDivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_IntegerDivision(this);
		}
	}


}

EveryGrammarParser.PointTerm_IntegerDivisionContext = PointTerm_IntegerDivisionContext;

class PointTerm_BitShiftRightContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	BITSHIFTRIGHT() {
	    return this.getToken(EveryGrammarParser.BITSHIFTRIGHT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_BitShiftRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_BitShiftRight(this);
		}
	}


}

EveryGrammarParser.PointTerm_BitShiftRightContext = PointTerm_BitShiftRightContext;

class PointTerm_DivideContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	DIVIDE() {
	    return this.getToken(EveryGrammarParser.DIVIDE, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Divide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Divide(this);
		}
	}


}

EveryGrammarParser.PointTerm_DivideContext = PointTerm_DivideContext;

class PointTerm_NextContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Next(this);
		}
	}


}

EveryGrammarParser.PointTerm_NextContext = PointTerm_NextContext;

class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_factor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Factor_CheckFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check_function_term() {
	    return this.getTypedRuleContext(Check_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_CheckFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_CheckFunction(this);
		}
	}


}

EveryGrammarParser.Factor_CheckFunctionContext = Factor_CheckFunctionContext;

class Factor_FalseContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FALSE() {
	    return this.getToken(EveryGrammarParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_False(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_False(this);
		}
	}


}

EveryGrammarParser.Factor_FalseContext = Factor_FalseContext;

class Factor_IntegerContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INT() {
	    return this.getToken(EveryGrammarParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Integer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Integer(this);
		}
	}


}

EveryGrammarParser.Factor_IntegerContext = Factor_IntegerContext;

class Factor_ObjectVariablesContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OBJECTSVARIABLE() {
	    return this.getToken(EveryGrammarParser.OBJECTSVARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_ObjectVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_ObjectVariables(this);
		}
	}


}

EveryGrammarParser.Factor_ObjectVariablesContext = Factor_ObjectVariablesContext;

class Factor_DateTimeTermContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	datetime_term() {
	    return this.getTypedRuleContext(Datetime_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_DateTimeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_DateTimeTerm(this);
		}
	}


}

EveryGrammarParser.Factor_DateTimeTermContext = Factor_DateTimeTermContext;

class Factor_ConvertFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	convert_function_term() {
	    return this.getTypedRuleContext(Convert_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_ConvertFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_ConvertFunction(this);
		}
	}


}

EveryGrammarParser.Factor_ConvertFunctionContext = Factor_ConvertFunctionContext;

class Factor_TrueContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUE() {
	    return this.getToken(EveryGrammarParser.TRUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_True(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_True(this);
		}
	}


}

EveryGrammarParser.Factor_TrueContext = Factor_TrueContext;

class Factor_NotContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(EveryGrammarParser.NOT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Not(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Not(this);
		}
	}


}

EveryGrammarParser.Factor_NotContext = Factor_NotContext;

class Factor_RandomFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	random_function_term() {
	    return this.getTypedRuleContext(Random_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_RandomFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_RandomFunction(this);
		}
	}


}

EveryGrammarParser.Factor_RandomFunctionContext = Factor_RandomFunctionContext;

class Factor_FactorialContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FACTORIAL() {
	    return this.getToken(EveryGrammarParser.FACTORIAL, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Factorial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Factorial(this);
		}
	}


}

EveryGrammarParser.Factor_FactorialContext = Factor_FactorialContext;

class Factor_BracketsContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROUNDBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Brackets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Brackets(this);
		}
	}


}

EveryGrammarParser.Factor_BracketsContext = Factor_BracketsContext;

class Factor_MathFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	math_function_term() {
	    return this.getTypedRuleContext(Math_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_MathFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_MathFunction(this);
		}
	}


}

EveryGrammarParser.Factor_MathFunctionContext = Factor_MathFunctionContext;

class Factor_PlusContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(EveryGrammarParser.ADD, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Plus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Plus(this);
		}
	}


}

EveryGrammarParser.Factor_PlusContext = Factor_PlusContext;

class Factor_TildeContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TILDE() {
	    return this.getToken(EveryGrammarParser.TILDE, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Tilde(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Tilde(this);
		}
	}


}

EveryGrammarParser.Factor_TildeContext = Factor_TildeContext;

class Factor_MinusContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUBTRACT() {
	    return this.getToken(EveryGrammarParser.SUBTRACT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Minus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Minus(this);
		}
	}


}

EveryGrammarParser.Factor_MinusContext = Factor_MinusContext;

class Factor_VariableContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(EveryGrammarParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Variable(this);
		}
	}


}

EveryGrammarParser.Factor_VariableContext = Factor_VariableContext;

class Factor_StringContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(EveryGrammarParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_String(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_String(this);
		}
	}


}

EveryGrammarParser.Factor_StringContext = Factor_StringContext;

class Factor_DoubleContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOUBLE() {
	    return this.getToken(EveryGrammarParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Double(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Double(this);
		}
	}


}

EveryGrammarParser.Factor_DoubleContext = Factor_DoubleContext;

class Factor_ArrayContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	array_expr() {
	    return this.getTypedRuleContext(Array_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Array(this);
		}
	}


}

EveryGrammarParser.Factor_ArrayContext = Factor_ArrayContext;

class Factor_DefaultFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	default_function_term() {
	    return this.getTypedRuleContext(Default_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_DefaultFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_DefaultFunction(this);
		}
	}


}

EveryGrammarParser.Factor_DefaultFunctionContext = Factor_DefaultFunctionContext;

class Factor_StatisticMathFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	statistic_math_function_term() {
	    return this.getTypedRuleContext(Statistic_math_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_StatisticMathFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_StatisticMathFunction(this);
		}
	}


}

EveryGrammarParser.Factor_StatisticMathFunctionContext = Factor_StatisticMathFunctionContext;

class Random_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_random_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Random_DecimalArrayMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_DecimalArrayMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_DecimalArrayMinMax(this);
		}
	}


}

EveryGrammarParser.Random_DecimalArrayMinMaxContext = Random_DecimalArrayMinMaxContext;

class Random_IntegerArrayContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_IntegerArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_IntegerArray(this);
		}
	}


}

EveryGrammarParser.Random_IntegerArrayContext = Random_IntegerArrayContext;

class Random_IntegerContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_Integer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_Integer(this);
		}
	}


}

EveryGrammarParser.Random_IntegerContext = Random_IntegerContext;

class Random_DecimalArrayContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_DecimalArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_DecimalArray(this);
		}
	}


}

EveryGrammarParser.Random_DecimalArrayContext = Random_DecimalArrayContext;

class Random_DecimalMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_DecimalMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_DecimalMinMax(this);
		}
	}


}

EveryGrammarParser.Random_DecimalMinMaxContext = Random_DecimalMinMaxContext;

class Random_IntegerArrayMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_IntegerArrayMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_IntegerArrayMinMax(this);
		}
	}


}

EveryGrammarParser.Random_IntegerArrayMinMaxContext = Random_IntegerArrayMinMaxContext;

class Random_DecimalContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_Decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_Decimal(this);
		}
	}


}

EveryGrammarParser.Random_DecimalContext = Random_DecimalContext;

class Random_IntegerMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_IntegerMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_IntegerMinMax(this);
		}
	}


}

EveryGrammarParser.Random_IntegerMinMaxContext = Random_IntegerMinMaxContext;

class Convert_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_convert_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Convert_ToNumberContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToNumber() {
	    return this.getToken(EveryGrammarParser.ToNumber, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToNumber(this);
		}
	}


}

EveryGrammarParser.Convert_ToNumberContext = Convert_ToNumberContext;

class Convert_ToBooleanContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToBoolean() {
	    return this.getToken(EveryGrammarParser.ToBoolean, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToBoolean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToBoolean(this);
		}
	}


}

EveryGrammarParser.Convert_ToBooleanContext = Convert_ToBooleanContext;

class Convert_GradToDegreeContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GradToDegree() {
	    return this.getToken(EveryGrammarParser.GradToDegree, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_GradToDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_GradToDegree(this);
		}
	}


}

EveryGrammarParser.Convert_GradToDegreeContext = Convert_GradToDegreeContext;

class Convert_ToStringContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToString() {
	    return this.getToken(EveryGrammarParser.ToString, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToString(this);
		}
	}


}

EveryGrammarParser.Convert_ToStringContext = Convert_ToStringContext;

class Convert_ToArrayContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToArray() {
	    return this.getToken(EveryGrammarParser.ToArray, 0);
	};

	expr_args() {
	    return this.getTypedRuleContext(Expr_argsContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToArray(this);
		}
	}


}

EveryGrammarParser.Convert_ToArrayContext = Convert_ToArrayContext;

class Convert_DegreeToGradContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DegreeToGrad() {
	    return this.getToken(EveryGrammarParser.DegreeToGrad, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_DegreeToGrad(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_DegreeToGrad(this);
		}
	}


}

EveryGrammarParser.Convert_DegreeToGradContext = Convert_DegreeToGradContext;

class Convert_DegreeToRadianContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DegreeToRadian() {
	    return this.getToken(EveryGrammarParser.DegreeToRadian, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_DegreeToRadian(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_DegreeToRadian(this);
		}
	}


}

EveryGrammarParser.Convert_DegreeToRadianContext = Convert_DegreeToRadianContext;

class Convert_RadianToGradContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RadianToGrad() {
	    return this.getToken(EveryGrammarParser.RadianToGrad, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_RadianToGrad(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_RadianToGrad(this);
		}
	}


}

EveryGrammarParser.Convert_RadianToGradContext = Convert_RadianToGradContext;

class Convert_GradToRadianContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GradToRadian() {
	    return this.getToken(EveryGrammarParser.GradToRadian, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_GradToRadian(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_GradToRadian(this);
		}
	}


}

EveryGrammarParser.Convert_GradToRadianContext = Convert_GradToRadianContext;

class Convert_RadianToDegreeContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RadianToDegree() {
	    return this.getToken(EveryGrammarParser.RadianToDegree, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_RadianToDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_RadianToDegree(this);
		}
	}


}

EveryGrammarParser.Convert_RadianToDegreeContext = Convert_RadianToDegreeContext;

class Datetime_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_datetime_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DateTime_DateHourMinuteContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateHourMinute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateHourMinute(this);
		}
	}


}

EveryGrammarParser.DateTime_DateHourMinuteContext = DateTime_DateHourMinuteContext;

class DateTime_DateHourMinuteSecondsContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateHourMinuteSeconds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateHourMinuteSeconds(this);
		}
	}


}

EveryGrammarParser.DateTime_DateHourMinuteSecondsContext = DateTime_DateHourMinuteSecondsContext;

class DateTime_DateEntryContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateEntry(this);
		}
	}


}

EveryGrammarParser.DateTime_DateEntryContext = DateTime_DateEntryContext;

class DateTime_FullContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_Full(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_Full(this);
		}
	}


}

EveryGrammarParser.DateTime_FullContext = DateTime_FullContext;

class DateTime_ExpressionContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_Expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_Expression(this);
		}
	}


}

EveryGrammarParser.DateTime_ExpressionContext = DateTime_ExpressionContext;

class DateTime_DateHourContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateHour(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateHour(this);
		}
	}


}

EveryGrammarParser.DateTime_DateHourContext = DateTime_DateHourContext;

class Array_slicing_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_array_slicing_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArraySlicing_IndexingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_Indexing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_Indexing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_IndexingContext = ArraySlicing_IndexingContext;

class ArraySlicing_EndSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_EndSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_EndSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_EndSlicingContext = ArraySlicing_EndSlicingContext;

class ArraySlicing_AllStepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_AllStepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_AllStepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_AllStepSlicingContext = ArraySlicing_AllStepSlicingContext;

class ArraySlicing_StartSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_StartSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_StartSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_StartSlicingContext = ArraySlicing_StartSlicingContext;

class ArraySlicing_SlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_Slicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_Slicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_SlicingContext = ArraySlicing_SlicingContext;

class ArraySlicing_StepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_StepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_StepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_StepSlicingContext = ArraySlicing_StepSlicingContext;

class ArraySlicing_StartStepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_StartStepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_StartStepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_StartStepSlicingContext = ArraySlicing_StartStepSlicingContext;

class ArraySlicing_EndStepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_EndStepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_EndStepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_EndStepSlicingContext = ArraySlicing_EndStepSlicingContext;

class Check_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_check_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CheckFunction_IsStringContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsString() {
	    return this.getToken(EveryGrammarParser.IsString, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsString(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsStringContext = CheckFunction_IsStringContext;

class CheckFunction_IsArrayContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsArray() {
	    return this.getToken(EveryGrammarParser.IsArray, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsArray(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsArrayContext = CheckFunction_IsArrayContext;

class CheckFunction_IsBooleanContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsBoolean() {
	    return this.getToken(EveryGrammarParser.IsBoolean, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsBoolean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsBoolean(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsBooleanContext = CheckFunction_IsBooleanContext;

class CheckFunction_IsDateTimeContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsDateTime() {
	    return this.getToken(EveryGrammarParser.IsDateTime, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsDateTime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsDateTime(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsDateTimeContext = CheckFunction_IsDateTimeContext;

class CheckFunction_IsWhitespaceContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsWhitespace() {
	    return this.getToken(EveryGrammarParser.IsWhitespace, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsWhitespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsWhitespace(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsWhitespaceContext = CheckFunction_IsWhitespaceContext;

class CheckFunction_HasDuplicatesContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HasDuplicates() {
	    return this.getToken(EveryGrammarParser.HasDuplicates, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_HasDuplicates(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_HasDuplicates(this);
		}
	}


}

EveryGrammarParser.CheckFunction_HasDuplicatesContext = CheckFunction_HasDuplicatesContext;

class CheckFunction_HasAnyContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HasAny() {
	    return this.getToken(EveryGrammarParser.HasAny, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_HasAny(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_HasAny(this);
		}
	}


}

EveryGrammarParser.CheckFunction_HasAnyContext = CheckFunction_HasAnyContext;

class CheckFunction_IsNullContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsNull() {
	    return this.getToken(EveryGrammarParser.IsNull, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsNull(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsNullContext = CheckFunction_IsNullContext;

class CheckFunction_IsNumberContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsNumber() {
	    return this.getToken(EveryGrammarParser.IsNumber, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsNumber(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsNumberContext = CheckFunction_IsNumberContext;

class Default_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_default_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Function_ExceptContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Except() {
	    return this.getToken(EveryGrammarParser.Except, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Except(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Except(this);
		}
	}


}

EveryGrammarParser.Function_ExceptContext = Function_ExceptContext;

class Function_DifferenceContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Difference() {
	    return this.getToken(EveryGrammarParser.Difference, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Difference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Difference(this);
		}
	}


}

EveryGrammarParser.Function_DifferenceContext = Function_DifferenceContext;

class Function_ConcatContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Concat() {
	    return this.getToken(EveryGrammarParser.Concat, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Concat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Concat(this);
		}
	}


}

EveryGrammarParser.Function_ConcatContext = Function_ConcatContext;

class Function_IndexOfContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(EveryGrammarParser.IndexOf, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_IndexOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_IndexOf(this);
		}
	}


}

EveryGrammarParser.Function_IndexOfContext = Function_IndexOfContext;

class Function_DistincContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Distinct() {
	    return this.getToken(EveryGrammarParser.Distinct, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Distinc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Distinc(this);
		}
	}


}

EveryGrammarParser.Function_DistincContext = Function_DistincContext;

class Function_LowerContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LowerCase() {
	    return this.getToken(EveryGrammarParser.LowerCase, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Lower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Lower(this);
		}
	}


}

EveryGrammarParser.Function_LowerContext = Function_LowerContext;

class Function_UpperContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UpperCase() {
	    return this.getToken(EveryGrammarParser.UpperCase, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Upper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Upper(this);
		}
	}


}

EveryGrammarParser.Function_UpperContext = Function_UpperContext;

class Function_TrimContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Trim() {
	    return this.getToken(EveryGrammarParser.Trim, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Trim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Trim(this);
		}
	}


}

EveryGrammarParser.Function_TrimContext = Function_TrimContext;

class Function_IndexOfStartContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(EveryGrammarParser.IndexOf, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_IndexOfStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_IndexOfStart(this);
		}
	}


}

EveryGrammarParser.Function_IndexOfStartContext = Function_IndexOfStartContext;

class Function_IndexOfStartEndContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(EveryGrammarParser.IndexOf, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_IndexOfStartEnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_IndexOfStartEnd(this);
		}
	}


}

EveryGrammarParser.Function_IndexOfStartEndContext = Function_IndexOfStartEndContext;

class Function_SortContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sort() {
	    return this.getToken(EveryGrammarParser.Sort, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Sort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Sort(this);
		}
	}


}

EveryGrammarParser.Function_SortContext = Function_SortContext;

class Function_CountContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Count() {
	    return this.getToken(EveryGrammarParser.Count, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Count(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Count(this);
		}
	}


}

EveryGrammarParser.Function_CountContext = Function_CountContext;

class Function_ReverseContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Reverse() {
	    return this.getToken(EveryGrammarParser.Reverse, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Reverse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Reverse(this);
		}
	}


}

EveryGrammarParser.Function_ReverseContext = Function_ReverseContext;

class Math_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_math_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Math_NormContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Norm() {
	    return this.getToken(EveryGrammarParser.Norm, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Norm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Norm(this);
		}
	}


}

EveryGrammarParser.Math_NormContext = Math_NormContext;

class Math_CscHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CscH() {
	    return this.getToken(EveryGrammarParser.CscH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CscH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CscH(this);
		}
	}


}

EveryGrammarParser.Math_CscHContext = Math_CscHContext;

class Math_ASinContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASin() {
	    return this.getToken(EveryGrammarParser.ASin, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASin(this);
		}
	}


}

EveryGrammarParser.Math_ASinContext = Math_ASinContext;

class Math_TanHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TanH() {
	    return this.getToken(EveryGrammarParser.TanH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_TanH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_TanH(this);
		}
	}


}

EveryGrammarParser.Math_TanHContext = Math_TanHContext;

class Math_EulerNormContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EulerNorm() {
	    return this.getToken(EveryGrammarParser.EulerNorm, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_EulerNorm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_EulerNorm(this);
		}
	}


}

EveryGrammarParser.Math_EulerNormContext = Math_EulerNormContext;

class Math_ASecContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASec() {
	    return this.getToken(EveryGrammarParser.ASec, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASec(this);
		}
	}


}

EveryGrammarParser.Math_ASecContext = Math_ASecContext;

class Math_DerivativeContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Derivative() {
	    return this.getToken(EveryGrammarParser.Derivative, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Derivative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Derivative(this);
		}
	}


}

EveryGrammarParser.Math_DerivativeContext = Math_DerivativeContext;

class Math_Round_Not_DecimalContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Round() {
	    return this.getToken(EveryGrammarParser.Round, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Round_Not_Decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Round_Not_Decimal(this);
		}
	}


}

EveryGrammarParser.Math_Round_Not_DecimalContext = Math_Round_Not_DecimalContext;

class Math_DotProductContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DotProduct() {
	    return this.getToken(EveryGrammarParser.DotProduct, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_DotProduct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_DotProduct(this);
		}
	}


}

EveryGrammarParser.Math_DotProductContext = Math_DotProductContext;

class Math_ASinHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASinH() {
	    return this.getToken(EveryGrammarParser.ASinH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASinH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASinH(this);
		}
	}


}

EveryGrammarParser.Math_ASinHContext = Math_ASinHContext;

class Math_CotHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CotH() {
	    return this.getToken(EveryGrammarParser.CotH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CotH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CotH(this);
		}
	}


}

EveryGrammarParser.Math_CotHContext = Math_CotHContext;

class Math_Max_ArrayContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Max() {
	    return this.getToken(EveryGrammarParser.Max, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Max_Array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Max_Array(this);
		}
	}


}

EveryGrammarParser.Math_Max_ArrayContext = Math_Max_ArrayContext;

class Math_CosContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Cos() {
	    return this.getToken(EveryGrammarParser.Cos, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Cos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Cos(this);
		}
	}


}

EveryGrammarParser.Math_CosContext = Math_CosContext;

class Math_CotContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Cot() {
	    return this.getToken(EveryGrammarParser.Cot, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Cot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Cot(this);
		}
	}


}

EveryGrammarParser.Math_CotContext = Math_CotContext;

class Math_ACscContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACsc() {
	    return this.getToken(EveryGrammarParser.ACsc, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACsc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACsc(this);
		}
	}


}

EveryGrammarParser.Math_ACscContext = Math_ACscContext;

class Math_TanContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Tan() {
	    return this.getToken(EveryGrammarParser.Tan, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Tan(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Tan(this);
		}
	}


}

EveryGrammarParser.Math_TanContext = Math_TanContext;

class Math_BinomilaContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Binomial() {
	    return this.getToken(EveryGrammarParser.Binomial, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Binomila(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Binomila(this);
		}
	}


}

EveryGrammarParser.Math_BinomilaContext = Math_BinomilaContext;

class Math_ExpContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Exp() {
	    return this.getToken(EveryGrammarParser.Exp, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Exp(this);
		}
	}


}

EveryGrammarParser.Math_ExpContext = Math_ExpContext;

class Math_FloorContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Floor() {
	    return this.getToken(EveryGrammarParser.Floor, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Floor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Floor(this);
		}
	}


}

EveryGrammarParser.Math_FloorContext = Math_FloorContext;

class Math_RootContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Root() {
	    return this.getToken(EveryGrammarParser.Root, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Root(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Root(this);
		}
	}


}

EveryGrammarParser.Math_RootContext = Math_RootContext;

class Math_ACotHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACotH() {
	    return this.getToken(EveryGrammarParser.ACotH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACotH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACotH(this);
		}
	}


}

EveryGrammarParser.Math_ACotHContext = Math_ACotHContext;

class Math_CbrtContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Cbrt() {
	    return this.getToken(EveryGrammarParser.Cbrt, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Cbrt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Cbrt(this);
		}
	}


}

EveryGrammarParser.Math_CbrtContext = Math_CbrtContext;

class Math_ACotContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACot() {
	    return this.getToken(EveryGrammarParser.ACot, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACot(this);
		}
	}


}

EveryGrammarParser.Math_ACotContext = Math_ACotContext;

class Math_ACosContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACos() {
	    return this.getToken(EveryGrammarParser.ACos, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACos(this);
		}
	}


}

EveryGrammarParser.Math_ACosContext = Math_ACosContext;

class Math_ATanHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATanH() {
	    return this.getToken(EveryGrammarParser.ATanH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ATanH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ATanH(this);
		}
	}


}

EveryGrammarParser.Math_ATanHContext = Math_ATanHContext;

class Math_CrossSumContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CrossSum() {
	    return this.getToken(EveryGrammarParser.CrossSum, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CrossSum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CrossSum(this);
		}
	}


}

EveryGrammarParser.Math_CrossSumContext = Math_CrossSumContext;

class Math_GreatesCommonDivisorContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GreatestCommonDivisor() {
	    return this.getToken(EveryGrammarParser.GreatestCommonDivisor, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_GreatesCommonDivisor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_GreatesCommonDivisor(this);
		}
	}


}

EveryGrammarParser.Math_GreatesCommonDivisorContext = Math_GreatesCommonDivisorContext;

class Math_LogContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Log() {
	    return this.getToken(EveryGrammarParser.Log, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Log(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Log(this);
		}
	}


}

EveryGrammarParser.Math_LogContext = Math_LogContext;

class Math_Round_DecimalContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Round() {
	    return this.getToken(EveryGrammarParser.Round, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Round_Decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Round_Decimal(this);
		}
	}


}

EveryGrammarParser.Math_Round_DecimalContext = Math_Round_DecimalContext;

class Math_PowerContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Power() {
	    return this.getToken(EveryGrammarParser.Power, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Power(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Power(this);
		}
	}


}

EveryGrammarParser.Math_PowerContext = Math_PowerContext;

class Math_MaxNormContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MaxNorm() {
	    return this.getToken(EveryGrammarParser.MaxNorm, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_MaxNorm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_MaxNorm(this);
		}
	}


}

EveryGrammarParser.Math_MaxNormContext = Math_MaxNormContext;

class Math_ASecHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASecH() {
	    return this.getToken(EveryGrammarParser.ASecH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASecH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASecH(this);
		}
	}


}

EveryGrammarParser.Math_ASecHContext = Math_ASecHContext;

class Math_ACosHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACosH() {
	    return this.getToken(EveryGrammarParser.ACosH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACosH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACosH(this);
		}
	}


}

EveryGrammarParser.Math_ACosHContext = Math_ACosHContext;

class Math_ClampContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Clamp() {
	    return this.getToken(EveryGrammarParser.Clamp, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Clamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Clamp(this);
		}
	}


}

EveryGrammarParser.Math_ClampContext = Math_ClampContext;

class Math_Min_ArrayContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Min() {
	    return this.getToken(EveryGrammarParser.Min, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Min_Array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Min_Array(this);
		}
	}


}

EveryGrammarParser.Math_Min_ArrayContext = Math_Min_ArrayContext;

class Math_SinHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SinH() {
	    return this.getToken(EveryGrammarParser.SinH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_SinH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_SinH(this);
		}
	}


}

EveryGrammarParser.Math_SinHContext = Math_SinHContext;

class Math_Log2Context extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Log2() {
	    return this.getToken(EveryGrammarParser.Log2, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Log2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Log2(this);
		}
	}


}

EveryGrammarParser.Math_Log2Context = Math_Log2Context;

class Math_SecContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sec() {
	    return this.getToken(EveryGrammarParser.Sec, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Sec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Sec(this);
		}
	}


}

EveryGrammarParser.Math_SecContext = Math_SecContext;

class Math_ATan2Context extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATan2() {
	    return this.getToken(EveryGrammarParser.ATan2, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ATan2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ATan2(this);
		}
	}


}

EveryGrammarParser.Math_ATan2Context = Math_ATan2Context;

class Math_ACscHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACscH() {
	    return this.getToken(EveryGrammarParser.ACscH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACscH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACscH(this);
		}
	}


}

EveryGrammarParser.Math_ACscHContext = Math_ACscHContext;

class Math_ATanContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATan() {
	    return this.getToken(EveryGrammarParser.ATan, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ATan(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ATan(this);
		}
	}


}

EveryGrammarParser.Math_ATanContext = Math_ATanContext;

class Math_TruncateContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Truncate() {
	    return this.getToken(EveryGrammarParser.Truncate, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Truncate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Truncate(this);
		}
	}


}

EveryGrammarParser.Math_TruncateContext = Math_TruncateContext;

class Math_Max_TwoContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Max() {
	    return this.getToken(EveryGrammarParser.Max, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Max_Two(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Max_Two(this);
		}
	}


}

EveryGrammarParser.Math_Max_TwoContext = Math_Max_TwoContext;

class Math_LeastCommonMultipleContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LeastCommonMultiple() {
	    return this.getToken(EveryGrammarParser.LeastCommonMultiple, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_LeastCommonMultiple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_LeastCommonMultiple(this);
		}
	}


}

EveryGrammarParser.Math_LeastCommonMultipleContext = Math_LeastCommonMultipleContext;

class Math_IntegrationContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Integration() {
	    return this.getToken(EveryGrammarParser.Integration, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Integration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Integration(this);
		}
	}


}

EveryGrammarParser.Math_IntegrationContext = Math_IntegrationContext;

class Math_SqrtContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sqrt() {
	    return this.getToken(EveryGrammarParser.Sqrt, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Sqrt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Sqrt(this);
		}
	}


}

EveryGrammarParser.Math_SqrtContext = Math_SqrtContext;

class Math_Min_TwoContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Min() {
	    return this.getToken(EveryGrammarParser.Min, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Min_Two(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Min_Two(this);
		}
	}


}

EveryGrammarParser.Math_Min_TwoContext = Math_Min_TwoContext;

class Math_SinContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sin() {
	    return this.getToken(EveryGrammarParser.Sin, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Sin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Sin(this);
		}
	}


}

EveryGrammarParser.Math_SinContext = Math_SinContext;

class Math_CscContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Csc() {
	    return this.getToken(EveryGrammarParser.Csc, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Csc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Csc(this);
		}
	}


}

EveryGrammarParser.Math_CscContext = Math_CscContext;

class Math_AbsContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Abs() {
	    return this.getToken(EveryGrammarParser.Abs, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Abs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Abs(this);
		}
	}


}

EveryGrammarParser.Math_AbsContext = Math_AbsContext;

class Math_CosHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CosH() {
	    return this.getToken(EveryGrammarParser.CosH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CosH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CosH(this);
		}
	}


}

EveryGrammarParser.Math_CosHContext = Math_CosHContext;

class Math_CeillingContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Ceilling() {
	    return this.getToken(EveryGrammarParser.Ceilling, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Ceilling(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Ceilling(this);
		}
	}


}

EveryGrammarParser.Math_CeillingContext = Math_CeillingContext;

class Math_Log10Context extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Log10() {
	    return this.getToken(EveryGrammarParser.Log10, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Log10(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Log10(this);
		}
	}


}

EveryGrammarParser.Math_Log10Context = Math_Log10Context;

class Math_SecHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SecH() {
	    return this.getToken(EveryGrammarParser.SecH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_SecH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_SecH(this);
		}
	}


}

EveryGrammarParser.Math_SecHContext = Math_SecHContext;

class Statistic_math_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_statistic_math_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MathStatistic_PearsonContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Pearson() {
	    return this.getToken(EveryGrammarParser.Pearson, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Pearson(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Pearson(this);
		}
	}


}

EveryGrammarParser.MathStatistic_PearsonContext = MathStatistic_PearsonContext;

class MathStatistic_MedianContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Median() {
	    return this.getToken(EveryGrammarParser.Median, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Median(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Median(this);
		}
	}


}

EveryGrammarParser.MathStatistic_MedianContext = MathStatistic_MedianContext;

class MathStatistic_VarianceContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Variance() {
	    return this.getToken(EveryGrammarParser.Variance, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Variance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Variance(this);
		}
	}


}

EveryGrammarParser.MathStatistic_VarianceContext = MathStatistic_VarianceContext;

class MathStatistic_CoVarianceContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CoVariance() {
	    return this.getToken(EveryGrammarParser.CoVariance, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_CoVariance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_CoVariance(this);
		}
	}


}

EveryGrammarParser.MathStatistic_CoVarianceContext = MathStatistic_CoVarianceContext;

class MathStatistic_SpearmanContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Spearman() {
	    return this.getToken(EveryGrammarParser.Spearman, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Spearman(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Spearman(this);
		}
	}


}

EveryGrammarParser.MathStatistic_SpearmanContext = MathStatistic_SpearmanContext;

class MathStatistic_MeanContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Mean() {
	    return this.getToken(EveryGrammarParser.Mean, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Mean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Mean(this);
		}
	}


}

EveryGrammarParser.MathStatistic_MeanContext = MathStatistic_MeanContext;

class MathStatistic_QuantilContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Quantil() {
	    return this.getToken(EveryGrammarParser.Quantil, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Quantil(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Quantil(this);
		}
	}


}

EveryGrammarParser.MathStatistic_QuantilContext = MathStatistic_QuantilContext;

class MathStatistic_StDContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Std() {
	    return this.getToken(EveryGrammarParser.Std, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_StD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_StD(this);
		}
	}


}

EveryGrammarParser.MathStatistic_StDContext = MathStatistic_StDContext;

class Expr_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_expr_args;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	expr_args() {
	    return this.getTypedRuleContext(Expr_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterExpr_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitExpr_args(this);
		}
	}


}



class Array_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_array_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArrayCreationContext extends Array_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expr_args() {
	    return this.getTypedRuleContext(Expr_argsContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArrayCreation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArrayCreation(this);
		}
	}


}

EveryGrammarParser.ArrayCreationContext = ArrayCreationContext;

class ArrayCreation_EmptyContext extends Array_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArrayCreation_Empty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArrayCreation_Empty(this);
		}
	}


}

EveryGrammarParser.ArrayCreation_EmptyContext = ArrayCreation_EmptyContext;


EveryGrammarParser.StartRuleContext = StartRuleContext; 
EveryGrammarParser.ExpressionContext = ExpressionContext; 
EveryGrammarParser.If_elseContext = If_elseContext; 
EveryGrammarParser.Inner_if_elseContext = Inner_if_elseContext; 
EveryGrammarParser.Bool_or_termContext = Bool_or_termContext; 
EveryGrammarParser.Bool_xor_termContext = Bool_xor_termContext; 
EveryGrammarParser.Bool_and_termContext = Bool_and_termContext; 
EveryGrammarParser.EqualityContext = EqualityContext; 
EveryGrammarParser.CheckContext = CheckContext; 
EveryGrammarParser.Bit_or_termContext = Bit_or_termContext; 
EveryGrammarParser.Bit_and_termContext = Bit_and_termContext; 
EveryGrammarParser.Line_termContext = Line_termContext; 
EveryGrammarParser.Point_termContext = Point_termContext; 
EveryGrammarParser.FactorContext = FactorContext; 
EveryGrammarParser.Random_function_termContext = Random_function_termContext; 
EveryGrammarParser.Convert_function_termContext = Convert_function_termContext; 
EveryGrammarParser.Datetime_termContext = Datetime_termContext; 
EveryGrammarParser.Array_slicing_termContext = Array_slicing_termContext; 
EveryGrammarParser.Check_function_termContext = Check_function_termContext; 
EveryGrammarParser.Default_function_termContext = Default_function_termContext; 
EveryGrammarParser.Math_function_termContext = Math_function_termContext; 
EveryGrammarParser.Statistic_math_function_termContext = Statistic_math_function_termContext; 
EveryGrammarParser.Expr_argsContext = Expr_argsContext; 
EveryGrammarParser.Array_exprContext = Array_exprContext; 
