// Generated from EveryGrammar.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import EveryGrammarListener from './EveryGrammarListener.js';
const serializedATN = [4,1,135,863,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,3,2,63,8,2,1,3,1,3,1,3,1,3,1,3,3,3,70,8,3,1,4,1,4,
1,4,1,4,1,4,3,4,77,8,4,1,5,1,5,1,5,1,5,1,5,3,5,84,8,5,1,6,1,6,1,6,1,6,1,
6,1,6,5,6,92,8,6,10,6,12,6,95,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,119,8,7,10,7,12,7,
122,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,
139,8,8,10,8,12,8,142,9,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,150,8,9,10,9,12,9,
153,9,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,161,8,10,10,10,12,10,164,9,10,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,175,8,11,10,11,12,11,178,
9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,204,8,12,10,12,
12,12,207,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,3,13,238,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,3,14,280,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,3,15,322,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,388,8,16,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,3,17,438,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,476,
8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,548,
8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,804,8,20,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,846,8,21,1,22,1,22,1,22,1,22,
1,22,3,22,853,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,861,8,23,1,23,0,7,
12,14,16,18,20,22,24,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,0,0,995,0,48,1,0,0,0,2,50,1,0,0,0,4,62,1,0,0,0,6,69,1,
0,0,0,8,76,1,0,0,0,10,83,1,0,0,0,12,85,1,0,0,0,14,96,1,0,0,0,16,123,1,0,
0,0,18,143,1,0,0,0,20,154,1,0,0,0,22,165,1,0,0,0,24,179,1,0,0,0,26,237,1,
0,0,0,28,279,1,0,0,0,30,321,1,0,0,0,32,387,1,0,0,0,34,437,1,0,0,0,36,475,
1,0,0,0,38,547,1,0,0,0,40,803,1,0,0,0,42,845,1,0,0,0,44,852,1,0,0,0,46,860,
1,0,0,0,48,49,3,2,1,0,49,1,1,0,0,0,50,51,3,4,2,0,51,3,1,0,0,0,52,63,3,6,
3,0,53,54,3,6,3,0,54,55,3,34,17,0,55,63,1,0,0,0,56,57,3,6,3,0,57,58,5,23,
0,0,58,59,3,6,3,0,59,60,5,22,0,0,60,61,3,6,3,0,61,63,1,0,0,0,62,52,1,0,0,
0,62,53,1,0,0,0,62,56,1,0,0,0,63,5,1,0,0,0,64,70,3,8,4,0,65,66,5,32,0,0,
66,67,3,4,2,0,67,68,5,33,0,0,68,70,1,0,0,0,69,64,1,0,0,0,69,65,1,0,0,0,70,
7,1,0,0,0,71,77,3,10,5,0,72,73,3,10,5,0,73,74,5,13,0,0,74,75,3,10,5,0,75,
77,1,0,0,0,76,71,1,0,0,0,76,72,1,0,0,0,77,9,1,0,0,0,78,84,3,12,6,0,79,80,
3,12,6,0,80,81,5,7,0,0,81,82,3,12,6,0,82,84,1,0,0,0,83,78,1,0,0,0,83,79,
1,0,0,0,84,11,1,0,0,0,85,86,6,6,-1,0,86,87,3,14,7,0,87,93,1,0,0,0,88,89,
10,1,0,0,89,90,5,14,0,0,90,92,3,14,7,0,91,88,1,0,0,0,92,95,1,0,0,0,93,91,
1,0,0,0,93,94,1,0,0,0,94,13,1,0,0,0,95,93,1,0,0,0,96,97,6,7,-1,0,97,98,3,
16,8,0,98,120,1,0,0,0,99,100,10,6,0,0,100,101,5,8,0,0,101,119,3,16,8,0,102,
103,10,5,0,0,103,104,5,11,0,0,104,119,3,16,8,0,105,106,10,4,0,0,106,107,
5,9,0,0,107,119,3,16,8,0,108,109,10,3,0,0,109,110,5,12,0,0,110,119,3,16,
8,0,111,112,10,2,0,0,112,113,5,27,0,0,113,119,3,16,8,0,114,115,10,1,0,0,
115,116,5,10,0,0,116,117,5,27,0,0,117,119,3,16,8,0,118,99,1,0,0,0,118,102,
1,0,0,0,118,105,1,0,0,0,118,108,1,0,0,0,118,111,1,0,0,0,118,114,1,0,0,0,
119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,15,1,0,0,0,122,120,1,
0,0,0,123,124,6,8,-1,0,124,125,3,18,9,0,125,140,1,0,0,0,126,127,10,4,0,0,
127,128,5,19,0,0,128,139,3,18,9,0,129,130,10,3,0,0,130,131,5,17,0,0,131,
139,3,18,9,0,132,133,10,2,0,0,133,134,5,20,0,0,134,139,3,18,9,0,135,136,
10,1,0,0,136,137,5,18,0,0,137,139,3,18,9,0,138,126,1,0,0,0,138,129,1,0,0,
0,138,132,1,0,0,0,138,135,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,
1,0,0,0,141,17,1,0,0,0,142,140,1,0,0,0,143,144,6,9,-1,0,144,145,3,20,10,
0,145,151,1,0,0,0,146,147,10,1,0,0,147,148,5,15,0,0,148,150,3,20,10,0,149,
146,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,19,1,0,0,
0,153,151,1,0,0,0,154,155,6,10,-1,0,155,156,3,22,11,0,156,162,1,0,0,0,157,
158,10,1,0,0,158,159,5,16,0,0,159,161,3,22,11,0,160,157,1,0,0,0,161,164,
1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,21,1,0,0,0,164,162,1,0,0,0,165,
166,6,11,-1,0,166,167,3,24,12,0,167,176,1,0,0,0,168,169,10,2,0,0,169,170,
5,1,0,0,170,175,3,24,12,0,171,172,10,1,0,0,172,173,5,2,0,0,173,175,3,24,
12,0,174,168,1,0,0,0,174,171,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,
177,1,0,0,0,177,23,1,0,0,0,178,176,1,0,0,0,179,180,6,12,-1,0,180,181,3,26,
13,0,181,205,1,0,0,0,182,183,10,7,0,0,183,184,5,3,0,0,184,204,3,26,13,0,
185,186,10,6,0,0,186,187,5,6,0,0,187,204,3,26,13,0,188,189,10,5,0,0,189,
190,5,5,0,0,190,204,3,26,13,0,191,192,10,4,0,0,192,193,5,25,0,0,193,204,
3,26,13,0,194,195,10,3,0,0,195,196,5,26,0,0,196,204,3,26,13,0,197,198,10,
2,0,0,198,199,5,4,0,0,199,204,3,26,13,0,200,201,10,1,0,0,201,202,5,24,0,
0,202,204,3,26,13,0,203,182,1,0,0,0,203,185,1,0,0,0,203,188,1,0,0,0,203,
191,1,0,0,0,203,194,1,0,0,0,203,197,1,0,0,0,203,200,1,0,0,0,204,207,1,0,
0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,25,1,0,0,0,207,205,1,0,0,0,208,209,
5,10,0,0,209,238,3,26,13,0,210,211,5,2,0,0,211,238,3,26,13,0,212,213,5,1,
0,0,213,238,3,26,13,0,214,215,5,21,0,0,215,238,3,26,13,0,216,217,5,28,0,
0,217,238,3,26,13,0,218,219,5,32,0,0,219,220,3,2,1,0,220,221,5,33,0,0,221,
238,1,0,0,0,222,238,5,30,0,0,223,238,5,31,0,0,224,238,5,40,0,0,225,238,5,
36,0,0,226,238,5,38,0,0,227,238,5,39,0,0,228,238,5,37,0,0,229,238,3,32,16,
0,230,238,3,46,23,0,231,238,3,38,19,0,232,238,3,36,18,0,233,238,3,30,15,
0,234,238,3,40,20,0,235,238,3,28,14,0,236,238,3,42,21,0,237,208,1,0,0,0,
237,210,1,0,0,0,237,212,1,0,0,0,237,214,1,0,0,0,237,216,1,0,0,0,237,218,
1,0,0,0,237,222,1,0,0,0,237,223,1,0,0,0,237,224,1,0,0,0,237,225,1,0,0,0,
237,226,1,0,0,0,237,227,1,0,0,0,237,228,1,0,0,0,237,229,1,0,0,0,237,230,
1,0,0,0,237,231,1,0,0,0,237,232,1,0,0,0,237,233,1,0,0,0,237,234,1,0,0,0,
237,235,1,0,0,0,237,236,1,0,0,0,238,27,1,0,0,0,239,240,5,134,0,0,240,280,
5,33,0,0,241,242,5,134,0,0,242,243,3,2,1,0,243,244,5,33,0,0,244,280,1,0,
0,0,245,246,5,134,0,0,246,247,3,2,1,0,247,248,5,29,0,0,248,249,3,2,1,0,249,
250,5,33,0,0,250,280,1,0,0,0,251,252,5,134,0,0,252,253,3,2,1,0,253,254,5,
29,0,0,254,255,3,2,1,0,255,256,5,29,0,0,256,257,3,2,1,0,257,258,5,33,0,0,
258,280,1,0,0,0,259,260,5,135,0,0,260,280,5,33,0,0,261,262,5,135,0,0,262,
263,3,2,1,0,263,264,5,33,0,0,264,280,1,0,0,0,265,266,5,135,0,0,266,267,3,
2,1,0,267,268,5,29,0,0,268,269,3,2,1,0,269,270,5,33,0,0,270,280,1,0,0,0,
271,272,5,135,0,0,272,273,3,2,1,0,273,274,5,29,0,0,274,275,3,2,1,0,275,276,
5,29,0,0,276,277,3,2,1,0,277,278,5,33,0,0,278,280,1,0,0,0,279,239,1,0,0,
0,279,241,1,0,0,0,279,245,1,0,0,0,279,251,1,0,0,0,279,259,1,0,0,0,279,261,
1,0,0,0,279,265,1,0,0,0,279,271,1,0,0,0,280,29,1,0,0,0,281,282,5,127,0,0,
282,283,3,44,22,0,283,284,5,33,0,0,284,322,1,0,0,0,285,286,5,126,0,0,286,
287,3,2,1,0,287,288,5,33,0,0,288,322,1,0,0,0,289,290,5,124,0,0,290,291,3,
2,1,0,291,292,5,33,0,0,292,322,1,0,0,0,293,294,5,125,0,0,294,295,3,2,1,0,
295,296,5,33,0,0,296,322,1,0,0,0,297,298,5,128,0,0,298,299,3,2,1,0,299,300,
5,33,0,0,300,322,1,0,0,0,301,302,5,129,0,0,302,303,3,2,1,0,303,304,5,33,
0,0,304,322,1,0,0,0,305,306,5,130,0,0,306,307,3,2,1,0,307,308,5,33,0,0,308,
322,1,0,0,0,309,310,5,131,0,0,310,311,3,2,1,0,311,312,5,33,0,0,312,322,1,
0,0,0,313,314,5,132,0,0,314,315,3,2,1,0,315,316,5,33,0,0,316,322,1,0,0,0,
317,318,5,133,0,0,318,319,3,2,1,0,319,320,5,33,0,0,320,322,1,0,0,0,321,281,
1,0,0,0,321,285,1,0,0,0,321,289,1,0,0,0,321,293,1,0,0,0,321,297,1,0,0,0,
321,301,1,0,0,0,321,305,1,0,0,0,321,309,1,0,0,0,321,313,1,0,0,0,321,317,
1,0,0,0,322,31,1,0,0,0,323,324,5,108,0,0,324,325,3,2,1,0,325,326,5,33,0,
0,326,388,1,0,0,0,327,328,5,108,0,0,328,329,3,2,1,0,329,330,5,29,0,0,330,
331,3,2,1,0,331,332,5,29,0,0,332,333,3,2,1,0,333,334,5,33,0,0,334,388,1,
0,0,0,335,336,5,108,0,0,336,337,3,2,1,0,337,338,5,29,0,0,338,339,3,2,1,0,
339,340,5,29,0,0,340,341,3,2,1,0,341,342,5,29,0,0,342,343,3,2,1,0,343,344,
5,33,0,0,344,388,1,0,0,0,345,346,5,108,0,0,346,347,3,2,1,0,347,348,5,29,
0,0,348,349,3,2,1,0,349,350,5,29,0,0,350,351,3,2,1,0,351,352,5,29,0,0,352,
353,3,2,1,0,353,354,5,29,0,0,354,355,3,2,1,0,355,356,5,33,0,0,356,388,1,
0,0,0,357,358,5,108,0,0,358,359,3,2,1,0,359,360,5,29,0,0,360,361,3,2,1,0,
361,362,5,29,0,0,362,363,3,2,1,0,363,364,5,29,0,0,364,365,3,2,1,0,365,366,
5,29,0,0,366,367,3,2,1,0,367,368,5,29,0,0,368,369,3,2,1,0,369,370,5,33,0,
0,370,388,1,0,0,0,371,372,5,108,0,0,372,373,3,2,1,0,373,374,5,29,0,0,374,
375,3,2,1,0,375,376,5,29,0,0,376,377,3,2,1,0,377,378,5,29,0,0,378,379,3,
2,1,0,379,380,5,29,0,0,380,381,3,2,1,0,381,382,5,29,0,0,382,383,3,2,1,0,
383,384,5,29,0,0,384,385,3,2,1,0,385,386,5,33,0,0,386,388,1,0,0,0,387,323,
1,0,0,0,387,327,1,0,0,0,387,335,1,0,0,0,387,345,1,0,0,0,387,357,1,0,0,0,
387,371,1,0,0,0,388,33,1,0,0,0,389,390,5,34,0,0,390,391,3,2,1,0,391,392,
5,35,0,0,392,438,1,0,0,0,393,394,5,34,0,0,394,395,3,2,1,0,395,396,5,22,0,
0,396,397,3,2,1,0,397,398,5,35,0,0,398,438,1,0,0,0,399,400,5,34,0,0,400,
401,3,2,1,0,401,402,5,22,0,0,402,403,3,2,1,0,403,404,5,22,0,0,404,405,3,
2,1,0,405,406,5,35,0,0,406,438,1,0,0,0,407,408,5,34,0,0,408,409,3,2,1,0,
409,410,5,22,0,0,410,411,5,35,0,0,411,438,1,0,0,0,412,413,5,34,0,0,413,414,
3,2,1,0,414,415,5,22,0,0,415,416,5,22,0,0,416,417,3,2,1,0,417,418,5,35,0,
0,418,438,1,0,0,0,419,420,5,34,0,0,420,421,5,22,0,0,421,422,3,2,1,0,422,
423,5,35,0,0,423,438,1,0,0,0,424,425,5,34,0,0,425,426,5,22,0,0,426,427,3,
2,1,0,427,428,5,22,0,0,428,429,3,2,1,0,429,430,5,35,0,0,430,438,1,0,0,0,
431,432,5,34,0,0,432,433,5,22,0,0,433,434,5,22,0,0,434,435,3,2,1,0,435,436,
5,35,0,0,436,438,1,0,0,0,437,389,1,0,0,0,437,393,1,0,0,0,437,399,1,0,0,0,
437,407,1,0,0,0,437,412,1,0,0,0,437,419,1,0,0,0,437,424,1,0,0,0,437,431,
1,0,0,0,438,35,1,0,0,0,439,440,5,121,0,0,440,441,3,2,1,0,441,442,5,33,0,
0,442,476,1,0,0,0,443,444,5,119,0,0,444,445,3,2,1,0,445,446,5,33,0,0,446,
476,1,0,0,0,447,448,5,120,0,0,448,449,3,2,1,0,449,450,5,33,0,0,450,476,1,
0,0,0,451,452,5,122,0,0,452,453,3,2,1,0,453,454,5,33,0,0,454,476,1,0,0,0,
455,456,5,118,0,0,456,457,3,2,1,0,457,458,5,33,0,0,458,476,1,0,0,0,459,460,
5,117,0,0,460,461,3,2,1,0,461,462,5,33,0,0,462,476,1,0,0,0,463,464,5,123,
0,0,464,465,3,2,1,0,465,466,5,33,0,0,466,476,1,0,0,0,467,468,5,114,0,0,468,
469,3,2,1,0,469,470,5,33,0,0,470,476,1,0,0,0,471,472,5,107,0,0,472,473,3,
2,1,0,473,474,5,33,0,0,474,476,1,0,0,0,475,439,1,0,0,0,475,443,1,0,0,0,475,
447,1,0,0,0,475,451,1,0,0,0,475,455,1,0,0,0,475,459,1,0,0,0,475,463,1,0,
0,0,475,467,1,0,0,0,475,471,1,0,0,0,476,37,1,0,0,0,477,478,5,103,0,0,478,
479,3,2,1,0,479,480,5,29,0,0,480,481,3,2,1,0,481,482,5,33,0,0,482,548,1,
0,0,0,483,484,5,104,0,0,484,485,3,2,1,0,485,486,5,33,0,0,486,548,1,0,0,0,
487,488,5,105,0,0,488,489,3,2,1,0,489,490,5,33,0,0,490,548,1,0,0,0,491,492,
5,106,0,0,492,493,3,2,1,0,493,494,5,29,0,0,494,495,3,2,1,0,495,496,5,33,
0,0,496,548,1,0,0,0,497,498,5,109,0,0,498,499,3,2,1,0,499,500,5,29,0,0,500,
501,3,2,1,0,501,502,5,33,0,0,502,548,1,0,0,0,503,504,5,110,0,0,504,505,3,
2,1,0,505,506,5,29,0,0,506,507,3,2,1,0,507,508,5,33,0,0,508,548,1,0,0,0,
509,510,5,110,0,0,510,511,3,2,1,0,511,512,5,29,0,0,512,513,3,2,1,0,513,514,
5,29,0,0,514,515,3,2,1,0,515,516,5,33,0,0,516,548,1,0,0,0,517,518,5,110,
0,0,518,519,3,2,1,0,519,520,5,29,0,0,520,521,3,2,1,0,521,522,5,29,0,0,522,
523,3,2,1,0,523,524,5,29,0,0,524,525,3,2,1,0,525,526,5,33,0,0,526,548,1,
0,0,0,527,528,5,111,0,0,528,529,3,2,1,0,529,530,5,33,0,0,530,548,1,0,0,0,
531,532,5,112,0,0,532,533,3,2,1,0,533,534,5,33,0,0,534,548,1,0,0,0,535,536,
5,113,0,0,536,537,3,2,1,0,537,538,5,33,0,0,538,548,1,0,0,0,539,540,5,115,
0,0,540,541,3,2,1,0,541,542,5,33,0,0,542,548,1,0,0,0,543,544,5,116,0,0,544,
545,3,2,1,0,545,546,5,33,0,0,546,548,1,0,0,0,547,477,1,0,0,0,547,483,1,0,
0,0,547,487,1,0,0,0,547,491,1,0,0,0,547,497,1,0,0,0,547,503,1,0,0,0,547,
509,1,0,0,0,547,517,1,0,0,0,547,527,1,0,0,0,547,531,1,0,0,0,547,535,1,0,
0,0,547,539,1,0,0,0,547,543,1,0,0,0,548,39,1,0,0,0,549,550,5,44,0,0,550,
551,3,2,1,0,551,552,5,33,0,0,552,804,1,0,0,0,553,554,5,45,0,0,554,555,3,
2,1,0,555,556,5,33,0,0,556,804,1,0,0,0,557,558,5,46,0,0,558,559,3,2,1,0,
559,560,5,33,0,0,560,804,1,0,0,0,561,562,5,47,0,0,562,563,3,2,1,0,563,564,
5,33,0,0,564,804,1,0,0,0,565,566,5,48,0,0,566,567,3,2,1,0,567,568,5,33,0,
0,568,804,1,0,0,0,569,570,5,49,0,0,570,571,3,2,1,0,571,572,5,33,0,0,572,
804,1,0,0,0,573,574,5,50,0,0,574,575,3,2,1,0,575,576,5,29,0,0,576,577,3,
2,1,0,577,578,5,33,0,0,578,804,1,0,0,0,579,580,5,51,0,0,580,581,3,2,1,0,
581,582,5,33,0,0,582,804,1,0,0,0,583,584,5,52,0,0,584,585,3,2,1,0,585,586,
5,33,0,0,586,804,1,0,0,0,587,588,5,53,0,0,588,589,3,2,1,0,589,590,5,33,0,
0,590,804,1,0,0,0,591,592,5,54,0,0,592,593,3,2,1,0,593,594,5,33,0,0,594,
804,1,0,0,0,595,596,5,55,0,0,596,597,3,2,1,0,597,598,5,33,0,0,598,804,1,
0,0,0,599,600,5,56,0,0,600,601,3,2,1,0,601,602,5,29,0,0,602,603,3,2,1,0,
603,604,5,29,0,0,604,605,3,2,1,0,605,606,5,33,0,0,606,804,1,0,0,0,607,608,
5,57,0,0,608,609,3,2,1,0,609,610,5,33,0,0,610,804,1,0,0,0,611,612,5,58,0,
0,612,613,3,2,1,0,613,614,5,29,0,0,614,615,3,2,1,0,615,616,5,29,0,0,616,
617,3,2,1,0,617,618,5,33,0,0,618,804,1,0,0,0,619,620,5,59,0,0,620,621,3,
2,1,0,621,622,5,33,0,0,622,804,1,0,0,0,623,624,5,60,0,0,624,625,3,2,1,0,
625,626,5,33,0,0,626,804,1,0,0,0,627,628,5,61,0,0,628,629,3,2,1,0,629,630,
5,29,0,0,630,631,3,2,1,0,631,632,5,29,0,0,632,633,3,2,1,0,633,634,5,29,0,
0,634,635,3,2,1,0,635,636,5,33,0,0,636,804,1,0,0,0,637,638,5,62,0,0,638,
639,3,2,1,0,639,640,5,29,0,0,640,641,3,2,1,0,641,642,5,33,0,0,642,804,1,
0,0,0,643,644,5,63,0,0,644,645,3,2,1,0,645,646,5,33,0,0,646,804,1,0,0,0,
647,648,5,64,0,0,648,649,3,2,1,0,649,650,5,33,0,0,650,804,1,0,0,0,651,652,
5,65,0,0,652,653,3,2,1,0,653,654,5,33,0,0,654,804,1,0,0,0,655,656,5,65,0,
0,656,657,3,2,1,0,657,658,5,29,0,0,658,659,3,2,1,0,659,660,5,33,0,0,660,
804,1,0,0,0,661,662,5,66,0,0,662,663,3,2,1,0,663,664,5,33,0,0,664,804,1,
0,0,0,665,666,5,66,0,0,666,667,3,2,1,0,667,668,5,29,0,0,668,669,3,2,1,0,
669,670,5,33,0,0,670,804,1,0,0,0,671,672,5,67,0,0,672,673,3,2,1,0,673,674,
5,29,0,0,674,675,3,2,1,0,675,676,5,33,0,0,676,804,1,0,0,0,677,678,5,68,0,
0,678,679,3,2,1,0,679,680,5,33,0,0,680,804,1,0,0,0,681,682,5,68,0,0,682,
683,3,2,1,0,683,684,5,29,0,0,684,685,3,2,1,0,685,686,5,33,0,0,686,804,1,
0,0,0,687,688,5,69,0,0,688,689,3,2,1,0,689,690,5,29,0,0,690,691,3,2,1,0,
691,692,5,33,0,0,692,804,1,0,0,0,693,694,5,70,0,0,694,695,3,2,1,0,695,696,
5,33,0,0,696,804,1,0,0,0,697,698,5,71,0,0,698,699,3,2,1,0,699,700,5,33,0,
0,700,804,1,0,0,0,701,702,5,72,0,0,702,703,3,2,1,0,703,704,5,33,0,0,704,
804,1,0,0,0,705,706,5,73,0,0,706,707,3,2,1,0,707,708,5,33,0,0,708,804,1,
0,0,0,709,710,5,74,0,0,710,711,3,2,1,0,711,712,5,33,0,0,712,804,1,0,0,0,
713,714,5,75,0,0,714,715,3,2,1,0,715,716,5,33,0,0,716,804,1,0,0,0,717,718,
5,76,0,0,718,719,3,2,1,0,719,720,5,29,0,0,720,721,3,2,1,0,721,722,5,33,0,
0,722,804,1,0,0,0,723,724,5,77,0,0,724,725,3,2,1,0,725,726,5,33,0,0,726,
804,1,0,0,0,727,728,5,78,0,0,728,729,3,2,1,0,729,730,5,33,0,0,730,804,1,
0,0,0,731,732,5,79,0,0,732,733,3,2,1,0,733,734,5,29,0,0,734,735,3,2,1,0,
735,736,5,33,0,0,736,804,1,0,0,0,737,738,5,80,0,0,738,739,3,2,1,0,739,740,
5,29,0,0,740,741,3,2,1,0,741,742,5,33,0,0,742,804,1,0,0,0,743,744,5,81,0,
0,744,745,3,2,1,0,745,746,5,29,0,0,746,747,3,2,1,0,747,748,5,33,0,0,748,
804,1,0,0,0,749,750,5,82,0,0,750,751,3,2,1,0,751,752,5,29,0,0,752,753,3,
2,1,0,753,754,5,33,0,0,754,804,1,0,0,0,755,756,5,83,0,0,756,757,3,2,1,0,
757,758,5,33,0,0,758,804,1,0,0,0,759,760,5,84,0,0,760,761,3,2,1,0,761,762,
5,33,0,0,762,804,1,0,0,0,763,764,5,85,0,0,764,765,3,2,1,0,765,766,5,33,0,
0,766,804,1,0,0,0,767,768,5,86,0,0,768,769,3,2,1,0,769,770,5,33,0,0,770,
804,1,0,0,0,771,772,5,87,0,0,772,773,3,2,1,0,773,774,5,33,0,0,774,804,1,
0,0,0,775,776,5,88,0,0,776,777,3,2,1,0,777,778,5,33,0,0,778,804,1,0,0,0,
779,780,5,89,0,0,780,781,3,2,1,0,781,782,5,33,0,0,782,804,1,0,0,0,783,784,
5,90,0,0,784,785,3,2,1,0,785,786,5,33,0,0,786,804,1,0,0,0,787,788,5,91,0,
0,788,789,3,2,1,0,789,790,5,33,0,0,790,804,1,0,0,0,791,792,5,92,0,0,792,
793,3,2,1,0,793,794,5,33,0,0,794,804,1,0,0,0,795,796,5,93,0,0,796,797,3,
2,1,0,797,798,5,33,0,0,798,804,1,0,0,0,799,800,5,94,0,0,800,801,3,2,1,0,
801,802,5,33,0,0,802,804,1,0,0,0,803,549,1,0,0,0,803,553,1,0,0,0,803,557,
1,0,0,0,803,561,1,0,0,0,803,565,1,0,0,0,803,569,1,0,0,0,803,573,1,0,0,0,
803,579,1,0,0,0,803,583,1,0,0,0,803,587,1,0,0,0,803,591,1,0,0,0,803,595,
1,0,0,0,803,599,1,0,0,0,803,607,1,0,0,0,803,611,1,0,0,0,803,619,1,0,0,0,
803,623,1,0,0,0,803,627,1,0,0,0,803,637,1,0,0,0,803,643,1,0,0,0,803,647,
1,0,0,0,803,651,1,0,0,0,803,655,1,0,0,0,803,661,1,0,0,0,803,665,1,0,0,0,
803,671,1,0,0,0,803,677,1,0,0,0,803,681,1,0,0,0,803,687,1,0,0,0,803,693,
1,0,0,0,803,697,1,0,0,0,803,701,1,0,0,0,803,705,1,0,0,0,803,709,1,0,0,0,
803,713,1,0,0,0,803,717,1,0,0,0,803,723,1,0,0,0,803,727,1,0,0,0,803,731,
1,0,0,0,803,737,1,0,0,0,803,743,1,0,0,0,803,749,1,0,0,0,803,755,1,0,0,0,
803,759,1,0,0,0,803,763,1,0,0,0,803,767,1,0,0,0,803,771,1,0,0,0,803,775,
1,0,0,0,803,779,1,0,0,0,803,783,1,0,0,0,803,787,1,0,0,0,803,791,1,0,0,0,
803,795,1,0,0,0,803,799,1,0,0,0,804,41,1,0,0,0,805,806,5,95,0,0,806,807,
3,2,1,0,807,808,5,29,0,0,808,809,3,2,1,0,809,810,5,33,0,0,810,846,1,0,0,
0,811,812,5,96,0,0,812,813,3,2,1,0,813,814,5,33,0,0,814,846,1,0,0,0,815,
816,5,97,0,0,816,817,3,2,1,0,817,818,5,33,0,0,818,846,1,0,0,0,819,820,5,
98,0,0,820,821,3,2,1,0,821,822,5,29,0,0,822,823,3,2,1,0,823,824,5,33,0,0,
824,846,1,0,0,0,825,826,5,99,0,0,826,827,3,2,1,0,827,828,5,29,0,0,828,829,
3,2,1,0,829,830,5,33,0,0,830,846,1,0,0,0,831,832,5,100,0,0,832,833,3,2,1,
0,833,834,5,29,0,0,834,835,3,2,1,0,835,836,5,33,0,0,836,846,1,0,0,0,837,
838,5,101,0,0,838,839,3,2,1,0,839,840,5,33,0,0,840,846,1,0,0,0,841,842,5,
102,0,0,842,843,3,2,1,0,843,844,5,33,0,0,844,846,1,0,0,0,845,805,1,0,0,0,
845,811,1,0,0,0,845,815,1,0,0,0,845,819,1,0,0,0,845,825,1,0,0,0,845,831,
1,0,0,0,845,837,1,0,0,0,845,841,1,0,0,0,846,43,1,0,0,0,847,853,3,2,1,0,848,
849,3,2,1,0,849,850,5,29,0,0,850,851,3,44,22,0,851,853,1,0,0,0,852,847,1,
0,0,0,852,848,1,0,0,0,853,45,1,0,0,0,854,855,5,34,0,0,855,861,5,35,0,0,856,
857,5,34,0,0,857,858,3,44,22,0,858,859,5,35,0,0,859,861,1,0,0,0,860,854,
1,0,0,0,860,856,1,0,0,0,861,47,1,0,0,0,26,62,69,76,83,93,118,120,138,140,
151,162,174,176,203,205,237,279,321,387,437,475,547,803,845,852,860];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class EveryGrammarParser extends antlr4.Parser {

    static grammarFileName = "EveryGrammar.g4";
    static literalNames = [ null, "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", 
                            "'^'", "'=='", "'=i'", "'not'", "'!='", "'!=i'", 
                            "'||'", "'&&'", "'|'", "'&'", "'>'", "'>='", 
                            "'<'", "'<='", "'~'", "':'", "'?'", "'//'", 
                            "'<<'", "'>>'", "'in'", "'!'", "','", "'true'", 
                            "'false'", "'('", "')'", "'['", "']'", null, 
                            null, null, null, null, null, "'e'", "'pi'", 
                            "'Abs('", "'ACos('", "'ACosH('", "'ASin('", 
                            "'ASinH('", "'ATan('", "'ATan2('", "'ATanH('", 
                            "'Cbrt('", "'Cos('", "'CosH('", "'Ceilling('", 
                            "'Clamp('", "'CrossSum('", "'Derivative('", 
                            "'Exp('", "'Floor('", "'Integration('", "'Log('", 
                            "'Log2('", "'Log10('", "'Max('", "'Min('", "'Pow('", 
                            "'Round('", "'Root('", "'Sin('", "'SinH('", 
                            "'Sqrt('", "'Tan('", "'TanH('", "'Truncate('", 
                            "'Norm('", "'EulerNorm('", "'MaxNorm('", "'Gcd('", 
                            "'Lcm('", "'DotProduct('", "'Binomial('", "'ACot('", 
                            "'ACotH('", "'ACsc('", "'ACscH('", "'ASec('", 
                            "'ASecH('", "'Cot('", "'CotH('", "'Csc('", "'CscH('", 
                            "'Sec('", "'SecH('", "'CoVariance('", "'Mean('", 
                            "'Median('", "'Pearson('", "'Quantil('", "'Spearman('", 
                            "'Std('", "'Variance('", "'Concat('", "'Count('", 
                            "'Distinct('", "'Difference('", "'HasDuplicates('", 
                            "'DateTime('", "'Except('", "'IndexOf('", "'Lower('", 
                            "'Reverse('", "'Upper('", "'HasAny('", "'Sort('", 
                            "'Trim('", "'IsString('", "'IsNumber('", "'IsBoolean('", 
                            "'IsDatetime('", "'IsArray('", "'IsNull('", 
                            "'IsWhitespace('", "'ToNumber('", "'ToString('", 
                            "'ToBoolean('", "'ToArray('", "'DegreeToGrad('", 
                            "'DegreeToRadian('", "'GradToDegree('", "'GradToRadian('", 
                            "'RadianToDegree('", "'RadianToGrad('", "'RndDecimal('", 
                            "'RndInteger('" ];
    static symbolicNames = [ null, "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", 
                             "MODULO", "POWEROPERATOR", "BOOLXOR", "EQUAL", 
                             "EQUAL_IGNORECASE", "NOT", "NOTEQUAL", "NOTEQUAL_IGNORECASE", 
                             "BOOLOR", "BOOLAND", "BITOR", "BITAND", "GREATER", 
                             "GREATEREQUAL", "LOWER", "LOWEREQUAL", "TILDE", 
                             "COLON", "QUESTIONMARK", "INTEGERDIVISION", 
                             "BITSHIFTLEFT", "BITSHIFTRIGHT", "CONTAINS", 
                             "FACTORIAL", "KOMMA", "TRUE", "FALSE", "ROUNDBRACKETOPEN", 
                             "ROUNDBRACKETCLOSED", "EDGEBRACKETOPEN", "EDGEBRACKETCLOSED", 
                             "DOUBLE", "STRING", "VARIABLE", "OBJECTSVARIABLE", 
                             "INT", "ALPHA", "E", "PI", "Abs", "ACos", "ACosH", 
                             "ASin", "ASinH", "ATan", "ATan2", "ATanH", 
                             "Cbrt", "Cos", "CosH", "Ceilling", "Clamp", 
                             "CrossSum", "Derivative", "Exp", "Floor", "Integration", 
                             "Log", "Log2", "Log10", "Max", "Min", "Power", 
                             "Round", "Root", "Sin", "SinH", "Sqrt", "Tan", 
                             "TanH", "Truncate", "Norm", "EulerNorm", "MaxNorm", 
                             "GreatestCommonDivisor", "LeastCommonMultiple", 
                             "DotProduct", "Binomial", "ACot", "ACotH", 
                             "ACsc", "ACscH", "ASec", "ASecH", "Cot", "CotH", 
                             "Csc", "CscH", "Sec", "SecH", "CoVariance", 
                             "Mean", "Median", "Pearson", "Quantil", "Spearman", 
                             "Std", "Variance", "Concat", "Count", "Distinct", 
                             "Difference", "HasDuplicates", "DateTime", 
                             "Except", "IndexOf", "LowerCase", "Reverse", 
                             "UpperCase", "HasAny", "Sort", "Trim", "IsString", 
                             "IsNumber", "IsBoolean", "IsDateTime", "IsArray", 
                             "IsNull", "IsWhitespace", "ToNumber", "ToString", 
                             "ToBoolean", "ToArray", "DegreeToGrad", "DegreeToRadian", 
                             "GradToDegree", "GradToRadian", "RadianToDegree", 
                             "RadianToGrad", "RndDecimal", "RndInteger" ];
    static ruleNames = [ "startRule", "expression", "if_else", "inner_if_else", 
                         "bool_or_term", "bool_xor_term", "bool_and_term", 
                         "equality", "check", "bit_or_term", "bit_and_term", 
                         "line_term", "point_term", "factor", "random_function_term", 
                         "convert_function_term", "datetime_term", "array_slicing_term", 
                         "check_function_term", "default_function_term", 
                         "math_function_term", "statistic_math_function_term", 
                         "expr_args", "array_expr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = EveryGrammarParser.ruleNames;
        this.literalNames = EveryGrammarParser.literalNames;
        this.symbolicNames = EveryGrammarParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 6:
    	    		return this.bool_and_term_sempred(localctx, predIndex);
    	case 7:
    	    		return this.equality_sempred(localctx, predIndex);
    	case 8:
    	    		return this.check_sempred(localctx, predIndex);
    	case 9:
    	    		return this.bit_or_term_sempred(localctx, predIndex);
    	case 10:
    	    		return this.bit_and_term_sempred(localctx, predIndex);
    	case 11:
    	    		return this.line_term_sempred(localctx, predIndex);
    	case 12:
    	    		return this.point_term_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    bool_and_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    equality_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 6);
    		case 2:
    			return this.precpred(this._ctx, 5);
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    check_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 4);
    		case 8:
    			return this.precpred(this._ctx, 3);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bit_or_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bit_and_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 12:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    line_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    point_term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 7);
    		case 16:
    			return this.precpred(this._ctx, 6);
    		case 17:
    			return this.precpred(this._ctx, 5);
    		case 18:
    			return this.precpred(this._ctx, 4);
    		case 19:
    			return this.precpred(this._ctx, 3);
    		case 20:
    			return this.precpred(this._ctx, 2);
    		case 21:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	startRule() {
	    let localctx = new StartRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, EveryGrammarParser.RULE_startRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 48;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, EveryGrammarParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 50;
	        this.if_else();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_else() {
	    let localctx = new If_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, EveryGrammarParser.RULE_if_else);
	    try {
	        this.state = 62;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new IfElse_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 52;
	            this.inner_if_else();
	            break;

	        case 2:
	            localctx = new ArraySlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 53;
	            this.inner_if_else();
	            this.state = 54;
	            this.array_slicing_term();
	            break;

	        case 3:
	            localctx = new IfElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 56;
	            this.inner_if_else();
	            this.state = 57;
	            this.match(EveryGrammarParser.QUESTIONMARK);
	            this.state = 58;
	            this.inner_if_else();
	            this.state = 59;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 60;
	            this.inner_if_else();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inner_if_else() {
	    let localctx = new Inner_if_elseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, EveryGrammarParser.RULE_inner_if_else);
	    try {
	        this.state = 69;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InnerIfElse_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 64;
	            this.bool_or_term();
	            break;

	        case 2:
	            localctx = new InnerIfElseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 65;
	            this.match(EveryGrammarParser.ROUNDBRACKETOPEN);
	            this.state = 66;
	            this.if_else();
	            this.state = 67;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool_or_term() {
	    let localctx = new Bool_or_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, EveryGrammarParser.RULE_bool_or_term);
	    try {
	        this.state = 76;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new BoolOr_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 71;
	            this.bool_xor_term();
	            break;

	        case 2:
	            localctx = new BoolOrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 72;
	            this.bool_xor_term();
	            this.state = 73;
	            this.match(EveryGrammarParser.BOOLOR);
	            this.state = 74;
	            this.bool_xor_term();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool_xor_term() {
	    let localctx = new Bool_xor_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, EveryGrammarParser.RULE_bool_xor_term);
	    try {
	        this.state = 83;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new BoolXOr_NextContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 78;
	            this.bool_and_term(0);
	            break;

	        case 2:
	            localctx = new BoolXOrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 79;
	            this.bool_and_term(0);
	            this.state = 80;
	            this.match(EveryGrammarParser.BOOLXOR);
	            this.state = 81;
	            this.bool_and_term(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bool_and_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bool_and_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 12;
	    this.enterRecursionRule(localctx, 12, EveryGrammarParser.RULE_bool_and_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BoolAnd_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 86;
	        this.equality(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 93;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BoolAndContext(this, new Bool_and_termContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_bool_and_term);
	                this.state = 88;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 89;
	                this.match(EveryGrammarParser.BOOLAND);
	                this.state = 90;
	                this.equality(0); 
	            }
	            this.state = 95;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	equality(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new EqualityContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 14;
	    this.enterRecursionRule(localctx, 14, EveryGrammarParser.RULE_equality, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Equality_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 97;
	        this.check(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 120;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 118;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Equality_EqualContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 99;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 100;
	                    this.match(EveryGrammarParser.EQUAL);
	                    this.state = 101;
	                    this.check(0);
	                    break;

	                case 2:
	                    localctx = new Equality_NotEqualContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 102;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 103;
	                    this.match(EveryGrammarParser.NOTEQUAL);
	                    this.state = 104;
	                    this.check(0);
	                    break;

	                case 3:
	                    localctx = new Equality_EqualIgnoreCaseContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 105;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 106;
	                    this.match(EveryGrammarParser.EQUAL_IGNORECASE);
	                    this.state = 107;
	                    this.check(0);
	                    break;

	                case 4:
	                    localctx = new Equality_NotEqualIgnoreCaseContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 108;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 109;
	                    this.match(EveryGrammarParser.NOTEQUAL_IGNORECASE);
	                    this.state = 110;
	                    this.check(0);
	                    break;

	                case 5:
	                    localctx = new Equality_ContainsContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 111;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 112;
	                    this.match(EveryGrammarParser.CONTAINS);
	                    this.state = 113;
	                    this.check(0);
	                    break;

	                case 6:
	                    localctx = new Equality_NotContainsContext(this, new EqualityContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_equality);
	                    this.state = 114;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 115;
	                    this.match(EveryGrammarParser.NOT);
	                    this.state = 116;
	                    this.match(EveryGrammarParser.CONTAINS);
	                    this.state = 117;
	                    this.check(0);
	                    break;

	                } 
	            }
	            this.state = 122;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	check(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CheckContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 16;
	    this.enterRecursionRule(localctx, 16, EveryGrammarParser.RULE_check, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Check_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 124;
	        this.bit_or_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 140;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 138;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Check_LowerContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 126;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 127;
	                    this.match(EveryGrammarParser.LOWER);
	                    this.state = 128;
	                    this.bit_or_term(0);
	                    break;

	                case 2:
	                    localctx = new Check_GreaterContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 129;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 130;
	                    this.match(EveryGrammarParser.GREATER);
	                    this.state = 131;
	                    this.bit_or_term(0);
	                    break;

	                case 3:
	                    localctx = new Check_LowerEqualContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 132;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 133;
	                    this.match(EveryGrammarParser.LOWEREQUAL);
	                    this.state = 134;
	                    this.bit_or_term(0);
	                    break;

	                case 4:
	                    localctx = new Check_GreaterEqualContext(this, new CheckContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_check);
	                    this.state = 135;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 136;
	                    this.match(EveryGrammarParser.GREATEREQUAL);
	                    this.state = 137;
	                    this.bit_or_term(0);
	                    break;

	                } 
	            }
	            this.state = 142;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bit_or_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bit_or_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 18;
	    this.enterRecursionRule(localctx, 18, EveryGrammarParser.RULE_bit_or_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BitOr_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 144;
	        this.bit_and_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 151;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BitORContext(this, new Bit_or_termContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_bit_or_term);
	                this.state = 146;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 147;
	                this.match(EveryGrammarParser.BITOR);
	                this.state = 148;
	                this.bit_and_term(0); 
	            }
	            this.state = 153;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bit_and_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bit_and_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 20;
	    this.enterRecursionRule(localctx, 20, EveryGrammarParser.RULE_bit_and_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BitAnd_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 155;
	        this.line_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 162;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new BitAndContext(this, new Bit_and_termContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_bit_and_term);
	                this.state = 157;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 158;
	                this.match(EveryGrammarParser.BITAND);
	                this.state = 159;
	                this.line_term(0); 
	            }
	            this.state = 164;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	line_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Line_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 22;
	    this.enterRecursionRule(localctx, 22, EveryGrammarParser.RULE_line_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new Line_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 166;
	        this.point_term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 176;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 174;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new Line_AdditionContext(this, new Line_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_line_term);
	                    this.state = 168;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 169;
	                    this.match(EveryGrammarParser.ADD);
	                    this.state = 170;
	                    this.point_term(0);
	                    break;

	                case 2:
	                    localctx = new Line_SubtractionContext(this, new Line_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_line_term);
	                    this.state = 171;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 172;
	                    this.match(EveryGrammarParser.SUBTRACT);
	                    this.state = 173;
	                    this.point_term(0);
	                    break;

	                } 
	            }
	            this.state = 178;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	point_term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Point_termContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 24;
	    this.enterRecursionRule(localctx, 24, EveryGrammarParser.RULE_point_term, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PointTerm_NextContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 180;
	        this.factor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 205;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 203;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PointTerm_MultiplyContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 182;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 183;
	                    this.match(EveryGrammarParser.MULTIPLY);
	                    this.state = 184;
	                    this.factor();
	                    break;

	                case 2:
	                    localctx = new PointTerm_PowerOperatorContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 185;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 186;
	                    this.match(EveryGrammarParser.POWEROPERATOR);
	                    this.state = 187;
	                    this.factor();
	                    break;

	                case 3:
	                    localctx = new PointTerm_ModuloContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 188;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 189;
	                    this.match(EveryGrammarParser.MODULO);
	                    this.state = 190;
	                    this.factor();
	                    break;

	                case 4:
	                    localctx = new PointTerm_BitShiftLeftContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 191;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 192;
	                    this.match(EveryGrammarParser.BITSHIFTLEFT);
	                    this.state = 193;
	                    this.factor();
	                    break;

	                case 5:
	                    localctx = new PointTerm_BitShiftRightContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 194;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 195;
	                    this.match(EveryGrammarParser.BITSHIFTRIGHT);
	                    this.state = 196;
	                    this.factor();
	                    break;

	                case 6:
	                    localctx = new PointTerm_DivideContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 197;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 198;
	                    this.match(EveryGrammarParser.DIVIDE);
	                    this.state = 199;
	                    this.factor();
	                    break;

	                case 7:
	                    localctx = new PointTerm_IntegerDivisionContext(this, new Point_termContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EveryGrammarParser.RULE_point_term);
	                    this.state = 200;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 201;
	                    this.match(EveryGrammarParser.INTEGERDIVISION);
	                    this.state = 202;
	                    this.factor();
	                    break;

	                } 
	            }
	            this.state = 207;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, EveryGrammarParser.RULE_factor);
	    try {
	        this.state = 237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.NOT:
	            localctx = new Factor_NotContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 208;
	            this.match(EveryGrammarParser.NOT);
	            this.state = 209;
	            this.factor();
	            break;
	        case EveryGrammarParser.SUBTRACT:
	            localctx = new Factor_MinusContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 210;
	            this.match(EveryGrammarParser.SUBTRACT);
	            this.state = 211;
	            this.factor();
	            break;
	        case EveryGrammarParser.ADD:
	            localctx = new Factor_PlusContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 212;
	            this.match(EveryGrammarParser.ADD);
	            this.state = 213;
	            this.factor();
	            break;
	        case EveryGrammarParser.TILDE:
	            localctx = new Factor_TildeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 214;
	            this.match(EveryGrammarParser.TILDE);
	            this.state = 215;
	            this.factor();
	            break;
	        case EveryGrammarParser.FACTORIAL:
	            localctx = new Factor_FactorialContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 216;
	            this.match(EveryGrammarParser.FACTORIAL);
	            this.state = 217;
	            this.factor();
	            break;
	        case EveryGrammarParser.ROUNDBRACKETOPEN:
	            localctx = new Factor_BracketsContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 218;
	            this.match(EveryGrammarParser.ROUNDBRACKETOPEN);
	            this.state = 219;
	            this.expression();
	            this.state = 220;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.TRUE:
	            localctx = new Factor_TrueContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 222;
	            this.match(EveryGrammarParser.TRUE);
	            break;
	        case EveryGrammarParser.FALSE:
	            localctx = new Factor_FalseContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 223;
	            this.match(EveryGrammarParser.FALSE);
	            break;
	        case EveryGrammarParser.INT:
	            localctx = new Factor_IntegerContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 224;
	            this.match(EveryGrammarParser.INT);
	            break;
	        case EveryGrammarParser.DOUBLE:
	            localctx = new Factor_DoubleContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 225;
	            this.match(EveryGrammarParser.DOUBLE);
	            break;
	        case EveryGrammarParser.VARIABLE:
	            localctx = new Factor_VariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 226;
	            this.match(EveryGrammarParser.VARIABLE);
	            break;
	        case EveryGrammarParser.OBJECTSVARIABLE:
	            localctx = new Factor_ObjectVariablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 227;
	            this.match(EveryGrammarParser.OBJECTSVARIABLE);
	            break;
	        case EveryGrammarParser.STRING:
	            localctx = new Factor_StringContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 228;
	            this.match(EveryGrammarParser.STRING);
	            break;
	        case EveryGrammarParser.DateTime:
	            localctx = new Factor_DateTimeTermContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 229;
	            this.datetime_term();
	            break;
	        case EveryGrammarParser.EDGEBRACKETOPEN:
	            localctx = new Factor_ArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 230;
	            this.array_expr();
	            break;
	        case EveryGrammarParser.Concat:
	        case EveryGrammarParser.Count:
	        case EveryGrammarParser.Distinct:
	        case EveryGrammarParser.Difference:
	        case EveryGrammarParser.Except:
	        case EveryGrammarParser.IndexOf:
	        case EveryGrammarParser.LowerCase:
	        case EveryGrammarParser.Reverse:
	        case EveryGrammarParser.UpperCase:
	        case EveryGrammarParser.Sort:
	        case EveryGrammarParser.Trim:
	            localctx = new Factor_DefaultFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 231;
	            this.default_function_term();
	            break;
	        case EveryGrammarParser.HasDuplicates:
	        case EveryGrammarParser.HasAny:
	        case EveryGrammarParser.IsString:
	        case EveryGrammarParser.IsNumber:
	        case EveryGrammarParser.IsBoolean:
	        case EveryGrammarParser.IsDateTime:
	        case EveryGrammarParser.IsArray:
	        case EveryGrammarParser.IsNull:
	        case EveryGrammarParser.IsWhitespace:
	            localctx = new Factor_CheckFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 232;
	            this.check_function_term();
	            break;
	        case EveryGrammarParser.ToNumber:
	        case EveryGrammarParser.ToString:
	        case EveryGrammarParser.ToBoolean:
	        case EveryGrammarParser.ToArray:
	        case EveryGrammarParser.DegreeToGrad:
	        case EveryGrammarParser.DegreeToRadian:
	        case EveryGrammarParser.GradToDegree:
	        case EveryGrammarParser.GradToRadian:
	        case EveryGrammarParser.RadianToDegree:
	        case EveryGrammarParser.RadianToGrad:
	            localctx = new Factor_ConvertFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 233;
	            this.convert_function_term();
	            break;
	        case EveryGrammarParser.Abs:
	        case EveryGrammarParser.ACos:
	        case EveryGrammarParser.ACosH:
	        case EveryGrammarParser.ASin:
	        case EveryGrammarParser.ASinH:
	        case EveryGrammarParser.ATan:
	        case EveryGrammarParser.ATan2:
	        case EveryGrammarParser.ATanH:
	        case EveryGrammarParser.Cbrt:
	        case EveryGrammarParser.Cos:
	        case EveryGrammarParser.CosH:
	        case EveryGrammarParser.Ceilling:
	        case EveryGrammarParser.Clamp:
	        case EveryGrammarParser.CrossSum:
	        case EveryGrammarParser.Derivative:
	        case EveryGrammarParser.Exp:
	        case EveryGrammarParser.Floor:
	        case EveryGrammarParser.Integration:
	        case EveryGrammarParser.Log:
	        case EveryGrammarParser.Log2:
	        case EveryGrammarParser.Log10:
	        case EveryGrammarParser.Max:
	        case EveryGrammarParser.Min:
	        case EveryGrammarParser.Power:
	        case EveryGrammarParser.Round:
	        case EveryGrammarParser.Root:
	        case EveryGrammarParser.Sin:
	        case EveryGrammarParser.SinH:
	        case EveryGrammarParser.Sqrt:
	        case EveryGrammarParser.Tan:
	        case EveryGrammarParser.TanH:
	        case EveryGrammarParser.Truncate:
	        case EveryGrammarParser.Norm:
	        case EveryGrammarParser.EulerNorm:
	        case EveryGrammarParser.MaxNorm:
	        case EveryGrammarParser.GreatestCommonDivisor:
	        case EveryGrammarParser.LeastCommonMultiple:
	        case EveryGrammarParser.DotProduct:
	        case EveryGrammarParser.Binomial:
	        case EveryGrammarParser.ACot:
	        case EveryGrammarParser.ACotH:
	        case EveryGrammarParser.ACsc:
	        case EveryGrammarParser.ACscH:
	        case EveryGrammarParser.ASec:
	        case EveryGrammarParser.ASecH:
	        case EveryGrammarParser.Cot:
	        case EveryGrammarParser.CotH:
	        case EveryGrammarParser.Csc:
	        case EveryGrammarParser.CscH:
	        case EveryGrammarParser.Sec:
	        case EveryGrammarParser.SecH:
	            localctx = new Factor_MathFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 234;
	            this.math_function_term();
	            break;
	        case EveryGrammarParser.RndDecimal:
	        case EveryGrammarParser.RndInteger:
	            localctx = new Factor_RandomFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 235;
	            this.random_function_term();
	            break;
	        case EveryGrammarParser.CoVariance:
	        case EveryGrammarParser.Mean:
	        case EveryGrammarParser.Median:
	        case EveryGrammarParser.Pearson:
	        case EveryGrammarParser.Quantil:
	        case EveryGrammarParser.Spearman:
	        case EveryGrammarParser.Std:
	        case EveryGrammarParser.Variance:
	            localctx = new Factor_StatisticMathFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 236;
	            this.statistic_math_function_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	random_function_term() {
	    let localctx = new Random_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, EveryGrammarParser.RULE_random_function_term);
	    try {
	        this.state = 279;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Random_DecimalContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 239;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 240;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new Random_DecimalArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 241;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 242;
	            this.expression();
	            this.state = 243;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new Random_DecimalMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 245;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 246;
	            this.expression();
	            this.state = 247;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 248;
	            this.expression();
	            this.state = 249;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new Random_DecimalArrayMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 251;
	            this.match(EveryGrammarParser.RndDecimal);
	            this.state = 252;
	            this.expression();
	            this.state = 253;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 254;
	            this.expression();
	            this.state = 255;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 256;
	            this.expression();
	            this.state = 257;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new Random_IntegerContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 259;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 260;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new Random_IntegerArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 261;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 262;
	            this.expression();
	            this.state = 263;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new Random_IntegerMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 265;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 266;
	            this.expression();
	            this.state = 267;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 268;
	            this.expression();
	            this.state = 269;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new Random_IntegerArrayMinMaxContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 271;
	            this.match(EveryGrammarParser.RndInteger);
	            this.state = 272;
	            this.expression();
	            this.state = 273;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 274;
	            this.expression();
	            this.state = 275;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 276;
	            this.expression();
	            this.state = 277;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	convert_function_term() {
	    let localctx = new Convert_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, EveryGrammarParser.RULE_convert_function_term);
	    try {
	        this.state = 321;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.ToArray:
	            localctx = new Convert_ToArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 281;
	            this.match(EveryGrammarParser.ToArray);
	            this.state = 282;
	            this.expr_args();
	            this.state = 283;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.ToBoolean:
	            localctx = new Convert_ToBooleanContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 285;
	            this.match(EveryGrammarParser.ToBoolean);
	            this.state = 286;
	            this.expression();
	            this.state = 287;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.ToNumber:
	            localctx = new Convert_ToNumberContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 289;
	            this.match(EveryGrammarParser.ToNumber);
	            this.state = 290;
	            this.expression();
	            this.state = 291;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.ToString:
	            localctx = new Convert_ToStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 293;
	            this.match(EveryGrammarParser.ToString);
	            this.state = 294;
	            this.expression();
	            this.state = 295;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.DegreeToGrad:
	            localctx = new Convert_DegreeToGradContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 297;
	            this.match(EveryGrammarParser.DegreeToGrad);
	            this.state = 298;
	            this.expression();
	            this.state = 299;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.DegreeToRadian:
	            localctx = new Convert_DegreeToRadianContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 301;
	            this.match(EveryGrammarParser.DegreeToRadian);
	            this.state = 302;
	            this.expression();
	            this.state = 303;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.GradToDegree:
	            localctx = new Convert_GradToDegreeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 305;
	            this.match(EveryGrammarParser.GradToDegree);
	            this.state = 306;
	            this.expression();
	            this.state = 307;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.GradToRadian:
	            localctx = new Convert_GradToRadianContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 309;
	            this.match(EveryGrammarParser.GradToRadian);
	            this.state = 310;
	            this.expression();
	            this.state = 311;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.RadianToDegree:
	            localctx = new Convert_RadianToDegreeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 313;
	            this.match(EveryGrammarParser.RadianToDegree);
	            this.state = 314;
	            this.expression();
	            this.state = 315;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.RadianToGrad:
	            localctx = new Convert_RadianToGradContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 317;
	            this.match(EveryGrammarParser.RadianToGrad);
	            this.state = 318;
	            this.expression();
	            this.state = 319;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetime_term() {
	    let localctx = new Datetime_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, EveryGrammarParser.RULE_datetime_term);
	    try {
	        this.state = 387;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DateTime_ExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 323;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 324;
	            this.expression();
	            this.state = 325;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new DateTime_DateEntryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 327;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 328;
	            this.expression();
	            this.state = 329;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 330;
	            this.expression();
	            this.state = 331;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 332;
	            this.expression();
	            this.state = 333;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new DateTime_DateHourContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 335;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 336;
	            this.expression();
	            this.state = 337;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 338;
	            this.expression();
	            this.state = 339;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 340;
	            this.expression();
	            this.state = 341;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 342;
	            this.expression();
	            this.state = 343;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new DateTime_DateHourMinuteContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 345;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 346;
	            this.expression();
	            this.state = 347;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 348;
	            this.expression();
	            this.state = 349;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 350;
	            this.expression();
	            this.state = 351;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 352;
	            this.expression();
	            this.state = 353;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 354;
	            this.expression();
	            this.state = 355;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new DateTime_DateHourMinuteSecondsContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 357;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 358;
	            this.expression();
	            this.state = 359;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 360;
	            this.expression();
	            this.state = 361;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 362;
	            this.expression();
	            this.state = 363;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 364;
	            this.expression();
	            this.state = 365;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 366;
	            this.expression();
	            this.state = 367;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 368;
	            this.expression();
	            this.state = 369;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new DateTime_FullContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 371;
	            this.match(EveryGrammarParser.DateTime);
	            this.state = 372;
	            this.expression();
	            this.state = 373;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 374;
	            this.expression();
	            this.state = 375;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 376;
	            this.expression();
	            this.state = 377;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 378;
	            this.expression();
	            this.state = 379;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 380;
	            this.expression();
	            this.state = 381;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 382;
	            this.expression();
	            this.state = 383;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 384;
	            this.expression();
	            this.state = 385;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_slicing_term() {
	    let localctx = new Array_slicing_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, EveryGrammarParser.RULE_array_slicing_term);
	    try {
	        this.state = 437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArraySlicing_IndexingContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 389;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 390;
	            this.expression();
	            this.state = 391;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new ArraySlicing_SlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 393;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 394;
	            this.expression();
	            this.state = 395;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 396;
	            this.expression();
	            this.state = 397;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new ArraySlicing_StepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 399;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 400;
	            this.expression();
	            this.state = 401;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 402;
	            this.expression();
	            this.state = 403;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 404;
	            this.expression();
	            this.state = 405;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new ArraySlicing_StartSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 407;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 408;
	            this.expression();
	            this.state = 409;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 410;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new ArraySlicing_StartStepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 412;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 413;
	            this.expression();
	            this.state = 414;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 415;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 416;
	            this.expression();
	            this.state = 417;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new ArraySlicing_EndSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 419;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 420;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 421;
	            this.expression();
	            this.state = 422;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new ArraySlicing_EndStepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 424;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 425;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 426;
	            this.expression();
	            this.state = 427;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 428;
	            this.expression();
	            this.state = 429;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new ArraySlicing_AllStepSlicingContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 431;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 432;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 433;
	            this.match(EveryGrammarParser.COLON);
	            this.state = 434;
	            this.expression();
	            this.state = 435;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	check_function_term() {
	    let localctx = new Check_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, EveryGrammarParser.RULE_check_function_term);
	    try {
	        this.state = 475;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.IsArray:
	            localctx = new CheckFunction_IsArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 439;
	            this.match(EveryGrammarParser.IsArray);
	            this.state = 440;
	            this.expression();
	            this.state = 441;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsBoolean:
	            localctx = new CheckFunction_IsBooleanContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 443;
	            this.match(EveryGrammarParser.IsBoolean);
	            this.state = 444;
	            this.expression();
	            this.state = 445;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsDateTime:
	            localctx = new CheckFunction_IsDateTimeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 447;
	            this.match(EveryGrammarParser.IsDateTime);
	            this.state = 448;
	            this.expression();
	            this.state = 449;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsNull:
	            localctx = new CheckFunction_IsNullContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 451;
	            this.match(EveryGrammarParser.IsNull);
	            this.state = 452;
	            this.expression();
	            this.state = 453;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsNumber:
	            localctx = new CheckFunction_IsNumberContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 455;
	            this.match(EveryGrammarParser.IsNumber);
	            this.state = 456;
	            this.expression();
	            this.state = 457;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsString:
	            localctx = new CheckFunction_IsStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 459;
	            this.match(EveryGrammarParser.IsString);
	            this.state = 460;
	            this.expression();
	            this.state = 461;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.IsWhitespace:
	            localctx = new CheckFunction_IsWhitespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 463;
	            this.match(EveryGrammarParser.IsWhitespace);
	            this.state = 464;
	            this.expression();
	            this.state = 465;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.HasAny:
	            localctx = new CheckFunction_HasAnyContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 467;
	            this.match(EveryGrammarParser.HasAny);
	            this.state = 468;
	            this.expression();
	            this.state = 469;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.HasDuplicates:
	            localctx = new CheckFunction_HasDuplicatesContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 471;
	            this.match(EveryGrammarParser.HasDuplicates);
	            this.state = 472;
	            this.expression();
	            this.state = 473;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_function_term() {
	    let localctx = new Default_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, EveryGrammarParser.RULE_default_function_term);
	    try {
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Function_ConcatContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 477;
	            this.match(EveryGrammarParser.Concat);
	            this.state = 478;
	            this.expression();
	            this.state = 479;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 480;
	            this.expression();
	            this.state = 481;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new Function_CountContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 483;
	            this.match(EveryGrammarParser.Count);
	            this.state = 484;
	            this.expression();
	            this.state = 485;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new Function_DistincContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 487;
	            this.match(EveryGrammarParser.Distinct);
	            this.state = 488;
	            this.expression();
	            this.state = 489;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new Function_DifferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 491;
	            this.match(EveryGrammarParser.Difference);
	            this.state = 492;
	            this.expression();
	            this.state = 493;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 494;
	            this.expression();
	            this.state = 495;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new Function_ExceptContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 497;
	            this.match(EveryGrammarParser.Except);
	            this.state = 498;
	            this.expression();
	            this.state = 499;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 500;
	            this.expression();
	            this.state = 501;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new Function_IndexOfContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 503;
	            this.match(EveryGrammarParser.IndexOf);
	            this.state = 504;
	            this.expression();
	            this.state = 505;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 506;
	            this.expression();
	            this.state = 507;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new Function_IndexOfStartContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 509;
	            this.match(EveryGrammarParser.IndexOf);
	            this.state = 510;
	            this.expression();
	            this.state = 511;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 512;
	            this.expression();
	            this.state = 513;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 514;
	            this.expression();
	            this.state = 515;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new Function_IndexOfStartEndContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 517;
	            this.match(EveryGrammarParser.IndexOf);
	            this.state = 518;
	            this.expression();
	            this.state = 519;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 520;
	            this.expression();
	            this.state = 521;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 522;
	            this.expression();
	            this.state = 523;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 524;
	            this.expression();
	            this.state = 525;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 9:
	            localctx = new Function_LowerContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 527;
	            this.match(EveryGrammarParser.LowerCase);
	            this.state = 528;
	            this.expression();
	            this.state = 529;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 10:
	            localctx = new Function_ReverseContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 531;
	            this.match(EveryGrammarParser.Reverse);
	            this.state = 532;
	            this.expression();
	            this.state = 533;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 11:
	            localctx = new Function_UpperContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 535;
	            this.match(EveryGrammarParser.UpperCase);
	            this.state = 536;
	            this.expression();
	            this.state = 537;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 12:
	            localctx = new Function_SortContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 539;
	            this.match(EveryGrammarParser.Sort);
	            this.state = 540;
	            this.expression();
	            this.state = 541;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 13:
	            localctx = new Function_TrimContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 543;
	            this.match(EveryGrammarParser.Trim);
	            this.state = 544;
	            this.expression();
	            this.state = 545;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	math_function_term() {
	    let localctx = new Math_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, EveryGrammarParser.RULE_math_function_term);
	    try {
	        this.state = 803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Math_AbsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 549;
	            this.match(EveryGrammarParser.Abs);
	            this.state = 550;
	            this.expression();
	            this.state = 551;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new Math_ACosContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 553;
	            this.match(EveryGrammarParser.ACos);
	            this.state = 554;
	            this.expression();
	            this.state = 555;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 3:
	            localctx = new Math_ACosHContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 557;
	            this.match(EveryGrammarParser.ACosH);
	            this.state = 558;
	            this.expression();
	            this.state = 559;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 4:
	            localctx = new Math_ASinContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 561;
	            this.match(EveryGrammarParser.ASin);
	            this.state = 562;
	            this.expression();
	            this.state = 563;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 5:
	            localctx = new Math_ASinHContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 565;
	            this.match(EveryGrammarParser.ASinH);
	            this.state = 566;
	            this.expression();
	            this.state = 567;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 6:
	            localctx = new Math_ATanContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 569;
	            this.match(EveryGrammarParser.ATan);
	            this.state = 570;
	            this.expression();
	            this.state = 571;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 7:
	            localctx = new Math_ATan2Context(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 573;
	            this.match(EveryGrammarParser.ATan2);
	            this.state = 574;
	            this.expression();
	            this.state = 575;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 576;
	            this.expression();
	            this.state = 577;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 8:
	            localctx = new Math_ATanHContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 579;
	            this.match(EveryGrammarParser.ATanH);
	            this.state = 580;
	            this.expression();
	            this.state = 581;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 9:
	            localctx = new Math_CbrtContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 583;
	            this.match(EveryGrammarParser.Cbrt);
	            this.state = 584;
	            this.expression();
	            this.state = 585;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 10:
	            localctx = new Math_CosContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 587;
	            this.match(EveryGrammarParser.Cos);
	            this.state = 588;
	            this.expression();
	            this.state = 589;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 11:
	            localctx = new Math_CosHContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 591;
	            this.match(EveryGrammarParser.CosH);
	            this.state = 592;
	            this.expression();
	            this.state = 593;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 12:
	            localctx = new Math_CeillingContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 595;
	            this.match(EveryGrammarParser.Ceilling);
	            this.state = 596;
	            this.expression();
	            this.state = 597;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 13:
	            localctx = new Math_ClampContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 599;
	            this.match(EveryGrammarParser.Clamp);
	            this.state = 600;
	            this.expression();
	            this.state = 601;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 602;
	            this.expression();
	            this.state = 603;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 604;
	            this.expression();
	            this.state = 605;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 14:
	            localctx = new Math_CrossSumContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 607;
	            this.match(EveryGrammarParser.CrossSum);
	            this.state = 608;
	            this.expression();
	            this.state = 609;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 15:
	            localctx = new Math_DerivativeContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 611;
	            this.match(EveryGrammarParser.Derivative);
	            this.state = 612;
	            this.expression();
	            this.state = 613;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 614;
	            this.expression();
	            this.state = 615;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 616;
	            this.expression();
	            this.state = 617;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 16:
	            localctx = new Math_ExpContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 619;
	            this.match(EveryGrammarParser.Exp);
	            this.state = 620;
	            this.expression();
	            this.state = 621;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 17:
	            localctx = new Math_FloorContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 623;
	            this.match(EveryGrammarParser.Floor);
	            this.state = 624;
	            this.expression();
	            this.state = 625;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 18:
	            localctx = new Math_IntegrationContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 627;
	            this.match(EveryGrammarParser.Integration);
	            this.state = 628;
	            this.expression();
	            this.state = 629;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 630;
	            this.expression();
	            this.state = 631;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 632;
	            this.expression();
	            this.state = 633;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 634;
	            this.expression();
	            this.state = 635;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 19:
	            localctx = new Math_LogContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 637;
	            this.match(EveryGrammarParser.Log);
	            this.state = 638;
	            this.expression();
	            this.state = 639;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 640;
	            this.expression();
	            this.state = 641;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 20:
	            localctx = new Math_Log2Context(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 643;
	            this.match(EveryGrammarParser.Log2);
	            this.state = 644;
	            this.expression();
	            this.state = 645;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 21:
	            localctx = new Math_Log10Context(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 647;
	            this.match(EveryGrammarParser.Log10);
	            this.state = 648;
	            this.expression();
	            this.state = 649;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 22:
	            localctx = new Math_Max_ArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 651;
	            this.match(EveryGrammarParser.Max);
	            this.state = 652;
	            this.expression();
	            this.state = 653;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 23:
	            localctx = new Math_Max_TwoContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 655;
	            this.match(EveryGrammarParser.Max);
	            this.state = 656;
	            this.expression();
	            this.state = 657;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 658;
	            this.expression();
	            this.state = 659;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 24:
	            localctx = new Math_Min_ArrayContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 661;
	            this.match(EveryGrammarParser.Min);
	            this.state = 662;
	            this.expression();
	            this.state = 663;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 25:
	            localctx = new Math_Min_TwoContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 665;
	            this.match(EveryGrammarParser.Min);
	            this.state = 666;
	            this.expression();
	            this.state = 667;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 668;
	            this.expression();
	            this.state = 669;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 26:
	            localctx = new Math_PowerContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 671;
	            this.match(EveryGrammarParser.Power);
	            this.state = 672;
	            this.expression();
	            this.state = 673;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 674;
	            this.expression();
	            this.state = 675;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 27:
	            localctx = new Math_Round_Not_DecimalContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 677;
	            this.match(EveryGrammarParser.Round);
	            this.state = 678;
	            this.expression();
	            this.state = 679;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 28:
	            localctx = new Math_Round_DecimalContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 681;
	            this.match(EveryGrammarParser.Round);
	            this.state = 682;
	            this.expression();
	            this.state = 683;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 684;
	            this.expression();
	            this.state = 685;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 29:
	            localctx = new Math_RootContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 687;
	            this.match(EveryGrammarParser.Root);
	            this.state = 688;
	            this.expression();
	            this.state = 689;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 690;
	            this.expression();
	            this.state = 691;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 30:
	            localctx = new Math_SinContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 693;
	            this.match(EveryGrammarParser.Sin);
	            this.state = 694;
	            this.expression();
	            this.state = 695;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 31:
	            localctx = new Math_SinHContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 697;
	            this.match(EveryGrammarParser.SinH);
	            this.state = 698;
	            this.expression();
	            this.state = 699;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 32:
	            localctx = new Math_SqrtContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 701;
	            this.match(EveryGrammarParser.Sqrt);
	            this.state = 702;
	            this.expression();
	            this.state = 703;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 33:
	            localctx = new Math_TanContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 705;
	            this.match(EveryGrammarParser.Tan);
	            this.state = 706;
	            this.expression();
	            this.state = 707;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 34:
	            localctx = new Math_TanHContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 709;
	            this.match(EveryGrammarParser.TanH);
	            this.state = 710;
	            this.expression();
	            this.state = 711;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 35:
	            localctx = new Math_TruncateContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 713;
	            this.match(EveryGrammarParser.Truncate);
	            this.state = 714;
	            this.expression();
	            this.state = 715;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 36:
	            localctx = new Math_NormContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 717;
	            this.match(EveryGrammarParser.Norm);
	            this.state = 718;
	            this.expression();
	            this.state = 719;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 720;
	            this.expression();
	            this.state = 721;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 37:
	            localctx = new Math_EulerNormContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 723;
	            this.match(EveryGrammarParser.EulerNorm);
	            this.state = 724;
	            this.expression();
	            this.state = 725;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 38:
	            localctx = new Math_MaxNormContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 727;
	            this.match(EveryGrammarParser.MaxNorm);
	            this.state = 728;
	            this.expression();
	            this.state = 729;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 39:
	            localctx = new Math_GreatesCommonDivisorContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 731;
	            this.match(EveryGrammarParser.GreatestCommonDivisor);
	            this.state = 732;
	            this.expression();
	            this.state = 733;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 734;
	            this.expression();
	            this.state = 735;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 40:
	            localctx = new Math_LeastCommonMultipleContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 737;
	            this.match(EveryGrammarParser.LeastCommonMultiple);
	            this.state = 738;
	            this.expression();
	            this.state = 739;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 740;
	            this.expression();
	            this.state = 741;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 41:
	            localctx = new Math_DotProductContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 743;
	            this.match(EveryGrammarParser.DotProduct);
	            this.state = 744;
	            this.expression();
	            this.state = 745;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 746;
	            this.expression();
	            this.state = 747;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 42:
	            localctx = new Math_BinomilaContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 749;
	            this.match(EveryGrammarParser.Binomial);
	            this.state = 750;
	            this.expression();
	            this.state = 751;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 752;
	            this.expression();
	            this.state = 753;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 43:
	            localctx = new Math_ACotContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 755;
	            this.match(EveryGrammarParser.ACot);
	            this.state = 756;
	            this.expression();
	            this.state = 757;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 44:
	            localctx = new Math_ACotHContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 759;
	            this.match(EveryGrammarParser.ACotH);
	            this.state = 760;
	            this.expression();
	            this.state = 761;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 45:
	            localctx = new Math_ACscContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 763;
	            this.match(EveryGrammarParser.ACsc);
	            this.state = 764;
	            this.expression();
	            this.state = 765;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 46:
	            localctx = new Math_ACscHContext(this, localctx);
	            this.enterOuterAlt(localctx, 46);
	            this.state = 767;
	            this.match(EveryGrammarParser.ACscH);
	            this.state = 768;
	            this.expression();
	            this.state = 769;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 47:
	            localctx = new Math_ASecContext(this, localctx);
	            this.enterOuterAlt(localctx, 47);
	            this.state = 771;
	            this.match(EveryGrammarParser.ASec);
	            this.state = 772;
	            this.expression();
	            this.state = 773;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 48:
	            localctx = new Math_ASecHContext(this, localctx);
	            this.enterOuterAlt(localctx, 48);
	            this.state = 775;
	            this.match(EveryGrammarParser.ASecH);
	            this.state = 776;
	            this.expression();
	            this.state = 777;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 49:
	            localctx = new Math_CotContext(this, localctx);
	            this.enterOuterAlt(localctx, 49);
	            this.state = 779;
	            this.match(EveryGrammarParser.Cot);
	            this.state = 780;
	            this.expression();
	            this.state = 781;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 50:
	            localctx = new Math_CotHContext(this, localctx);
	            this.enterOuterAlt(localctx, 50);
	            this.state = 783;
	            this.match(EveryGrammarParser.CotH);
	            this.state = 784;
	            this.expression();
	            this.state = 785;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 51:
	            localctx = new Math_CscContext(this, localctx);
	            this.enterOuterAlt(localctx, 51);
	            this.state = 787;
	            this.match(EveryGrammarParser.Csc);
	            this.state = 788;
	            this.expression();
	            this.state = 789;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 52:
	            localctx = new Math_CscHContext(this, localctx);
	            this.enterOuterAlt(localctx, 52);
	            this.state = 791;
	            this.match(EveryGrammarParser.CscH);
	            this.state = 792;
	            this.expression();
	            this.state = 793;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 53:
	            localctx = new Math_SecContext(this, localctx);
	            this.enterOuterAlt(localctx, 53);
	            this.state = 795;
	            this.match(EveryGrammarParser.Sec);
	            this.state = 796;
	            this.expression();
	            this.state = 797;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        case 54:
	            localctx = new Math_SecHContext(this, localctx);
	            this.enterOuterAlt(localctx, 54);
	            this.state = 799;
	            this.match(EveryGrammarParser.SecH);
	            this.state = 800;
	            this.expression();
	            this.state = 801;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statistic_math_function_term() {
	    let localctx = new Statistic_math_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, EveryGrammarParser.RULE_statistic_math_function_term);
	    try {
	        this.state = 845;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case EveryGrammarParser.CoVariance:
	            localctx = new MathStatistic_CoVarianceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 805;
	            this.match(EveryGrammarParser.CoVariance);
	            this.state = 806;
	            this.expression();
	            this.state = 807;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 808;
	            this.expression();
	            this.state = 809;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Mean:
	            localctx = new MathStatistic_MeanContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 811;
	            this.match(EveryGrammarParser.Mean);
	            this.state = 812;
	            this.expression();
	            this.state = 813;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Median:
	            localctx = new MathStatistic_MedianContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 815;
	            this.match(EveryGrammarParser.Median);
	            this.state = 816;
	            this.expression();
	            this.state = 817;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Pearson:
	            localctx = new MathStatistic_PearsonContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 819;
	            this.match(EveryGrammarParser.Pearson);
	            this.state = 820;
	            this.expression();
	            this.state = 821;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 822;
	            this.expression();
	            this.state = 823;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Quantil:
	            localctx = new MathStatistic_QuantilContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 825;
	            this.match(EveryGrammarParser.Quantil);
	            this.state = 826;
	            this.expression();
	            this.state = 827;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 828;
	            this.expression();
	            this.state = 829;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Spearman:
	            localctx = new MathStatistic_SpearmanContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 831;
	            this.match(EveryGrammarParser.Spearman);
	            this.state = 832;
	            this.expression();
	            this.state = 833;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 834;
	            this.expression();
	            this.state = 835;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Std:
	            localctx = new MathStatistic_StDContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 837;
	            this.match(EveryGrammarParser.Std);
	            this.state = 838;
	            this.expression();
	            this.state = 839;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        case EveryGrammarParser.Variance:
	            localctx = new MathStatistic_VarianceContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 841;
	            this.match(EveryGrammarParser.Variance);
	            this.state = 842;
	            this.expression();
	            this.state = 843;
	            this.match(EveryGrammarParser.ROUNDBRACKETCLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_args() {
	    let localctx = new Expr_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, EveryGrammarParser.RULE_expr_args);
	    try {
	        this.state = 852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 847;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.expression();
	            this.state = 849;
	            this.match(EveryGrammarParser.KOMMA);
	            this.state = 850;
	            this.expr_args();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_expr() {
	    let localctx = new Array_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, EveryGrammarParser.RULE_array_expr);
	    try {
	        this.state = 860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrayCreation_EmptyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 854;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 855;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        case 2:
	            localctx = new ArrayCreationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.match(EveryGrammarParser.EDGEBRACKETOPEN);
	            this.state = 857;
	            this.expr_args();
	            this.state = 858;
	            this.match(EveryGrammarParser.EDGEBRACKETCLOSED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

EveryGrammarParser.EOF = antlr4.Token.EOF;
EveryGrammarParser.ADD = 1;
EveryGrammarParser.SUBTRACT = 2;
EveryGrammarParser.MULTIPLY = 3;
EveryGrammarParser.DIVIDE = 4;
EveryGrammarParser.MODULO = 5;
EveryGrammarParser.POWEROPERATOR = 6;
EveryGrammarParser.BOOLXOR = 7;
EveryGrammarParser.EQUAL = 8;
EveryGrammarParser.EQUAL_IGNORECASE = 9;
EveryGrammarParser.NOT = 10;
EveryGrammarParser.NOTEQUAL = 11;
EveryGrammarParser.NOTEQUAL_IGNORECASE = 12;
EveryGrammarParser.BOOLOR = 13;
EveryGrammarParser.BOOLAND = 14;
EveryGrammarParser.BITOR = 15;
EveryGrammarParser.BITAND = 16;
EveryGrammarParser.GREATER = 17;
EveryGrammarParser.GREATEREQUAL = 18;
EveryGrammarParser.LOWER = 19;
EveryGrammarParser.LOWEREQUAL = 20;
EveryGrammarParser.TILDE = 21;
EveryGrammarParser.COLON = 22;
EveryGrammarParser.QUESTIONMARK = 23;
EveryGrammarParser.INTEGERDIVISION = 24;
EveryGrammarParser.BITSHIFTLEFT = 25;
EveryGrammarParser.BITSHIFTRIGHT = 26;
EveryGrammarParser.CONTAINS = 27;
EveryGrammarParser.FACTORIAL = 28;
EveryGrammarParser.KOMMA = 29;
EveryGrammarParser.TRUE = 30;
EveryGrammarParser.FALSE = 31;
EveryGrammarParser.ROUNDBRACKETOPEN = 32;
EveryGrammarParser.ROUNDBRACKETCLOSED = 33;
EveryGrammarParser.EDGEBRACKETOPEN = 34;
EveryGrammarParser.EDGEBRACKETCLOSED = 35;
EveryGrammarParser.DOUBLE = 36;
EveryGrammarParser.STRING = 37;
EveryGrammarParser.VARIABLE = 38;
EveryGrammarParser.OBJECTSVARIABLE = 39;
EveryGrammarParser.INT = 40;
EveryGrammarParser.ALPHA = 41;
EveryGrammarParser.E = 42;
EveryGrammarParser.PI = 43;
EveryGrammarParser.Abs = 44;
EveryGrammarParser.ACos = 45;
EveryGrammarParser.ACosH = 46;
EveryGrammarParser.ASin = 47;
EveryGrammarParser.ASinH = 48;
EveryGrammarParser.ATan = 49;
EveryGrammarParser.ATan2 = 50;
EveryGrammarParser.ATanH = 51;
EveryGrammarParser.Cbrt = 52;
EveryGrammarParser.Cos = 53;
EveryGrammarParser.CosH = 54;
EveryGrammarParser.Ceilling = 55;
EveryGrammarParser.Clamp = 56;
EveryGrammarParser.CrossSum = 57;
EveryGrammarParser.Derivative = 58;
EveryGrammarParser.Exp = 59;
EveryGrammarParser.Floor = 60;
EveryGrammarParser.Integration = 61;
EveryGrammarParser.Log = 62;
EveryGrammarParser.Log2 = 63;
EveryGrammarParser.Log10 = 64;
EveryGrammarParser.Max = 65;
EveryGrammarParser.Min = 66;
EveryGrammarParser.Power = 67;
EveryGrammarParser.Round = 68;
EveryGrammarParser.Root = 69;
EveryGrammarParser.Sin = 70;
EveryGrammarParser.SinH = 71;
EveryGrammarParser.Sqrt = 72;
EveryGrammarParser.Tan = 73;
EveryGrammarParser.TanH = 74;
EveryGrammarParser.Truncate = 75;
EveryGrammarParser.Norm = 76;
EveryGrammarParser.EulerNorm = 77;
EveryGrammarParser.MaxNorm = 78;
EveryGrammarParser.GreatestCommonDivisor = 79;
EveryGrammarParser.LeastCommonMultiple = 80;
EveryGrammarParser.DotProduct = 81;
EveryGrammarParser.Binomial = 82;
EveryGrammarParser.ACot = 83;
EveryGrammarParser.ACotH = 84;
EveryGrammarParser.ACsc = 85;
EveryGrammarParser.ACscH = 86;
EveryGrammarParser.ASec = 87;
EveryGrammarParser.ASecH = 88;
EveryGrammarParser.Cot = 89;
EveryGrammarParser.CotH = 90;
EveryGrammarParser.Csc = 91;
EveryGrammarParser.CscH = 92;
EveryGrammarParser.Sec = 93;
EveryGrammarParser.SecH = 94;
EveryGrammarParser.CoVariance = 95;
EveryGrammarParser.Mean = 96;
EveryGrammarParser.Median = 97;
EveryGrammarParser.Pearson = 98;
EveryGrammarParser.Quantil = 99;
EveryGrammarParser.Spearman = 100;
EveryGrammarParser.Std = 101;
EveryGrammarParser.Variance = 102;
EveryGrammarParser.Concat = 103;
EveryGrammarParser.Count = 104;
EveryGrammarParser.Distinct = 105;
EveryGrammarParser.Difference = 106;
EveryGrammarParser.HasDuplicates = 107;
EveryGrammarParser.DateTime = 108;
EveryGrammarParser.Except = 109;
EveryGrammarParser.IndexOf = 110;
EveryGrammarParser.LowerCase = 111;
EveryGrammarParser.Reverse = 112;
EveryGrammarParser.UpperCase = 113;
EveryGrammarParser.HasAny = 114;
EveryGrammarParser.Sort = 115;
EveryGrammarParser.Trim = 116;
EveryGrammarParser.IsString = 117;
EveryGrammarParser.IsNumber = 118;
EveryGrammarParser.IsBoolean = 119;
EveryGrammarParser.IsDateTime = 120;
EveryGrammarParser.IsArray = 121;
EveryGrammarParser.IsNull = 122;
EveryGrammarParser.IsWhitespace = 123;
EveryGrammarParser.ToNumber = 124;
EveryGrammarParser.ToString = 125;
EveryGrammarParser.ToBoolean = 126;
EveryGrammarParser.ToArray = 127;
EveryGrammarParser.DegreeToGrad = 128;
EveryGrammarParser.DegreeToRadian = 129;
EveryGrammarParser.GradToDegree = 130;
EveryGrammarParser.GradToRadian = 131;
EveryGrammarParser.RadianToDegree = 132;
EveryGrammarParser.RadianToGrad = 133;
EveryGrammarParser.RndDecimal = 134;
EveryGrammarParser.RndInteger = 135;

EveryGrammarParser.RULE_startRule = 0;
EveryGrammarParser.RULE_expression = 1;
EveryGrammarParser.RULE_if_else = 2;
EveryGrammarParser.RULE_inner_if_else = 3;
EveryGrammarParser.RULE_bool_or_term = 4;
EveryGrammarParser.RULE_bool_xor_term = 5;
EveryGrammarParser.RULE_bool_and_term = 6;
EveryGrammarParser.RULE_equality = 7;
EveryGrammarParser.RULE_check = 8;
EveryGrammarParser.RULE_bit_or_term = 9;
EveryGrammarParser.RULE_bit_and_term = 10;
EveryGrammarParser.RULE_line_term = 11;
EveryGrammarParser.RULE_point_term = 12;
EveryGrammarParser.RULE_factor = 13;
EveryGrammarParser.RULE_random_function_term = 14;
EveryGrammarParser.RULE_convert_function_term = 15;
EveryGrammarParser.RULE_datetime_term = 16;
EveryGrammarParser.RULE_array_slicing_term = 17;
EveryGrammarParser.RULE_check_function_term = 18;
EveryGrammarParser.RULE_default_function_term = 19;
EveryGrammarParser.RULE_math_function_term = 20;
EveryGrammarParser.RULE_statistic_math_function_term = 21;
EveryGrammarParser.RULE_expr_args = 22;
EveryGrammarParser.RULE_array_expr = 23;

class StartRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_startRule;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterStartRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitStartRule(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_expression;
    }

	if_else() {
	    return this.getTypedRuleContext(If_elseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitExpression(this);
		}
	}


}



class If_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_if_else;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IfElseContext extends If_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_if_else = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inner_if_elseContext);
	    } else {
	        return this.getTypedRuleContext(Inner_if_elseContext,i);
	    }
	};

	QUESTIONMARK() {
	    return this.getToken(EveryGrammarParser.QUESTIONMARK, 0);
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterIfElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitIfElse(this);
		}
	}


}

EveryGrammarParser.IfElseContext = IfElseContext;

class IfElse_NextContext extends If_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_if_else() {
	    return this.getTypedRuleContext(Inner_if_elseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterIfElse_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitIfElse_Next(this);
		}
	}


}

EveryGrammarParser.IfElse_NextContext = IfElse_NextContext;

class ArraySlicingContext extends If_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inner_if_else() {
	    return this.getTypedRuleContext(Inner_if_elseContext,0);
	};

	array_slicing_term() {
	    return this.getTypedRuleContext(Array_slicing_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicingContext = ArraySlicingContext;

class Inner_if_elseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_inner_if_else;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InnerIfElseContext extends Inner_if_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROUNDBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0);
	};

	if_else() {
	    return this.getTypedRuleContext(If_elseContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterInnerIfElse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitInnerIfElse(this);
		}
	}


}

EveryGrammarParser.InnerIfElseContext = InnerIfElseContext;

class InnerIfElse_NextContext extends Inner_if_elseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_or_term() {
	    return this.getTypedRuleContext(Bool_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterInnerIfElse_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitInnerIfElse_Next(this);
		}
	}


}

EveryGrammarParser.InnerIfElse_NextContext = InnerIfElse_NextContext;

class Bool_or_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bool_or_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoolOr_NextContext extends Bool_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_xor_term() {
	    return this.getTypedRuleContext(Bool_xor_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolOr_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolOr_Next(this);
		}
	}


}

EveryGrammarParser.BoolOr_NextContext = BoolOr_NextContext;

class BoolOrContext extends Bool_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_xor_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bool_xor_termContext);
	    } else {
	        return this.getTypedRuleContext(Bool_xor_termContext,i);
	    }
	};

	BOOLOR() {
	    return this.getToken(EveryGrammarParser.BOOLOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolOr(this);
		}
	}


}

EveryGrammarParser.BoolOrContext = BoolOrContext;

class Bool_xor_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bool_xor_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoolXOrContext extends Bool_xor_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_and_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bool_and_termContext);
	    } else {
	        return this.getTypedRuleContext(Bool_and_termContext,i);
	    }
	};

	BOOLXOR() {
	    return this.getToken(EveryGrammarParser.BOOLXOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolXOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolXOr(this);
		}
	}


}

EveryGrammarParser.BoolXOrContext = BoolXOrContext;

class BoolXOr_NextContext extends Bool_xor_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_and_term() {
	    return this.getTypedRuleContext(Bool_and_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolXOr_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolXOr_Next(this);
		}
	}


}

EveryGrammarParser.BoolXOr_NextContext = BoolXOr_NextContext;

class Bool_and_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bool_and_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoolAnd_NextContext extends Bool_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolAnd_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolAnd_Next(this);
		}
	}


}

EveryGrammarParser.BoolAnd_NextContext = BoolAnd_NextContext;

class BoolAndContext extends Bool_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bool_and_term() {
	    return this.getTypedRuleContext(Bool_and_termContext,0);
	};

	BOOLAND() {
	    return this.getToken(EveryGrammarParser.BOOLAND, 0);
	};

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBoolAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBoolAnd(this);
		}
	}


}

EveryGrammarParser.BoolAndContext = BoolAndContext;

class EqualityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_equality;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Equality_ContainsContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	CONTAINS() {
	    return this.getToken(EveryGrammarParser.CONTAINS, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_Contains(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_Contains(this);
		}
	}


}

EveryGrammarParser.Equality_ContainsContext = Equality_ContainsContext;

class Equality_NextContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_Next(this);
		}
	}


}

EveryGrammarParser.Equality_NextContext = Equality_NextContext;

class Equality_EqualContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	EQUAL() {
	    return this.getToken(EveryGrammarParser.EQUAL, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_Equal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_Equal(this);
		}
	}


}

EveryGrammarParser.Equality_EqualContext = Equality_EqualContext;

class Equality_NotEqualIgnoreCaseContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	NOTEQUAL_IGNORECASE() {
	    return this.getToken(EveryGrammarParser.NOTEQUAL_IGNORECASE, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_NotEqualIgnoreCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_NotEqualIgnoreCase(this);
		}
	}


}

EveryGrammarParser.Equality_NotEqualIgnoreCaseContext = Equality_NotEqualIgnoreCaseContext;

class Equality_NotEqualContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	NOTEQUAL() {
	    return this.getToken(EveryGrammarParser.NOTEQUAL, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_NotEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_NotEqual(this);
		}
	}


}

EveryGrammarParser.Equality_NotEqualContext = Equality_NotEqualContext;

class Equality_NotContainsContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	NOT() {
	    return this.getToken(EveryGrammarParser.NOT, 0);
	};

	CONTAINS() {
	    return this.getToken(EveryGrammarParser.CONTAINS, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_NotContains(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_NotContains(this);
		}
	}


}

EveryGrammarParser.Equality_NotContainsContext = Equality_NotContainsContext;

class Equality_EqualIgnoreCaseContext extends EqualityContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	equality() {
	    return this.getTypedRuleContext(EqualityContext,0);
	};

	EQUAL_IGNORECASE() {
	    return this.getToken(EveryGrammarParser.EQUAL_IGNORECASE, 0);
	};

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterEquality_EqualIgnoreCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitEquality_EqualIgnoreCase(this);
		}
	}


}

EveryGrammarParser.Equality_EqualIgnoreCaseContext = Equality_EqualIgnoreCaseContext;

class CheckContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_check;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Check_NextContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_Next(this);
		}
	}


}

EveryGrammarParser.Check_NextContext = Check_NextContext;

class Check_GreaterContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	GREATER() {
	    return this.getToken(EveryGrammarParser.GREATER, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_Greater(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_Greater(this);
		}
	}


}

EveryGrammarParser.Check_GreaterContext = Check_GreaterContext;

class Check_GreaterEqualContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	GREATEREQUAL() {
	    return this.getToken(EveryGrammarParser.GREATEREQUAL, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_GreaterEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_GreaterEqual(this);
		}
	}


}

EveryGrammarParser.Check_GreaterEqualContext = Check_GreaterEqualContext;

class Check_LowerContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	LOWER() {
	    return this.getToken(EveryGrammarParser.LOWER, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_Lower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_Lower(this);
		}
	}


}

EveryGrammarParser.Check_LowerContext = Check_LowerContext;

class Check_LowerEqualContext extends CheckContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check() {
	    return this.getTypedRuleContext(CheckContext,0);
	};

	LOWEREQUAL() {
	    return this.getToken(EveryGrammarParser.LOWEREQUAL, 0);
	};

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheck_LowerEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheck_LowerEqual(this);
		}
	}


}

EveryGrammarParser.Check_LowerEqualContext = Check_LowerEqualContext;

class Bit_or_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bit_or_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitORContext extends Bit_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_or_term() {
	    return this.getTypedRuleContext(Bit_or_termContext,0);
	};

	BITOR() {
	    return this.getToken(EveryGrammarParser.BITOR, 0);
	};

	bit_and_term() {
	    return this.getTypedRuleContext(Bit_and_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitOR(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitOR(this);
		}
	}


}

EveryGrammarParser.BitORContext = BitORContext;

class BitOr_NextContext extends Bit_or_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_and_term() {
	    return this.getTypedRuleContext(Bit_and_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitOr_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitOr_Next(this);
		}
	}


}

EveryGrammarParser.BitOr_NextContext = BitOr_NextContext;

class Bit_and_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_bit_and_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BitAndContext extends Bit_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bit_and_term() {
	    return this.getTypedRuleContext(Bit_and_termContext,0);
	};

	BITAND() {
	    return this.getToken(EveryGrammarParser.BITAND, 0);
	};

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitAnd(this);
		}
	}


}

EveryGrammarParser.BitAndContext = BitAndContext;

class BitAnd_NextContext extends Bit_and_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterBitAnd_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitBitAnd_Next(this);
		}
	}


}

EveryGrammarParser.BitAnd_NextContext = BitAnd_NextContext;

class Line_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_line_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Line_AdditionContext extends Line_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	ADD() {
	    return this.getToken(EveryGrammarParser.ADD, 0);
	};

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterLine_Addition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitLine_Addition(this);
		}
	}


}

EveryGrammarParser.Line_AdditionContext = Line_AdditionContext;

class Line_SubtractionContext extends Line_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	line_term() {
	    return this.getTypedRuleContext(Line_termContext,0);
	};

	SUBTRACT() {
	    return this.getToken(EveryGrammarParser.SUBTRACT, 0);
	};

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterLine_Subtraction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitLine_Subtraction(this);
		}
	}


}

EveryGrammarParser.Line_SubtractionContext = Line_SubtractionContext;

class Line_NextContext extends Line_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterLine_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitLine_Next(this);
		}
	}


}

EveryGrammarParser.Line_NextContext = Line_NextContext;

class Point_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_point_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PointTerm_PowerOperatorContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	POWEROPERATOR() {
	    return this.getToken(EveryGrammarParser.POWEROPERATOR, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_PowerOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_PowerOperator(this);
		}
	}


}

EveryGrammarParser.PointTerm_PowerOperatorContext = PointTerm_PowerOperatorContext;

class PointTerm_ModuloContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	MODULO() {
	    return this.getToken(EveryGrammarParser.MODULO, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Modulo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Modulo(this);
		}
	}


}

EveryGrammarParser.PointTerm_ModuloContext = PointTerm_ModuloContext;

class PointTerm_MultiplyContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	MULTIPLY() {
	    return this.getToken(EveryGrammarParser.MULTIPLY, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Multiply(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Multiply(this);
		}
	}


}

EveryGrammarParser.PointTerm_MultiplyContext = PointTerm_MultiplyContext;

class PointTerm_BitShiftLeftContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	BITSHIFTLEFT() {
	    return this.getToken(EveryGrammarParser.BITSHIFTLEFT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_BitShiftLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_BitShiftLeft(this);
		}
	}


}

EveryGrammarParser.PointTerm_BitShiftLeftContext = PointTerm_BitShiftLeftContext;

class PointTerm_IntegerDivisionContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	INTEGERDIVISION() {
	    return this.getToken(EveryGrammarParser.INTEGERDIVISION, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_IntegerDivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_IntegerDivision(this);
		}
	}


}

EveryGrammarParser.PointTerm_IntegerDivisionContext = PointTerm_IntegerDivisionContext;

class PointTerm_BitShiftRightContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	BITSHIFTRIGHT() {
	    return this.getToken(EveryGrammarParser.BITSHIFTRIGHT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_BitShiftRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_BitShiftRight(this);
		}
	}


}

EveryGrammarParser.PointTerm_BitShiftRightContext = PointTerm_BitShiftRightContext;

class PointTerm_DivideContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	point_term() {
	    return this.getTypedRuleContext(Point_termContext,0);
	};

	DIVIDE() {
	    return this.getToken(EveryGrammarParser.DIVIDE, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Divide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Divide(this);
		}
	}


}

EveryGrammarParser.PointTerm_DivideContext = PointTerm_DivideContext;

class PointTerm_NextContext extends Point_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterPointTerm_Next(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitPointTerm_Next(this);
		}
	}


}

EveryGrammarParser.PointTerm_NextContext = PointTerm_NextContext;

class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_factor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Factor_CheckFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	check_function_term() {
	    return this.getTypedRuleContext(Check_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_CheckFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_CheckFunction(this);
		}
	}


}

EveryGrammarParser.Factor_CheckFunctionContext = Factor_CheckFunctionContext;

class Factor_FalseContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FALSE() {
	    return this.getToken(EveryGrammarParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_False(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_False(this);
		}
	}


}

EveryGrammarParser.Factor_FalseContext = Factor_FalseContext;

class Factor_IntegerContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INT() {
	    return this.getToken(EveryGrammarParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Integer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Integer(this);
		}
	}


}

EveryGrammarParser.Factor_IntegerContext = Factor_IntegerContext;

class Factor_ObjectVariablesContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OBJECTSVARIABLE() {
	    return this.getToken(EveryGrammarParser.OBJECTSVARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_ObjectVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_ObjectVariables(this);
		}
	}


}

EveryGrammarParser.Factor_ObjectVariablesContext = Factor_ObjectVariablesContext;

class Factor_DateTimeTermContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	datetime_term() {
	    return this.getTypedRuleContext(Datetime_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_DateTimeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_DateTimeTerm(this);
		}
	}


}

EveryGrammarParser.Factor_DateTimeTermContext = Factor_DateTimeTermContext;

class Factor_ConvertFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	convert_function_term() {
	    return this.getTypedRuleContext(Convert_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_ConvertFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_ConvertFunction(this);
		}
	}


}

EveryGrammarParser.Factor_ConvertFunctionContext = Factor_ConvertFunctionContext;

class Factor_TrueContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUE() {
	    return this.getToken(EveryGrammarParser.TRUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_True(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_True(this);
		}
	}


}

EveryGrammarParser.Factor_TrueContext = Factor_TrueContext;

class Factor_NotContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(EveryGrammarParser.NOT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Not(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Not(this);
		}
	}


}

EveryGrammarParser.Factor_NotContext = Factor_NotContext;

class Factor_RandomFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	random_function_term() {
	    return this.getTypedRuleContext(Random_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_RandomFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_RandomFunction(this);
		}
	}


}

EveryGrammarParser.Factor_RandomFunctionContext = Factor_RandomFunctionContext;

class Factor_FactorialContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FACTORIAL() {
	    return this.getToken(EveryGrammarParser.FACTORIAL, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Factorial(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Factorial(this);
		}
	}


}

EveryGrammarParser.Factor_FactorialContext = Factor_FactorialContext;

class Factor_BracketsContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROUNDBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETOPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Brackets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Brackets(this);
		}
	}


}

EveryGrammarParser.Factor_BracketsContext = Factor_BracketsContext;

class Factor_MathFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	math_function_term() {
	    return this.getTypedRuleContext(Math_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_MathFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_MathFunction(this);
		}
	}


}

EveryGrammarParser.Factor_MathFunctionContext = Factor_MathFunctionContext;

class Factor_PlusContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(EveryGrammarParser.ADD, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Plus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Plus(this);
		}
	}


}

EveryGrammarParser.Factor_PlusContext = Factor_PlusContext;

class Factor_TildeContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TILDE() {
	    return this.getToken(EveryGrammarParser.TILDE, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Tilde(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Tilde(this);
		}
	}


}

EveryGrammarParser.Factor_TildeContext = Factor_TildeContext;

class Factor_MinusContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUBTRACT() {
	    return this.getToken(EveryGrammarParser.SUBTRACT, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Minus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Minus(this);
		}
	}


}

EveryGrammarParser.Factor_MinusContext = Factor_MinusContext;

class Factor_VariableContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(EveryGrammarParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Variable(this);
		}
	}


}

EveryGrammarParser.Factor_VariableContext = Factor_VariableContext;

class Factor_StringContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(EveryGrammarParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_String(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_String(this);
		}
	}


}

EveryGrammarParser.Factor_StringContext = Factor_StringContext;

class Factor_DoubleContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOUBLE() {
	    return this.getToken(EveryGrammarParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Double(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Double(this);
		}
	}


}

EveryGrammarParser.Factor_DoubleContext = Factor_DoubleContext;

class Factor_ArrayContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	array_expr() {
	    return this.getTypedRuleContext(Array_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_Array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_Array(this);
		}
	}


}

EveryGrammarParser.Factor_ArrayContext = Factor_ArrayContext;

class Factor_DefaultFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	default_function_term() {
	    return this.getTypedRuleContext(Default_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_DefaultFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_DefaultFunction(this);
		}
	}


}

EveryGrammarParser.Factor_DefaultFunctionContext = Factor_DefaultFunctionContext;

class Factor_StatisticMathFunctionContext extends FactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	statistic_math_function_term() {
	    return this.getTypedRuleContext(Statistic_math_function_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFactor_StatisticMathFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFactor_StatisticMathFunction(this);
		}
	}


}

EveryGrammarParser.Factor_StatisticMathFunctionContext = Factor_StatisticMathFunctionContext;

class Random_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_random_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Random_DecimalArrayMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_DecimalArrayMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_DecimalArrayMinMax(this);
		}
	}


}

EveryGrammarParser.Random_DecimalArrayMinMaxContext = Random_DecimalArrayMinMaxContext;

class Random_IntegerArrayContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_IntegerArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_IntegerArray(this);
		}
	}


}

EveryGrammarParser.Random_IntegerArrayContext = Random_IntegerArrayContext;

class Random_IntegerContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_Integer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_Integer(this);
		}
	}


}

EveryGrammarParser.Random_IntegerContext = Random_IntegerContext;

class Random_DecimalArrayContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_DecimalArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_DecimalArray(this);
		}
	}


}

EveryGrammarParser.Random_DecimalArrayContext = Random_DecimalArrayContext;

class Random_DecimalMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_DecimalMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_DecimalMinMax(this);
		}
	}


}

EveryGrammarParser.Random_DecimalMinMaxContext = Random_DecimalMinMaxContext;

class Random_IntegerArrayMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_IntegerArrayMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_IntegerArrayMinMax(this);
		}
	}


}

EveryGrammarParser.Random_IntegerArrayMinMaxContext = Random_IntegerArrayMinMaxContext;

class Random_DecimalContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndDecimal() {
	    return this.getToken(EveryGrammarParser.RndDecimal, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_Decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_Decimal(this);
		}
	}


}

EveryGrammarParser.Random_DecimalContext = Random_DecimalContext;

class Random_IntegerMinMaxContext extends Random_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RndInteger() {
	    return this.getToken(EveryGrammarParser.RndInteger, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterRandom_IntegerMinMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitRandom_IntegerMinMax(this);
		}
	}


}

EveryGrammarParser.Random_IntegerMinMaxContext = Random_IntegerMinMaxContext;

class Convert_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_convert_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Convert_ToNumberContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToNumber() {
	    return this.getToken(EveryGrammarParser.ToNumber, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToNumber(this);
		}
	}


}

EveryGrammarParser.Convert_ToNumberContext = Convert_ToNumberContext;

class Convert_ToBooleanContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToBoolean() {
	    return this.getToken(EveryGrammarParser.ToBoolean, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToBoolean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToBoolean(this);
		}
	}


}

EveryGrammarParser.Convert_ToBooleanContext = Convert_ToBooleanContext;

class Convert_GradToDegreeContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GradToDegree() {
	    return this.getToken(EveryGrammarParser.GradToDegree, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_GradToDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_GradToDegree(this);
		}
	}


}

EveryGrammarParser.Convert_GradToDegreeContext = Convert_GradToDegreeContext;

class Convert_ToStringContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToString() {
	    return this.getToken(EveryGrammarParser.ToString, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToString(this);
		}
	}


}

EveryGrammarParser.Convert_ToStringContext = Convert_ToStringContext;

class Convert_ToArrayContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ToArray() {
	    return this.getToken(EveryGrammarParser.ToArray, 0);
	};

	expr_args() {
	    return this.getTypedRuleContext(Expr_argsContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_ToArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_ToArray(this);
		}
	}


}

EveryGrammarParser.Convert_ToArrayContext = Convert_ToArrayContext;

class Convert_DegreeToGradContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DegreeToGrad() {
	    return this.getToken(EveryGrammarParser.DegreeToGrad, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_DegreeToGrad(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_DegreeToGrad(this);
		}
	}


}

EveryGrammarParser.Convert_DegreeToGradContext = Convert_DegreeToGradContext;

class Convert_DegreeToRadianContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DegreeToRadian() {
	    return this.getToken(EveryGrammarParser.DegreeToRadian, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_DegreeToRadian(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_DegreeToRadian(this);
		}
	}


}

EveryGrammarParser.Convert_DegreeToRadianContext = Convert_DegreeToRadianContext;

class Convert_RadianToGradContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RadianToGrad() {
	    return this.getToken(EveryGrammarParser.RadianToGrad, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_RadianToGrad(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_RadianToGrad(this);
		}
	}


}

EveryGrammarParser.Convert_RadianToGradContext = Convert_RadianToGradContext;

class Convert_GradToRadianContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GradToRadian() {
	    return this.getToken(EveryGrammarParser.GradToRadian, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_GradToRadian(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_GradToRadian(this);
		}
	}


}

EveryGrammarParser.Convert_GradToRadianContext = Convert_GradToRadianContext;

class Convert_RadianToDegreeContext extends Convert_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RadianToDegree() {
	    return this.getToken(EveryGrammarParser.RadianToDegree, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterConvert_RadianToDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitConvert_RadianToDegree(this);
		}
	}


}

EveryGrammarParser.Convert_RadianToDegreeContext = Convert_RadianToDegreeContext;

class Datetime_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_datetime_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DateTime_DateHourMinuteContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateHourMinute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateHourMinute(this);
		}
	}


}

EveryGrammarParser.DateTime_DateHourMinuteContext = DateTime_DateHourMinuteContext;

class DateTime_DateHourMinuteSecondsContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateHourMinuteSeconds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateHourMinuteSeconds(this);
		}
	}


}

EveryGrammarParser.DateTime_DateHourMinuteSecondsContext = DateTime_DateHourMinuteSecondsContext;

class DateTime_DateEntryContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateEntry(this);
		}
	}


}

EveryGrammarParser.DateTime_DateEntryContext = DateTime_DateEntryContext;

class DateTime_FullContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_Full(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_Full(this);
		}
	}


}

EveryGrammarParser.DateTime_FullContext = DateTime_FullContext;

class DateTime_ExpressionContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_Expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_Expression(this);
		}
	}


}

EveryGrammarParser.DateTime_ExpressionContext = DateTime_ExpressionContext;

class DateTime_DateHourContext extends Datetime_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTime() {
	    return this.getToken(EveryGrammarParser.DateTime, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterDateTime_DateHour(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitDateTime_DateHour(this);
		}
	}


}

EveryGrammarParser.DateTime_DateHourContext = DateTime_DateHourContext;

class Array_slicing_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_array_slicing_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArraySlicing_IndexingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_Indexing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_Indexing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_IndexingContext = ArraySlicing_IndexingContext;

class ArraySlicing_EndSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_EndSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_EndSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_EndSlicingContext = ArraySlicing_EndSlicingContext;

class ArraySlicing_AllStepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_AllStepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_AllStepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_AllStepSlicingContext = ArraySlicing_AllStepSlicingContext;

class ArraySlicing_StartSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_StartSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_StartSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_StartSlicingContext = ArraySlicing_StartSlicingContext;

class ArraySlicing_SlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(EveryGrammarParser.COLON, 0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_Slicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_Slicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_SlicingContext = ArraySlicing_SlicingContext;

class ArraySlicing_StepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_StepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_StepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_StepSlicingContext = ArraySlicing_StepSlicingContext;

class ArraySlicing_StartStepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_StartStepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_StartStepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_StartStepSlicingContext = ArraySlicing_StartStepSlicingContext;

class ArraySlicing_EndStepSlicingContext extends Array_slicing_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.COLON);
	    } else {
	        return this.getToken(EveryGrammarParser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArraySlicing_EndStepSlicing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArraySlicing_EndStepSlicing(this);
		}
	}


}

EveryGrammarParser.ArraySlicing_EndStepSlicingContext = ArraySlicing_EndStepSlicingContext;

class Check_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_check_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CheckFunction_IsStringContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsString() {
	    return this.getToken(EveryGrammarParser.IsString, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsString(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsStringContext = CheckFunction_IsStringContext;

class CheckFunction_IsArrayContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsArray() {
	    return this.getToken(EveryGrammarParser.IsArray, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsArray(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsArrayContext = CheckFunction_IsArrayContext;

class CheckFunction_IsBooleanContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsBoolean() {
	    return this.getToken(EveryGrammarParser.IsBoolean, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsBoolean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsBoolean(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsBooleanContext = CheckFunction_IsBooleanContext;

class CheckFunction_IsDateTimeContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsDateTime() {
	    return this.getToken(EveryGrammarParser.IsDateTime, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsDateTime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsDateTime(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsDateTimeContext = CheckFunction_IsDateTimeContext;

class CheckFunction_IsWhitespaceContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsWhitespace() {
	    return this.getToken(EveryGrammarParser.IsWhitespace, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsWhitespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsWhitespace(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsWhitespaceContext = CheckFunction_IsWhitespaceContext;

class CheckFunction_HasDuplicatesContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HasDuplicates() {
	    return this.getToken(EveryGrammarParser.HasDuplicates, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_HasDuplicates(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_HasDuplicates(this);
		}
	}


}

EveryGrammarParser.CheckFunction_HasDuplicatesContext = CheckFunction_HasDuplicatesContext;

class CheckFunction_HasAnyContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HasAny() {
	    return this.getToken(EveryGrammarParser.HasAny, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_HasAny(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_HasAny(this);
		}
	}


}

EveryGrammarParser.CheckFunction_HasAnyContext = CheckFunction_HasAnyContext;

class CheckFunction_IsNullContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsNull() {
	    return this.getToken(EveryGrammarParser.IsNull, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsNull(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsNullContext = CheckFunction_IsNullContext;

class CheckFunction_IsNumberContext extends Check_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IsNumber() {
	    return this.getToken(EveryGrammarParser.IsNumber, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterCheckFunction_IsNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitCheckFunction_IsNumber(this);
		}
	}


}

EveryGrammarParser.CheckFunction_IsNumberContext = CheckFunction_IsNumberContext;

class Default_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_default_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Function_ExceptContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Except() {
	    return this.getToken(EveryGrammarParser.Except, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Except(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Except(this);
		}
	}


}

EveryGrammarParser.Function_ExceptContext = Function_ExceptContext;

class Function_DifferenceContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Difference() {
	    return this.getToken(EveryGrammarParser.Difference, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Difference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Difference(this);
		}
	}


}

EveryGrammarParser.Function_DifferenceContext = Function_DifferenceContext;

class Function_ConcatContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Concat() {
	    return this.getToken(EveryGrammarParser.Concat, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Concat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Concat(this);
		}
	}


}

EveryGrammarParser.Function_ConcatContext = Function_ConcatContext;

class Function_IndexOfContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(EveryGrammarParser.IndexOf, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_IndexOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_IndexOf(this);
		}
	}


}

EveryGrammarParser.Function_IndexOfContext = Function_IndexOfContext;

class Function_DistincContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Distinct() {
	    return this.getToken(EveryGrammarParser.Distinct, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Distinc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Distinc(this);
		}
	}


}

EveryGrammarParser.Function_DistincContext = Function_DistincContext;

class Function_LowerContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LowerCase() {
	    return this.getToken(EveryGrammarParser.LowerCase, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Lower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Lower(this);
		}
	}


}

EveryGrammarParser.Function_LowerContext = Function_LowerContext;

class Function_UpperContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UpperCase() {
	    return this.getToken(EveryGrammarParser.UpperCase, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Upper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Upper(this);
		}
	}


}

EveryGrammarParser.Function_UpperContext = Function_UpperContext;

class Function_TrimContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Trim() {
	    return this.getToken(EveryGrammarParser.Trim, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Trim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Trim(this);
		}
	}


}

EveryGrammarParser.Function_TrimContext = Function_TrimContext;

class Function_IndexOfStartContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(EveryGrammarParser.IndexOf, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_IndexOfStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_IndexOfStart(this);
		}
	}


}

EveryGrammarParser.Function_IndexOfStartContext = Function_IndexOfStartContext;

class Function_IndexOfStartEndContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IndexOf() {
	    return this.getToken(EveryGrammarParser.IndexOf, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_IndexOfStartEnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_IndexOfStartEnd(this);
		}
	}


}

EveryGrammarParser.Function_IndexOfStartEndContext = Function_IndexOfStartEndContext;

class Function_SortContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sort() {
	    return this.getToken(EveryGrammarParser.Sort, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Sort(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Sort(this);
		}
	}


}

EveryGrammarParser.Function_SortContext = Function_SortContext;

class Function_CountContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Count() {
	    return this.getToken(EveryGrammarParser.Count, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Count(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Count(this);
		}
	}


}

EveryGrammarParser.Function_CountContext = Function_CountContext;

class Function_ReverseContext extends Default_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Reverse() {
	    return this.getToken(EveryGrammarParser.Reverse, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterFunction_Reverse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitFunction_Reverse(this);
		}
	}


}

EveryGrammarParser.Function_ReverseContext = Function_ReverseContext;

class Math_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_math_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Math_NormContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Norm() {
	    return this.getToken(EveryGrammarParser.Norm, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Norm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Norm(this);
		}
	}


}

EveryGrammarParser.Math_NormContext = Math_NormContext;

class Math_CscHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CscH() {
	    return this.getToken(EveryGrammarParser.CscH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CscH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CscH(this);
		}
	}


}

EveryGrammarParser.Math_CscHContext = Math_CscHContext;

class Math_ASinContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASin() {
	    return this.getToken(EveryGrammarParser.ASin, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASin(this);
		}
	}


}

EveryGrammarParser.Math_ASinContext = Math_ASinContext;

class Math_TanHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TanH() {
	    return this.getToken(EveryGrammarParser.TanH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_TanH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_TanH(this);
		}
	}


}

EveryGrammarParser.Math_TanHContext = Math_TanHContext;

class Math_EulerNormContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EulerNorm() {
	    return this.getToken(EveryGrammarParser.EulerNorm, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_EulerNorm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_EulerNorm(this);
		}
	}


}

EveryGrammarParser.Math_EulerNormContext = Math_EulerNormContext;

class Math_ASecContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASec() {
	    return this.getToken(EveryGrammarParser.ASec, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASec(this);
		}
	}


}

EveryGrammarParser.Math_ASecContext = Math_ASecContext;

class Math_DerivativeContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Derivative() {
	    return this.getToken(EveryGrammarParser.Derivative, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Derivative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Derivative(this);
		}
	}


}

EveryGrammarParser.Math_DerivativeContext = Math_DerivativeContext;

class Math_Round_Not_DecimalContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Round() {
	    return this.getToken(EveryGrammarParser.Round, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Round_Not_Decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Round_Not_Decimal(this);
		}
	}


}

EveryGrammarParser.Math_Round_Not_DecimalContext = Math_Round_Not_DecimalContext;

class Math_DotProductContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DotProduct() {
	    return this.getToken(EveryGrammarParser.DotProduct, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_DotProduct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_DotProduct(this);
		}
	}


}

EveryGrammarParser.Math_DotProductContext = Math_DotProductContext;

class Math_ASinHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASinH() {
	    return this.getToken(EveryGrammarParser.ASinH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASinH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASinH(this);
		}
	}


}

EveryGrammarParser.Math_ASinHContext = Math_ASinHContext;

class Math_CotHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CotH() {
	    return this.getToken(EveryGrammarParser.CotH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CotH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CotH(this);
		}
	}


}

EveryGrammarParser.Math_CotHContext = Math_CotHContext;

class Math_Max_ArrayContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Max() {
	    return this.getToken(EveryGrammarParser.Max, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Max_Array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Max_Array(this);
		}
	}


}

EveryGrammarParser.Math_Max_ArrayContext = Math_Max_ArrayContext;

class Math_CosContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Cos() {
	    return this.getToken(EveryGrammarParser.Cos, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Cos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Cos(this);
		}
	}


}

EveryGrammarParser.Math_CosContext = Math_CosContext;

class Math_CotContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Cot() {
	    return this.getToken(EveryGrammarParser.Cot, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Cot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Cot(this);
		}
	}


}

EveryGrammarParser.Math_CotContext = Math_CotContext;

class Math_ACscContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACsc() {
	    return this.getToken(EveryGrammarParser.ACsc, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACsc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACsc(this);
		}
	}


}

EveryGrammarParser.Math_ACscContext = Math_ACscContext;

class Math_TanContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Tan() {
	    return this.getToken(EveryGrammarParser.Tan, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Tan(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Tan(this);
		}
	}


}

EveryGrammarParser.Math_TanContext = Math_TanContext;

class Math_BinomilaContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Binomial() {
	    return this.getToken(EveryGrammarParser.Binomial, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Binomila(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Binomila(this);
		}
	}


}

EveryGrammarParser.Math_BinomilaContext = Math_BinomilaContext;

class Math_ExpContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Exp() {
	    return this.getToken(EveryGrammarParser.Exp, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Exp(this);
		}
	}


}

EveryGrammarParser.Math_ExpContext = Math_ExpContext;

class Math_FloorContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Floor() {
	    return this.getToken(EveryGrammarParser.Floor, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Floor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Floor(this);
		}
	}


}

EveryGrammarParser.Math_FloorContext = Math_FloorContext;

class Math_RootContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Root() {
	    return this.getToken(EveryGrammarParser.Root, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Root(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Root(this);
		}
	}


}

EveryGrammarParser.Math_RootContext = Math_RootContext;

class Math_ACotHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACotH() {
	    return this.getToken(EveryGrammarParser.ACotH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACotH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACotH(this);
		}
	}


}

EveryGrammarParser.Math_ACotHContext = Math_ACotHContext;

class Math_CbrtContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Cbrt() {
	    return this.getToken(EveryGrammarParser.Cbrt, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Cbrt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Cbrt(this);
		}
	}


}

EveryGrammarParser.Math_CbrtContext = Math_CbrtContext;

class Math_ACotContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACot() {
	    return this.getToken(EveryGrammarParser.ACot, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACot(this);
		}
	}


}

EveryGrammarParser.Math_ACotContext = Math_ACotContext;

class Math_ACosContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACos() {
	    return this.getToken(EveryGrammarParser.ACos, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACos(this);
		}
	}


}

EveryGrammarParser.Math_ACosContext = Math_ACosContext;

class Math_ATanHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATanH() {
	    return this.getToken(EveryGrammarParser.ATanH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ATanH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ATanH(this);
		}
	}


}

EveryGrammarParser.Math_ATanHContext = Math_ATanHContext;

class Math_CrossSumContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CrossSum() {
	    return this.getToken(EveryGrammarParser.CrossSum, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CrossSum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CrossSum(this);
		}
	}


}

EveryGrammarParser.Math_CrossSumContext = Math_CrossSumContext;

class Math_GreatesCommonDivisorContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GreatestCommonDivisor() {
	    return this.getToken(EveryGrammarParser.GreatestCommonDivisor, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_GreatesCommonDivisor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_GreatesCommonDivisor(this);
		}
	}


}

EveryGrammarParser.Math_GreatesCommonDivisorContext = Math_GreatesCommonDivisorContext;

class Math_LogContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Log() {
	    return this.getToken(EveryGrammarParser.Log, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Log(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Log(this);
		}
	}


}

EveryGrammarParser.Math_LogContext = Math_LogContext;

class Math_Round_DecimalContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Round() {
	    return this.getToken(EveryGrammarParser.Round, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Round_Decimal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Round_Decimal(this);
		}
	}


}

EveryGrammarParser.Math_Round_DecimalContext = Math_Round_DecimalContext;

class Math_PowerContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Power() {
	    return this.getToken(EveryGrammarParser.Power, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Power(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Power(this);
		}
	}


}

EveryGrammarParser.Math_PowerContext = Math_PowerContext;

class Math_MaxNormContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MaxNorm() {
	    return this.getToken(EveryGrammarParser.MaxNorm, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_MaxNorm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_MaxNorm(this);
		}
	}


}

EveryGrammarParser.Math_MaxNormContext = Math_MaxNormContext;

class Math_ASecHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASecH() {
	    return this.getToken(EveryGrammarParser.ASecH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ASecH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ASecH(this);
		}
	}


}

EveryGrammarParser.Math_ASecHContext = Math_ASecHContext;

class Math_ACosHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACosH() {
	    return this.getToken(EveryGrammarParser.ACosH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACosH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACosH(this);
		}
	}


}

EveryGrammarParser.Math_ACosHContext = Math_ACosHContext;

class Math_ClampContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Clamp() {
	    return this.getToken(EveryGrammarParser.Clamp, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Clamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Clamp(this);
		}
	}


}

EveryGrammarParser.Math_ClampContext = Math_ClampContext;

class Math_Min_ArrayContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Min() {
	    return this.getToken(EveryGrammarParser.Min, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Min_Array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Min_Array(this);
		}
	}


}

EveryGrammarParser.Math_Min_ArrayContext = Math_Min_ArrayContext;

class Math_SinHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SinH() {
	    return this.getToken(EveryGrammarParser.SinH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_SinH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_SinH(this);
		}
	}


}

EveryGrammarParser.Math_SinHContext = Math_SinHContext;

class Math_Log2Context extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Log2() {
	    return this.getToken(EveryGrammarParser.Log2, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Log2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Log2(this);
		}
	}


}

EveryGrammarParser.Math_Log2Context = Math_Log2Context;

class Math_SecContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sec() {
	    return this.getToken(EveryGrammarParser.Sec, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Sec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Sec(this);
		}
	}


}

EveryGrammarParser.Math_SecContext = Math_SecContext;

class Math_ATan2Context extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATan2() {
	    return this.getToken(EveryGrammarParser.ATan2, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ATan2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ATan2(this);
		}
	}


}

EveryGrammarParser.Math_ATan2Context = Math_ATan2Context;

class Math_ACscHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACscH() {
	    return this.getToken(EveryGrammarParser.ACscH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ACscH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ACscH(this);
		}
	}


}

EveryGrammarParser.Math_ACscHContext = Math_ACscHContext;

class Math_ATanContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATan() {
	    return this.getToken(EveryGrammarParser.ATan, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_ATan(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_ATan(this);
		}
	}


}

EveryGrammarParser.Math_ATanContext = Math_ATanContext;

class Math_TruncateContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Truncate() {
	    return this.getToken(EveryGrammarParser.Truncate, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Truncate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Truncate(this);
		}
	}


}

EveryGrammarParser.Math_TruncateContext = Math_TruncateContext;

class Math_Max_TwoContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Max() {
	    return this.getToken(EveryGrammarParser.Max, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Max_Two(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Max_Two(this);
		}
	}


}

EveryGrammarParser.Math_Max_TwoContext = Math_Max_TwoContext;

class Math_LeastCommonMultipleContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LeastCommonMultiple() {
	    return this.getToken(EveryGrammarParser.LeastCommonMultiple, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_LeastCommonMultiple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_LeastCommonMultiple(this);
		}
	}


}

EveryGrammarParser.Math_LeastCommonMultipleContext = Math_LeastCommonMultipleContext;

class Math_IntegrationContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Integration() {
	    return this.getToken(EveryGrammarParser.Integration, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EveryGrammarParser.KOMMA);
	    } else {
	        return this.getToken(EveryGrammarParser.KOMMA, i);
	    }
	};


	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Integration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Integration(this);
		}
	}


}

EveryGrammarParser.Math_IntegrationContext = Math_IntegrationContext;

class Math_SqrtContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sqrt() {
	    return this.getToken(EveryGrammarParser.Sqrt, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Sqrt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Sqrt(this);
		}
	}


}

EveryGrammarParser.Math_SqrtContext = Math_SqrtContext;

class Math_Min_TwoContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Min() {
	    return this.getToken(EveryGrammarParser.Min, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Min_Two(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Min_Two(this);
		}
	}


}

EveryGrammarParser.Math_Min_TwoContext = Math_Min_TwoContext;

class Math_SinContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Sin() {
	    return this.getToken(EveryGrammarParser.Sin, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Sin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Sin(this);
		}
	}


}

EveryGrammarParser.Math_SinContext = Math_SinContext;

class Math_CscContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Csc() {
	    return this.getToken(EveryGrammarParser.Csc, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Csc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Csc(this);
		}
	}


}

EveryGrammarParser.Math_CscContext = Math_CscContext;

class Math_AbsContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Abs() {
	    return this.getToken(EveryGrammarParser.Abs, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Abs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Abs(this);
		}
	}


}

EveryGrammarParser.Math_AbsContext = Math_AbsContext;

class Math_CosHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CosH() {
	    return this.getToken(EveryGrammarParser.CosH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_CosH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_CosH(this);
		}
	}


}

EveryGrammarParser.Math_CosHContext = Math_CosHContext;

class Math_CeillingContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Ceilling() {
	    return this.getToken(EveryGrammarParser.Ceilling, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Ceilling(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Ceilling(this);
		}
	}


}

EveryGrammarParser.Math_CeillingContext = Math_CeillingContext;

class Math_Log10Context extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Log10() {
	    return this.getToken(EveryGrammarParser.Log10, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_Log10(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_Log10(this);
		}
	}


}

EveryGrammarParser.Math_Log10Context = Math_Log10Context;

class Math_SecHContext extends Math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SecH() {
	    return this.getToken(EveryGrammarParser.SecH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMath_SecH(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMath_SecH(this);
		}
	}


}

EveryGrammarParser.Math_SecHContext = Math_SecHContext;

class Statistic_math_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_statistic_math_function_term;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MathStatistic_PearsonContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Pearson() {
	    return this.getToken(EveryGrammarParser.Pearson, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Pearson(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Pearson(this);
		}
	}


}

EveryGrammarParser.MathStatistic_PearsonContext = MathStatistic_PearsonContext;

class MathStatistic_MedianContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Median() {
	    return this.getToken(EveryGrammarParser.Median, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Median(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Median(this);
		}
	}


}

EveryGrammarParser.MathStatistic_MedianContext = MathStatistic_MedianContext;

class MathStatistic_VarianceContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Variance() {
	    return this.getToken(EveryGrammarParser.Variance, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Variance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Variance(this);
		}
	}


}

EveryGrammarParser.MathStatistic_VarianceContext = MathStatistic_VarianceContext;

class MathStatistic_CoVarianceContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CoVariance() {
	    return this.getToken(EveryGrammarParser.CoVariance, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_CoVariance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_CoVariance(this);
		}
	}


}

EveryGrammarParser.MathStatistic_CoVarianceContext = MathStatistic_CoVarianceContext;

class MathStatistic_SpearmanContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Spearman() {
	    return this.getToken(EveryGrammarParser.Spearman, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Spearman(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Spearman(this);
		}
	}


}

EveryGrammarParser.MathStatistic_SpearmanContext = MathStatistic_SpearmanContext;

class MathStatistic_MeanContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Mean() {
	    return this.getToken(EveryGrammarParser.Mean, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Mean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Mean(this);
		}
	}


}

EveryGrammarParser.MathStatistic_MeanContext = MathStatistic_MeanContext;

class MathStatistic_QuantilContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Quantil() {
	    return this.getToken(EveryGrammarParser.Quantil, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_Quantil(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_Quantil(this);
		}
	}


}

EveryGrammarParser.MathStatistic_QuantilContext = MathStatistic_QuantilContext;

class MathStatistic_StDContext extends Statistic_math_function_termContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Std() {
	    return this.getToken(EveryGrammarParser.Std, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROUNDBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.ROUNDBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterMathStatistic_StD(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitMathStatistic_StD(this);
		}
	}


}

EveryGrammarParser.MathStatistic_StDContext = MathStatistic_StDContext;

class Expr_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_expr_args;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KOMMA() {
	    return this.getToken(EveryGrammarParser.KOMMA, 0);
	};

	expr_args() {
	    return this.getTypedRuleContext(Expr_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterExpr_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitExpr_args(this);
		}
	}


}



class Array_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EveryGrammarParser.RULE_array_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArrayCreationContext extends Array_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	expr_args() {
	    return this.getTypedRuleContext(Expr_argsContext,0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArrayCreation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArrayCreation(this);
		}
	}


}

EveryGrammarParser.ArrayCreationContext = ArrayCreationContext;

class ArrayCreation_EmptyContext extends Array_exprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EDGEBRACKETOPEN() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETOPEN, 0);
	};

	EDGEBRACKETCLOSED() {
	    return this.getToken(EveryGrammarParser.EDGEBRACKETCLOSED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.enterArrayCreation_Empty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EveryGrammarListener ) {
	        listener.exitArrayCreation_Empty(this);
		}
	}


}

EveryGrammarParser.ArrayCreation_EmptyContext = ArrayCreation_EmptyContext;


EveryGrammarParser.StartRuleContext = StartRuleContext; 
EveryGrammarParser.ExpressionContext = ExpressionContext; 
EveryGrammarParser.If_elseContext = If_elseContext; 
EveryGrammarParser.Inner_if_elseContext = Inner_if_elseContext; 
EveryGrammarParser.Bool_or_termContext = Bool_or_termContext; 
EveryGrammarParser.Bool_xor_termContext = Bool_xor_termContext; 
EveryGrammarParser.Bool_and_termContext = Bool_and_termContext; 
EveryGrammarParser.EqualityContext = EqualityContext; 
EveryGrammarParser.CheckContext = CheckContext; 
EveryGrammarParser.Bit_or_termContext = Bit_or_termContext; 
EveryGrammarParser.Bit_and_termContext = Bit_and_termContext; 
EveryGrammarParser.Line_termContext = Line_termContext; 
EveryGrammarParser.Point_termContext = Point_termContext; 
EveryGrammarParser.FactorContext = FactorContext; 
EveryGrammarParser.Random_function_termContext = Random_function_termContext; 
EveryGrammarParser.Convert_function_termContext = Convert_function_termContext; 
EveryGrammarParser.Datetime_termContext = Datetime_termContext; 
EveryGrammarParser.Array_slicing_termContext = Array_slicing_termContext; 
EveryGrammarParser.Check_function_termContext = Check_function_termContext; 
EveryGrammarParser.Default_function_termContext = Default_function_termContext; 
EveryGrammarParser.Math_function_termContext = Math_function_termContext; 
EveryGrammarParser.Statistic_math_function_termContext = Statistic_math_function_termContext; 
EveryGrammarParser.Expr_argsContext = Expr_argsContext; 
EveryGrammarParser.Array_exprContext = Array_exprContext; 
